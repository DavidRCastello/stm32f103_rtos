
test_rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004504  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004614  08004614  00005614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004688  08004688  00006010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08004688  08004688  00006010  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08004688  08004688  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004688  08004688  00005688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800468c  0800468c  0000568c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08004690  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a04  20000010  080046a0  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001a14  080046a0  00006a14  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001539d  00000000  00000000  00006039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000307f  00000000  00000000  0001b3d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001380  00000000  00000000  0001e458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f2f  00000000  00000000  0001f7d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002b3f  00000000  00000000  00020707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014695  00000000  00000000  00023246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094343  00000000  00000000  000378db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cbc1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005224  00000000  00000000  000cbc64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000d0e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080045fc 	.word	0x080045fc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080045fc 	.word	0x080045fc

08000150 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8000150:	b480      	push	{r7}
 8000152:	b083      	sub	sp, #12
 8000154:	af00      	add	r7, sp, #0
 8000156:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000158:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800015c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8000160:	f003 0301 	and.w	r3, r3, #1
 8000164:	2b00      	cmp	r3, #0
 8000166:	d013      	beq.n	8000190 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000168:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800016c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8000170:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000174:	2b00      	cmp	r3, #0
 8000176:	d00b      	beq.n	8000190 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000178:	e000      	b.n	800017c <ITM_SendChar+0x2c>
    {
      __NOP();
 800017a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800017c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	2b00      	cmp	r3, #0
 8000184:	d0f9      	beq.n	800017a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000186:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800018a:	687a      	ldr	r2, [r7, #4]
 800018c:	b2d2      	uxtb	r2, r2
 800018e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000190:	687b      	ldr	r3, [r7, #4]
}
 8000192:	4618      	mov	r0, r3
 8000194:	370c      	adds	r7, #12
 8000196:	46bd      	mov	sp, r7
 8000198:	bc80      	pop	{r7}
 800019a:	4770      	bx	lr

0800019c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800019c:	b580      	push	{r7, lr}
 800019e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001a0:	f000 fa74 	bl	800068c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001a4:	f000 f818 	bl	80001d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001a8:	f000 f880 	bl	80002ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001ac:	f000 f854 	bl	8000258 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001b0:	f001 fcdc 	bl	8001b6c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80001b4:	4a05      	ldr	r2, [pc, #20]	@ (80001cc <main+0x30>)
 80001b6:	2100      	movs	r1, #0
 80001b8:	4805      	ldr	r0, [pc, #20]	@ (80001d0 <main+0x34>)
 80001ba:	f001 fd1f 	bl	8001bfc <osThreadNew>
 80001be:	4603      	mov	r3, r0
 80001c0:	4a04      	ldr	r2, [pc, #16]	@ (80001d4 <main+0x38>)
 80001c2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80001c4:	f001 fcf4 	bl	8001bb0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001c8:	bf00      	nop
 80001ca:	e7fd      	b.n	80001c8 <main+0x2c>
 80001cc:	08004638 	.word	0x08004638
 80001d0:	080003a9 	.word	0x080003a9
 80001d4:	20000074 	.word	0x20000074

080001d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b090      	sub	sp, #64	@ 0x40
 80001dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001de:	f107 0318 	add.w	r3, r7, #24
 80001e2:	2228      	movs	r2, #40	@ 0x28
 80001e4:	2100      	movs	r1, #0
 80001e6:	4618      	mov	r0, r3
 80001e8:	f004 f9ce 	bl	8004588 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ec:	1d3b      	adds	r3, r7, #4
 80001ee:	2200      	movs	r2, #0
 80001f0:	601a      	str	r2, [r3, #0]
 80001f2:	605a      	str	r2, [r3, #4]
 80001f4:	609a      	str	r2, [r3, #8]
 80001f6:	60da      	str	r2, [r3, #12]
 80001f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80001fa:	2302      	movs	r3, #2
 80001fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001fe:	2301      	movs	r3, #1
 8000200:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000202:	2310      	movs	r3, #16
 8000204:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000206:	2302      	movs	r3, #2
 8000208:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800020a:	2300      	movs	r3, #0
 800020c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800020e:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000212:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000214:	f107 0318 	add.w	r3, r7, #24
 8000218:	4618      	mov	r0, r3
 800021a:	f000 fd07 	bl	8000c2c <HAL_RCC_OscConfig>
 800021e:	4603      	mov	r3, r0
 8000220:	2b00      	cmp	r3, #0
 8000222:	d001      	beq.n	8000228 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000224:	f000 f8e0 	bl	80003e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000228:	230f      	movs	r3, #15
 800022a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800022c:	2302      	movs	r3, #2
 800022e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV16;
 8000230:	23b0      	movs	r3, #176	@ 0xb0
 8000232:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000234:	2300      	movs	r3, #0
 8000236:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000238:	2300      	movs	r3, #0
 800023a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800023c:	1d3b      	adds	r3, r7, #4
 800023e:	2102      	movs	r1, #2
 8000240:	4618      	mov	r0, r3
 8000242:	f000 ff75 	bl	8001130 <HAL_RCC_ClockConfig>
 8000246:	4603      	mov	r3, r0
 8000248:	2b00      	cmp	r3, #0
 800024a:	d001      	beq.n	8000250 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800024c:	f000 f8cc 	bl	80003e8 <Error_Handler>
  }
}
 8000250:	bf00      	nop
 8000252:	3740      	adds	r7, #64	@ 0x40
 8000254:	46bd      	mov	sp, r7
 8000256:	bd80      	pop	{r7, pc}

08000258 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000258:	b580      	push	{r7, lr}
 800025a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800025c:	4b11      	ldr	r3, [pc, #68]	@ (80002a4 <MX_USART2_UART_Init+0x4c>)
 800025e:	4a12      	ldr	r2, [pc, #72]	@ (80002a8 <MX_USART2_UART_Init+0x50>)
 8000260:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000262:	4b10      	ldr	r3, [pc, #64]	@ (80002a4 <MX_USART2_UART_Init+0x4c>)
 8000264:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000268:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800026a:	4b0e      	ldr	r3, [pc, #56]	@ (80002a4 <MX_USART2_UART_Init+0x4c>)
 800026c:	2200      	movs	r2, #0
 800026e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000270:	4b0c      	ldr	r3, [pc, #48]	@ (80002a4 <MX_USART2_UART_Init+0x4c>)
 8000272:	2200      	movs	r2, #0
 8000274:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000276:	4b0b      	ldr	r3, [pc, #44]	@ (80002a4 <MX_USART2_UART_Init+0x4c>)
 8000278:	2200      	movs	r2, #0
 800027a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800027c:	4b09      	ldr	r3, [pc, #36]	@ (80002a4 <MX_USART2_UART_Init+0x4c>)
 800027e:	220c      	movs	r2, #12
 8000280:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000282:	4b08      	ldr	r3, [pc, #32]	@ (80002a4 <MX_USART2_UART_Init+0x4c>)
 8000284:	2200      	movs	r2, #0
 8000286:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000288:	4b06      	ldr	r3, [pc, #24]	@ (80002a4 <MX_USART2_UART_Init+0x4c>)
 800028a:	2200      	movs	r2, #0
 800028c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800028e:	4805      	ldr	r0, [pc, #20]	@ (80002a4 <MX_USART2_UART_Init+0x4c>)
 8000290:	f001 fb4a 	bl	8001928 <HAL_UART_Init>
 8000294:	4603      	mov	r3, r0
 8000296:	2b00      	cmp	r3, #0
 8000298:	d001      	beq.n	800029e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800029a:	f000 f8a5 	bl	80003e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800029e:	bf00      	nop
 80002a0:	bd80      	pop	{r7, pc}
 80002a2:	bf00      	nop
 80002a4:	2000002c 	.word	0x2000002c
 80002a8:	40004400 	.word	0x40004400

080002ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b088      	sub	sp, #32
 80002b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002b2:	f107 0310 	add.w	r3, r7, #16
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002c0:	4b2d      	ldr	r3, [pc, #180]	@ (8000378 <MX_GPIO_Init+0xcc>)
 80002c2:	699b      	ldr	r3, [r3, #24]
 80002c4:	4a2c      	ldr	r2, [pc, #176]	@ (8000378 <MX_GPIO_Init+0xcc>)
 80002c6:	f043 0310 	orr.w	r3, r3, #16
 80002ca:	6193      	str	r3, [r2, #24]
 80002cc:	4b2a      	ldr	r3, [pc, #168]	@ (8000378 <MX_GPIO_Init+0xcc>)
 80002ce:	699b      	ldr	r3, [r3, #24]
 80002d0:	f003 0310 	and.w	r3, r3, #16
 80002d4:	60fb      	str	r3, [r7, #12]
 80002d6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80002d8:	4b27      	ldr	r3, [pc, #156]	@ (8000378 <MX_GPIO_Init+0xcc>)
 80002da:	699b      	ldr	r3, [r3, #24]
 80002dc:	4a26      	ldr	r2, [pc, #152]	@ (8000378 <MX_GPIO_Init+0xcc>)
 80002de:	f043 0320 	orr.w	r3, r3, #32
 80002e2:	6193      	str	r3, [r2, #24]
 80002e4:	4b24      	ldr	r3, [pc, #144]	@ (8000378 <MX_GPIO_Init+0xcc>)
 80002e6:	699b      	ldr	r3, [r3, #24]
 80002e8:	f003 0320 	and.w	r3, r3, #32
 80002ec:	60bb      	str	r3, [r7, #8]
 80002ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80002f0:	4b21      	ldr	r3, [pc, #132]	@ (8000378 <MX_GPIO_Init+0xcc>)
 80002f2:	699b      	ldr	r3, [r3, #24]
 80002f4:	4a20      	ldr	r2, [pc, #128]	@ (8000378 <MX_GPIO_Init+0xcc>)
 80002f6:	f043 0304 	orr.w	r3, r3, #4
 80002fa:	6193      	str	r3, [r2, #24]
 80002fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000378 <MX_GPIO_Init+0xcc>)
 80002fe:	699b      	ldr	r3, [r3, #24]
 8000300:	f003 0304 	and.w	r3, r3, #4
 8000304:	607b      	str	r3, [r7, #4]
 8000306:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000308:	4b1b      	ldr	r3, [pc, #108]	@ (8000378 <MX_GPIO_Init+0xcc>)
 800030a:	699b      	ldr	r3, [r3, #24]
 800030c:	4a1a      	ldr	r2, [pc, #104]	@ (8000378 <MX_GPIO_Init+0xcc>)
 800030e:	f043 0308 	orr.w	r3, r3, #8
 8000312:	6193      	str	r3, [r2, #24]
 8000314:	4b18      	ldr	r3, [pc, #96]	@ (8000378 <MX_GPIO_Init+0xcc>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	f003 0308 	and.w	r3, r3, #8
 800031c:	603b      	str	r3, [r7, #0]
 800031e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8000320:	2200      	movs	r2, #0
 8000322:	2120      	movs	r1, #32
 8000324:	4815      	ldr	r0, [pc, #84]	@ (800037c <MX_GPIO_Init+0xd0>)
 8000326:	f000 fc47 	bl	8000bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 800032a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800032e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000330:	4b13      	ldr	r3, [pc, #76]	@ (8000380 <MX_GPIO_Init+0xd4>)
 8000332:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000334:	2300      	movs	r3, #0
 8000336:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000338:	f107 0310 	add.w	r3, r7, #16
 800033c:	4619      	mov	r1, r3
 800033e:	4811      	ldr	r0, [pc, #68]	@ (8000384 <MX_GPIO_Init+0xd8>)
 8000340:	f000 fab6 	bl	80008b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000344:	2320      	movs	r3, #32
 8000346:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000348:	2301      	movs	r3, #1
 800034a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800034c:	2300      	movs	r3, #0
 800034e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000350:	2302      	movs	r3, #2
 8000352:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000354:	f107 0310 	add.w	r3, r7, #16
 8000358:	4619      	mov	r1, r3
 800035a:	4808      	ldr	r0, [pc, #32]	@ (800037c <MX_GPIO_Init+0xd0>)
 800035c:	f000 faa8 	bl	80008b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000360:	2200      	movs	r2, #0
 8000362:	2105      	movs	r1, #5
 8000364:	2028      	movs	r0, #40	@ 0x28
 8000366:	f000 fa78 	bl	800085a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800036a:	2028      	movs	r0, #40	@ 0x28
 800036c:	f000 fa91 	bl	8000892 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000370:	bf00      	nop
 8000372:	3720      	adds	r7, #32
 8000374:	46bd      	mov	sp, r7
 8000376:	bd80      	pop	{r7, pc}
 8000378:	40021000 	.word	0x40021000
 800037c:	40010800 	.word	0x40010800
 8000380:	10110000 	.word	0x10110000
 8000384:	40011000 	.word	0x40011000

08000388 <task_action>:

/* USER CODE BEGIN 4 */

void task_action(char message)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	b082      	sub	sp, #8
 800038c:	af00      	add	r7, sp, #0
 800038e:	4603      	mov	r3, r0
 8000390:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(message);
 8000392:	79fb      	ldrb	r3, [r7, #7]
 8000394:	4618      	mov	r0, r3
 8000396:	f7ff fedb 	bl	8000150 <ITM_SendChar>
	ITM_SendChar('\n');
 800039a:	200a      	movs	r0, #10
 800039c:	f7ff fed8 	bl	8000150 <ITM_SendChar>
}
 80003a0:	bf00      	nop
 80003a2:	3708      	adds	r7, #8
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}

080003a8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
//	HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
	  task_action('1');
 80003b0:	2031      	movs	r0, #49	@ 0x31
 80003b2:	f7ff ffe9 	bl	8000388 <task_action>
    osDelay(500);
 80003b6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80003ba:	f001 fcb1 	bl	8001d20 <osDelay>
	  task_action('1');
 80003be:	bf00      	nop
 80003c0:	e7f6      	b.n	80003b0 <StartDefaultTask+0x8>
	...

080003c4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a04      	ldr	r2, [pc, #16]	@ (80003e4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d101      	bne.n	80003da <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80003d6:	f000 f96f 	bl	80006b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003da:	bf00      	nop
 80003dc:	3708      	adds	r7, #8
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	40000800 	.word	0x40000800

080003e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ec:	b672      	cpsid	i
}
 80003ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003f0:	bf00      	nop
 80003f2:	e7fd      	b.n	80003f0 <Error_Handler+0x8>

080003f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b084      	sub	sp, #16
 80003f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80003fa:	4b18      	ldr	r3, [pc, #96]	@ (800045c <HAL_MspInit+0x68>)
 80003fc:	699b      	ldr	r3, [r3, #24]
 80003fe:	4a17      	ldr	r2, [pc, #92]	@ (800045c <HAL_MspInit+0x68>)
 8000400:	f043 0301 	orr.w	r3, r3, #1
 8000404:	6193      	str	r3, [r2, #24]
 8000406:	4b15      	ldr	r3, [pc, #84]	@ (800045c <HAL_MspInit+0x68>)
 8000408:	699b      	ldr	r3, [r3, #24]
 800040a:	f003 0301 	and.w	r3, r3, #1
 800040e:	60bb      	str	r3, [r7, #8]
 8000410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000412:	4b12      	ldr	r3, [pc, #72]	@ (800045c <HAL_MspInit+0x68>)
 8000414:	69db      	ldr	r3, [r3, #28]
 8000416:	4a11      	ldr	r2, [pc, #68]	@ (800045c <HAL_MspInit+0x68>)
 8000418:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800041c:	61d3      	str	r3, [r2, #28]
 800041e:	4b0f      	ldr	r3, [pc, #60]	@ (800045c <HAL_MspInit+0x68>)
 8000420:	69db      	ldr	r3, [r3, #28]
 8000422:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000426:	607b      	str	r3, [r7, #4]
 8000428:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800042a:	2200      	movs	r2, #0
 800042c:	210f      	movs	r1, #15
 800042e:	f06f 0001 	mvn.w	r0, #1
 8000432:	f000 fa12 	bl	800085a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000436:	4b0a      	ldr	r3, [pc, #40]	@ (8000460 <HAL_MspInit+0x6c>)
 8000438:	685b      	ldr	r3, [r3, #4]
 800043a:	60fb      	str	r3, [r7, #12]
 800043c:	68fb      	ldr	r3, [r7, #12]
 800043e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000442:	60fb      	str	r3, [r7, #12]
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800044a:	60fb      	str	r3, [r7, #12]
 800044c:	4a04      	ldr	r2, [pc, #16]	@ (8000460 <HAL_MspInit+0x6c>)
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000452:	bf00      	nop
 8000454:	3710      	adds	r7, #16
 8000456:	46bd      	mov	sp, r7
 8000458:	bd80      	pop	{r7, pc}
 800045a:	bf00      	nop
 800045c:	40021000 	.word	0x40021000
 8000460:	40010000 	.word	0x40010000

08000464 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000464:	b580      	push	{r7, lr}
 8000466:	b088      	sub	sp, #32
 8000468:	af00      	add	r7, sp, #0
 800046a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800046c:	f107 0310 	add.w	r3, r7, #16
 8000470:	2200      	movs	r2, #0
 8000472:	601a      	str	r2, [r3, #0]
 8000474:	605a      	str	r2, [r3, #4]
 8000476:	609a      	str	r2, [r3, #8]
 8000478:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	4a15      	ldr	r2, [pc, #84]	@ (80004d4 <HAL_UART_MspInit+0x70>)
 8000480:	4293      	cmp	r3, r2
 8000482:	d123      	bne.n	80004cc <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000484:	4b14      	ldr	r3, [pc, #80]	@ (80004d8 <HAL_UART_MspInit+0x74>)
 8000486:	69db      	ldr	r3, [r3, #28]
 8000488:	4a13      	ldr	r2, [pc, #76]	@ (80004d8 <HAL_UART_MspInit+0x74>)
 800048a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800048e:	61d3      	str	r3, [r2, #28]
 8000490:	4b11      	ldr	r3, [pc, #68]	@ (80004d8 <HAL_UART_MspInit+0x74>)
 8000492:	69db      	ldr	r3, [r3, #28]
 8000494:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000498:	60fb      	str	r3, [r7, #12]
 800049a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800049c:	4b0e      	ldr	r3, [pc, #56]	@ (80004d8 <HAL_UART_MspInit+0x74>)
 800049e:	699b      	ldr	r3, [r3, #24]
 80004a0:	4a0d      	ldr	r2, [pc, #52]	@ (80004d8 <HAL_UART_MspInit+0x74>)
 80004a2:	f043 0304 	orr.w	r3, r3, #4
 80004a6:	6193      	str	r3, [r2, #24]
 80004a8:	4b0b      	ldr	r3, [pc, #44]	@ (80004d8 <HAL_UART_MspInit+0x74>)
 80004aa:	699b      	ldr	r3, [r3, #24]
 80004ac:	f003 0304 	and.w	r3, r3, #4
 80004b0:	60bb      	str	r3, [r7, #8]
 80004b2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80004b4:	230c      	movs	r3, #12
 80004b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004b8:	2302      	movs	r3, #2
 80004ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004bc:	2302      	movs	r3, #2
 80004be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004c0:	f107 0310 	add.w	r3, r7, #16
 80004c4:	4619      	mov	r1, r3
 80004c6:	4805      	ldr	r0, [pc, #20]	@ (80004dc <HAL_UART_MspInit+0x78>)
 80004c8:	f000 f9f2 	bl	80008b0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80004cc:	bf00      	nop
 80004ce:	3720      	adds	r7, #32
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bd80      	pop	{r7, pc}
 80004d4:	40004400 	.word	0x40004400
 80004d8:	40021000 	.word	0x40021000
 80004dc:	40010800 	.word	0x40010800

080004e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004e0:	b580      	push	{r7, lr}
 80004e2:	b08e      	sub	sp, #56	@ 0x38
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80004e8:	2300      	movs	r3, #0
 80004ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80004ec:	2300      	movs	r3, #0
 80004ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 80004f0:	2300      	movs	r3, #0
 80004f2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80004f6:	4b34      	ldr	r3, [pc, #208]	@ (80005c8 <HAL_InitTick+0xe8>)
 80004f8:	69db      	ldr	r3, [r3, #28]
 80004fa:	4a33      	ldr	r2, [pc, #204]	@ (80005c8 <HAL_InitTick+0xe8>)
 80004fc:	f043 0304 	orr.w	r3, r3, #4
 8000500:	61d3      	str	r3, [r2, #28]
 8000502:	4b31      	ldr	r3, [pc, #196]	@ (80005c8 <HAL_InitTick+0xe8>)
 8000504:	69db      	ldr	r3, [r3, #28]
 8000506:	f003 0304 	and.w	r3, r3, #4
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800050e:	f107 0210 	add.w	r2, r7, #16
 8000512:	f107 0314 	add.w	r3, r7, #20
 8000516:	4611      	mov	r1, r2
 8000518:	4618      	mov	r0, r3
 800051a:	f000 ff79 	bl	8001410 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800051e:	6a3b      	ldr	r3, [r7, #32]
 8000520:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000522:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000524:	2b00      	cmp	r3, #0
 8000526:	d103      	bne.n	8000530 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000528:	f000 ff4a 	bl	80013c0 <HAL_RCC_GetPCLK1Freq>
 800052c:	6378      	str	r0, [r7, #52]	@ 0x34
 800052e:	e004      	b.n	800053a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000530:	f000 ff46 	bl	80013c0 <HAL_RCC_GetPCLK1Freq>
 8000534:	4603      	mov	r3, r0
 8000536:	005b      	lsls	r3, r3, #1
 8000538:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800053a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800053c:	4a23      	ldr	r2, [pc, #140]	@ (80005cc <HAL_InitTick+0xec>)
 800053e:	fba2 2303 	umull	r2, r3, r2, r3
 8000542:	0c9b      	lsrs	r3, r3, #18
 8000544:	3b01      	subs	r3, #1
 8000546:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000548:	4b21      	ldr	r3, [pc, #132]	@ (80005d0 <HAL_InitTick+0xf0>)
 800054a:	4a22      	ldr	r2, [pc, #136]	@ (80005d4 <HAL_InitTick+0xf4>)
 800054c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800054e:	4b20      	ldr	r3, [pc, #128]	@ (80005d0 <HAL_InitTick+0xf0>)
 8000550:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000554:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000556:	4a1e      	ldr	r2, [pc, #120]	@ (80005d0 <HAL_InitTick+0xf0>)
 8000558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800055a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800055c:	4b1c      	ldr	r3, [pc, #112]	@ (80005d0 <HAL_InitTick+0xf0>)
 800055e:	2200      	movs	r2, #0
 8000560:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000562:	4b1b      	ldr	r3, [pc, #108]	@ (80005d0 <HAL_InitTick+0xf0>)
 8000564:	2200      	movs	r2, #0
 8000566:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000568:	4b19      	ldr	r3, [pc, #100]	@ (80005d0 <HAL_InitTick+0xf0>)
 800056a:	2200      	movs	r2, #0
 800056c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800056e:	4818      	ldr	r0, [pc, #96]	@ (80005d0 <HAL_InitTick+0xf0>)
 8000570:	f000 ff9c 	bl	80014ac <HAL_TIM_Base_Init>
 8000574:	4603      	mov	r3, r0
 8000576:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800057a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800057e:	2b00      	cmp	r3, #0
 8000580:	d11b      	bne.n	80005ba <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000582:	4813      	ldr	r0, [pc, #76]	@ (80005d0 <HAL_InitTick+0xf0>)
 8000584:	f000 ffea 	bl	800155c <HAL_TIM_Base_Start_IT>
 8000588:	4603      	mov	r3, r0
 800058a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800058e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000592:	2b00      	cmp	r3, #0
 8000594:	d111      	bne.n	80005ba <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000596:	201e      	movs	r0, #30
 8000598:	f000 f97b 	bl	8000892 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	2b0f      	cmp	r3, #15
 80005a0:	d808      	bhi.n	80005b4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80005a2:	2200      	movs	r2, #0
 80005a4:	6879      	ldr	r1, [r7, #4]
 80005a6:	201e      	movs	r0, #30
 80005a8:	f000 f957 	bl	800085a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005ac:	4a0a      	ldr	r2, [pc, #40]	@ (80005d8 <HAL_InitTick+0xf8>)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	6013      	str	r3, [r2, #0]
 80005b2:	e002      	b.n	80005ba <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80005b4:	2301      	movs	r3, #1
 80005b6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80005ba:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80005be:	4618      	mov	r0, r3
 80005c0:	3738      	adds	r7, #56	@ 0x38
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40021000 	.word	0x40021000
 80005cc:	431bde83 	.word	0x431bde83
 80005d0:	20000078 	.word	0x20000078
 80005d4:	40000800 	.word	0x40000800
 80005d8:	20000004 	.word	0x20000004

080005dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80005e0:	bf00      	nop
 80005e2:	e7fd      	b.n	80005e0 <NMI_Handler+0x4>

080005e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005e8:	bf00      	nop
 80005ea:	e7fd      	b.n	80005e8 <HardFault_Handler+0x4>

080005ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005f0:	bf00      	nop
 80005f2:	e7fd      	b.n	80005f0 <MemManage_Handler+0x4>

080005f4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005f8:	bf00      	nop
 80005fa:	e7fd      	b.n	80005f8 <BusFault_Handler+0x4>

080005fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000600:	bf00      	nop
 8000602:	e7fd      	b.n	8000600 <UsageFault_Handler+0x4>

08000604 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000608:	bf00      	nop
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr

08000610 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000614:	4802      	ldr	r0, [pc, #8]	@ (8000620 <TIM4_IRQHandler+0x10>)
 8000616:	f000 fff3 	bl	8001600 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800061a:	bf00      	nop
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	20000078 	.word	0x20000078

08000624 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 8000628:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800062c:	f000 fadc 	bl	8000be8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000630:	bf00      	nop
 8000632:	bd80      	pop	{r7, pc}

08000634 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000638:	bf00      	nop
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr

08000640 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000640:	f7ff fff8 	bl	8000634 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000644:	480b      	ldr	r0, [pc, #44]	@ (8000674 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000646:	490c      	ldr	r1, [pc, #48]	@ (8000678 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000648:	4a0c      	ldr	r2, [pc, #48]	@ (800067c <LoopFillZerobss+0x16>)
  movs r3, #0
 800064a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800064c:	e002      	b.n	8000654 <LoopCopyDataInit>

0800064e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800064e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000650:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000652:	3304      	adds	r3, #4

08000654 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000654:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000656:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000658:	d3f9      	bcc.n	800064e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800065a:	4a09      	ldr	r2, [pc, #36]	@ (8000680 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800065c:	4c09      	ldr	r4, [pc, #36]	@ (8000684 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800065e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000660:	e001      	b.n	8000666 <LoopFillZerobss>

08000662 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000662:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000664:	3204      	adds	r2, #4

08000666 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000666:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000668:	d3fb      	bcc.n	8000662 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800066a:	f003 ff95 	bl	8004598 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800066e:	f7ff fd95 	bl	800019c <main>
  bx lr
 8000672:	4770      	bx	lr
  ldr r0, =_sdata
 8000674:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000678:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 800067c:	08004690 	.word	0x08004690
  ldr r2, =_sbss
 8000680:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000684:	20001a14 	.word	0x20001a14

08000688 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000688:	e7fe      	b.n	8000688 <ADC1_2_IRQHandler>
	...

0800068c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000690:	4b08      	ldr	r3, [pc, #32]	@ (80006b4 <HAL_Init+0x28>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a07      	ldr	r2, [pc, #28]	@ (80006b4 <HAL_Init+0x28>)
 8000696:	f043 0310 	orr.w	r3, r3, #16
 800069a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800069c:	2003      	movs	r0, #3
 800069e:	f000 f8d1 	bl	8000844 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006a2:	200f      	movs	r0, #15
 80006a4:	f7ff ff1c 	bl	80004e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006a8:	f7ff fea4 	bl	80003f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006ac:	2300      	movs	r3, #0
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	bd80      	pop	{r7, pc}
 80006b2:	bf00      	nop
 80006b4:	40022000 	.word	0x40022000

080006b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006bc:	4b05      	ldr	r3, [pc, #20]	@ (80006d4 <HAL_IncTick+0x1c>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	461a      	mov	r2, r3
 80006c2:	4b05      	ldr	r3, [pc, #20]	@ (80006d8 <HAL_IncTick+0x20>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4413      	add	r3, r2
 80006c8:	4a03      	ldr	r2, [pc, #12]	@ (80006d8 <HAL_IncTick+0x20>)
 80006ca:	6013      	str	r3, [r2, #0]
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr
 80006d4:	20000008 	.word	0x20000008
 80006d8:	200000c0 	.word	0x200000c0

080006dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  return uwTick;
 80006e0:	4b02      	ldr	r3, [pc, #8]	@ (80006ec <HAL_GetTick+0x10>)
 80006e2:	681b      	ldr	r3, [r3, #0]
}
 80006e4:	4618      	mov	r0, r3
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr
 80006ec:	200000c0 	.word	0x200000c0

080006f0 <__NVIC_SetPriorityGrouping>:
{
 80006f0:	b480      	push	{r7}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	f003 0307 	and.w	r3, r3, #7
 80006fe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000700:	4b0c      	ldr	r3, [pc, #48]	@ (8000734 <__NVIC_SetPriorityGrouping+0x44>)
 8000702:	68db      	ldr	r3, [r3, #12]
 8000704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000706:	68ba      	ldr	r2, [r7, #8]
 8000708:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800070c:	4013      	ands	r3, r2
 800070e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000714:	68bb      	ldr	r3, [r7, #8]
 8000716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000718:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800071c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000722:	4a04      	ldr	r2, [pc, #16]	@ (8000734 <__NVIC_SetPriorityGrouping+0x44>)
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	60d3      	str	r3, [r2, #12]
}
 8000728:	bf00      	nop
 800072a:	3714      	adds	r7, #20
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	e000ed00 	.word	0xe000ed00

08000738 <__NVIC_GetPriorityGrouping>:
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800073c:	4b04      	ldr	r3, [pc, #16]	@ (8000750 <__NVIC_GetPriorityGrouping+0x18>)
 800073e:	68db      	ldr	r3, [r3, #12]
 8000740:	0a1b      	lsrs	r3, r3, #8
 8000742:	f003 0307 	and.w	r3, r3, #7
}
 8000746:	4618      	mov	r0, r3
 8000748:	46bd      	mov	sp, r7
 800074a:	bc80      	pop	{r7}
 800074c:	4770      	bx	lr
 800074e:	bf00      	nop
 8000750:	e000ed00 	.word	0xe000ed00

08000754 <__NVIC_EnableIRQ>:
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800075e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000762:	2b00      	cmp	r3, #0
 8000764:	db0b      	blt.n	800077e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	f003 021f 	and.w	r2, r3, #31
 800076c:	4906      	ldr	r1, [pc, #24]	@ (8000788 <__NVIC_EnableIRQ+0x34>)
 800076e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000772:	095b      	lsrs	r3, r3, #5
 8000774:	2001      	movs	r0, #1
 8000776:	fa00 f202 	lsl.w	r2, r0, r2
 800077a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800077e:	bf00      	nop
 8000780:	370c      	adds	r7, #12
 8000782:	46bd      	mov	sp, r7
 8000784:	bc80      	pop	{r7}
 8000786:	4770      	bx	lr
 8000788:	e000e100 	.word	0xe000e100

0800078c <__NVIC_SetPriority>:
{
 800078c:	b480      	push	{r7}
 800078e:	b083      	sub	sp, #12
 8000790:	af00      	add	r7, sp, #0
 8000792:	4603      	mov	r3, r0
 8000794:	6039      	str	r1, [r7, #0]
 8000796:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079c:	2b00      	cmp	r3, #0
 800079e:	db0a      	blt.n	80007b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007a0:	683b      	ldr	r3, [r7, #0]
 80007a2:	b2da      	uxtb	r2, r3
 80007a4:	490c      	ldr	r1, [pc, #48]	@ (80007d8 <__NVIC_SetPriority+0x4c>)
 80007a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007aa:	0112      	lsls	r2, r2, #4
 80007ac:	b2d2      	uxtb	r2, r2
 80007ae:	440b      	add	r3, r1
 80007b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80007b4:	e00a      	b.n	80007cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	b2da      	uxtb	r2, r3
 80007ba:	4908      	ldr	r1, [pc, #32]	@ (80007dc <__NVIC_SetPriority+0x50>)
 80007bc:	79fb      	ldrb	r3, [r7, #7]
 80007be:	f003 030f 	and.w	r3, r3, #15
 80007c2:	3b04      	subs	r3, #4
 80007c4:	0112      	lsls	r2, r2, #4
 80007c6:	b2d2      	uxtb	r2, r2
 80007c8:	440b      	add	r3, r1
 80007ca:	761a      	strb	r2, [r3, #24]
}
 80007cc:	bf00      	nop
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bc80      	pop	{r7}
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	e000e100 	.word	0xe000e100
 80007dc:	e000ed00 	.word	0xe000ed00

080007e0 <NVIC_EncodePriority>:
{
 80007e0:	b480      	push	{r7}
 80007e2:	b089      	sub	sp, #36	@ 0x24
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	60f8      	str	r0, [r7, #12]
 80007e8:	60b9      	str	r1, [r7, #8]
 80007ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007ec:	68fb      	ldr	r3, [r7, #12]
 80007ee:	f003 0307 	and.w	r3, r3, #7
 80007f2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007f4:	69fb      	ldr	r3, [r7, #28]
 80007f6:	f1c3 0307 	rsb	r3, r3, #7
 80007fa:	2b04      	cmp	r3, #4
 80007fc:	bf28      	it	cs
 80007fe:	2304      	movcs	r3, #4
 8000800:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000802:	69fb      	ldr	r3, [r7, #28]
 8000804:	3304      	adds	r3, #4
 8000806:	2b06      	cmp	r3, #6
 8000808:	d902      	bls.n	8000810 <NVIC_EncodePriority+0x30>
 800080a:	69fb      	ldr	r3, [r7, #28]
 800080c:	3b03      	subs	r3, #3
 800080e:	e000      	b.n	8000812 <NVIC_EncodePriority+0x32>
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000814:	f04f 32ff 	mov.w	r2, #4294967295
 8000818:	69bb      	ldr	r3, [r7, #24]
 800081a:	fa02 f303 	lsl.w	r3, r2, r3
 800081e:	43da      	mvns	r2, r3
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	401a      	ands	r2, r3
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000828:	f04f 31ff 	mov.w	r1, #4294967295
 800082c:	697b      	ldr	r3, [r7, #20]
 800082e:	fa01 f303 	lsl.w	r3, r1, r3
 8000832:	43d9      	mvns	r1, r3
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000838:	4313      	orrs	r3, r2
}
 800083a:	4618      	mov	r0, r3
 800083c:	3724      	adds	r7, #36	@ 0x24
 800083e:	46bd      	mov	sp, r7
 8000840:	bc80      	pop	{r7}
 8000842:	4770      	bx	lr

08000844 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f7ff ff4f 	bl	80006f0 <__NVIC_SetPriorityGrouping>
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800085a:	b580      	push	{r7, lr}
 800085c:	b086      	sub	sp, #24
 800085e:	af00      	add	r7, sp, #0
 8000860:	4603      	mov	r3, r0
 8000862:	60b9      	str	r1, [r7, #8]
 8000864:	607a      	str	r2, [r7, #4]
 8000866:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000868:	2300      	movs	r3, #0
 800086a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800086c:	f7ff ff64 	bl	8000738 <__NVIC_GetPriorityGrouping>
 8000870:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000872:	687a      	ldr	r2, [r7, #4]
 8000874:	68b9      	ldr	r1, [r7, #8]
 8000876:	6978      	ldr	r0, [r7, #20]
 8000878:	f7ff ffb2 	bl	80007e0 <NVIC_EncodePriority>
 800087c:	4602      	mov	r2, r0
 800087e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000882:	4611      	mov	r1, r2
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff ff81 	bl	800078c <__NVIC_SetPriority>
}
 800088a:	bf00      	nop
 800088c:	3718      	adds	r7, #24
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}

08000892 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000892:	b580      	push	{r7, lr}
 8000894:	b082      	sub	sp, #8
 8000896:	af00      	add	r7, sp, #0
 8000898:	4603      	mov	r3, r0
 800089a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800089c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff ff57 	bl	8000754 <__NVIC_EnableIRQ>
}
 80008a6:	bf00      	nop
 80008a8:	3708      	adds	r7, #8
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
	...

080008b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b08b      	sub	sp, #44	@ 0x2c
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
 80008b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80008be:	2300      	movs	r3, #0
 80008c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80008c2:	e169      	b.n	8000b98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80008c4:	2201      	movs	r2, #1
 80008c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008c8:	fa02 f303 	lsl.w	r3, r2, r3
 80008cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	69fa      	ldr	r2, [r7, #28]
 80008d4:	4013      	ands	r3, r2
 80008d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80008d8:	69ba      	ldr	r2, [r7, #24]
 80008da:	69fb      	ldr	r3, [r7, #28]
 80008dc:	429a      	cmp	r2, r3
 80008de:	f040 8158 	bne.w	8000b92 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	685b      	ldr	r3, [r3, #4]
 80008e6:	4a9a      	ldr	r2, [pc, #616]	@ (8000b50 <HAL_GPIO_Init+0x2a0>)
 80008e8:	4293      	cmp	r3, r2
 80008ea:	d05e      	beq.n	80009aa <HAL_GPIO_Init+0xfa>
 80008ec:	4a98      	ldr	r2, [pc, #608]	@ (8000b50 <HAL_GPIO_Init+0x2a0>)
 80008ee:	4293      	cmp	r3, r2
 80008f0:	d875      	bhi.n	80009de <HAL_GPIO_Init+0x12e>
 80008f2:	4a98      	ldr	r2, [pc, #608]	@ (8000b54 <HAL_GPIO_Init+0x2a4>)
 80008f4:	4293      	cmp	r3, r2
 80008f6:	d058      	beq.n	80009aa <HAL_GPIO_Init+0xfa>
 80008f8:	4a96      	ldr	r2, [pc, #600]	@ (8000b54 <HAL_GPIO_Init+0x2a4>)
 80008fa:	4293      	cmp	r3, r2
 80008fc:	d86f      	bhi.n	80009de <HAL_GPIO_Init+0x12e>
 80008fe:	4a96      	ldr	r2, [pc, #600]	@ (8000b58 <HAL_GPIO_Init+0x2a8>)
 8000900:	4293      	cmp	r3, r2
 8000902:	d052      	beq.n	80009aa <HAL_GPIO_Init+0xfa>
 8000904:	4a94      	ldr	r2, [pc, #592]	@ (8000b58 <HAL_GPIO_Init+0x2a8>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d869      	bhi.n	80009de <HAL_GPIO_Init+0x12e>
 800090a:	4a94      	ldr	r2, [pc, #592]	@ (8000b5c <HAL_GPIO_Init+0x2ac>)
 800090c:	4293      	cmp	r3, r2
 800090e:	d04c      	beq.n	80009aa <HAL_GPIO_Init+0xfa>
 8000910:	4a92      	ldr	r2, [pc, #584]	@ (8000b5c <HAL_GPIO_Init+0x2ac>)
 8000912:	4293      	cmp	r3, r2
 8000914:	d863      	bhi.n	80009de <HAL_GPIO_Init+0x12e>
 8000916:	4a92      	ldr	r2, [pc, #584]	@ (8000b60 <HAL_GPIO_Init+0x2b0>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d046      	beq.n	80009aa <HAL_GPIO_Init+0xfa>
 800091c:	4a90      	ldr	r2, [pc, #576]	@ (8000b60 <HAL_GPIO_Init+0x2b0>)
 800091e:	4293      	cmp	r3, r2
 8000920:	d85d      	bhi.n	80009de <HAL_GPIO_Init+0x12e>
 8000922:	2b12      	cmp	r3, #18
 8000924:	d82a      	bhi.n	800097c <HAL_GPIO_Init+0xcc>
 8000926:	2b12      	cmp	r3, #18
 8000928:	d859      	bhi.n	80009de <HAL_GPIO_Init+0x12e>
 800092a:	a201      	add	r2, pc, #4	@ (adr r2, 8000930 <HAL_GPIO_Init+0x80>)
 800092c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000930:	080009ab 	.word	0x080009ab
 8000934:	08000985 	.word	0x08000985
 8000938:	08000997 	.word	0x08000997
 800093c:	080009d9 	.word	0x080009d9
 8000940:	080009df 	.word	0x080009df
 8000944:	080009df 	.word	0x080009df
 8000948:	080009df 	.word	0x080009df
 800094c:	080009df 	.word	0x080009df
 8000950:	080009df 	.word	0x080009df
 8000954:	080009df 	.word	0x080009df
 8000958:	080009df 	.word	0x080009df
 800095c:	080009df 	.word	0x080009df
 8000960:	080009df 	.word	0x080009df
 8000964:	080009df 	.word	0x080009df
 8000968:	080009df 	.word	0x080009df
 800096c:	080009df 	.word	0x080009df
 8000970:	080009df 	.word	0x080009df
 8000974:	0800098d 	.word	0x0800098d
 8000978:	080009a1 	.word	0x080009a1
 800097c:	4a79      	ldr	r2, [pc, #484]	@ (8000b64 <HAL_GPIO_Init+0x2b4>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d013      	beq.n	80009aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000982:	e02c      	b.n	80009de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	623b      	str	r3, [r7, #32]
          break;
 800098a:	e029      	b.n	80009e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	3304      	adds	r3, #4
 8000992:	623b      	str	r3, [r7, #32]
          break;
 8000994:	e024      	b.n	80009e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	68db      	ldr	r3, [r3, #12]
 800099a:	3308      	adds	r3, #8
 800099c:	623b      	str	r3, [r7, #32]
          break;
 800099e:	e01f      	b.n	80009e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	68db      	ldr	r3, [r3, #12]
 80009a4:	330c      	adds	r3, #12
 80009a6:	623b      	str	r3, [r7, #32]
          break;
 80009a8:	e01a      	b.n	80009e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	689b      	ldr	r3, [r3, #8]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d102      	bne.n	80009b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80009b2:	2304      	movs	r3, #4
 80009b4:	623b      	str	r3, [r7, #32]
          break;
 80009b6:	e013      	b.n	80009e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	2b01      	cmp	r3, #1
 80009be:	d105      	bne.n	80009cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009c0:	2308      	movs	r3, #8
 80009c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	69fa      	ldr	r2, [r7, #28]
 80009c8:	611a      	str	r2, [r3, #16]
          break;
 80009ca:	e009      	b.n	80009e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80009cc:	2308      	movs	r3, #8
 80009ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	69fa      	ldr	r2, [r7, #28]
 80009d4:	615a      	str	r2, [r3, #20]
          break;
 80009d6:	e003      	b.n	80009e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
          break;
 80009dc:	e000      	b.n	80009e0 <HAL_GPIO_Init+0x130>
          break;
 80009de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009e0:	69bb      	ldr	r3, [r7, #24]
 80009e2:	2bff      	cmp	r3, #255	@ 0xff
 80009e4:	d801      	bhi.n	80009ea <HAL_GPIO_Init+0x13a>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	e001      	b.n	80009ee <HAL_GPIO_Init+0x13e>
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	3304      	adds	r3, #4
 80009ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009f0:	69bb      	ldr	r3, [r7, #24]
 80009f2:	2bff      	cmp	r3, #255	@ 0xff
 80009f4:	d802      	bhi.n	80009fc <HAL_GPIO_Init+0x14c>
 80009f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	e002      	b.n	8000a02 <HAL_GPIO_Init+0x152>
 80009fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80009fe:	3b08      	subs	r3, #8
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000a04:	697b      	ldr	r3, [r7, #20]
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	210f      	movs	r1, #15
 8000a0a:	693b      	ldr	r3, [r7, #16]
 8000a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a10:	43db      	mvns	r3, r3
 8000a12:	401a      	ands	r2, r3
 8000a14:	6a39      	ldr	r1, [r7, #32]
 8000a16:	693b      	ldr	r3, [r7, #16]
 8000a18:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1c:	431a      	orrs	r2, r3
 8000a1e:	697b      	ldr	r3, [r7, #20]
 8000a20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	685b      	ldr	r3, [r3, #4]
 8000a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	f000 80b1 	beq.w	8000b92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000a30:	4b4d      	ldr	r3, [pc, #308]	@ (8000b68 <HAL_GPIO_Init+0x2b8>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	4a4c      	ldr	r2, [pc, #304]	@ (8000b68 <HAL_GPIO_Init+0x2b8>)
 8000a36:	f043 0301 	orr.w	r3, r3, #1
 8000a3a:	6193      	str	r3, [r2, #24]
 8000a3c:	4b4a      	ldr	r3, [pc, #296]	@ (8000b68 <HAL_GPIO_Init+0x2b8>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	f003 0301 	and.w	r3, r3, #1
 8000a44:	60bb      	str	r3, [r7, #8]
 8000a46:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a48:	4a48      	ldr	r2, [pc, #288]	@ (8000b6c <HAL_GPIO_Init+0x2bc>)
 8000a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a4c:	089b      	lsrs	r3, r3, #2
 8000a4e:	3302      	adds	r3, #2
 8000a50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a54:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a58:	f003 0303 	and.w	r3, r3, #3
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	220f      	movs	r2, #15
 8000a60:	fa02 f303 	lsl.w	r3, r2, r3
 8000a64:	43db      	mvns	r3, r3
 8000a66:	68fa      	ldr	r2, [r7, #12]
 8000a68:	4013      	ands	r3, r2
 8000a6a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	4a40      	ldr	r2, [pc, #256]	@ (8000b70 <HAL_GPIO_Init+0x2c0>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d013      	beq.n	8000a9c <HAL_GPIO_Init+0x1ec>
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4a3f      	ldr	r2, [pc, #252]	@ (8000b74 <HAL_GPIO_Init+0x2c4>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d00d      	beq.n	8000a98 <HAL_GPIO_Init+0x1e8>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a3e      	ldr	r2, [pc, #248]	@ (8000b78 <HAL_GPIO_Init+0x2c8>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d007      	beq.n	8000a94 <HAL_GPIO_Init+0x1e4>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a3d      	ldr	r2, [pc, #244]	@ (8000b7c <HAL_GPIO_Init+0x2cc>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d101      	bne.n	8000a90 <HAL_GPIO_Init+0x1e0>
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	e006      	b.n	8000a9e <HAL_GPIO_Init+0x1ee>
 8000a90:	2304      	movs	r3, #4
 8000a92:	e004      	b.n	8000a9e <HAL_GPIO_Init+0x1ee>
 8000a94:	2302      	movs	r3, #2
 8000a96:	e002      	b.n	8000a9e <HAL_GPIO_Init+0x1ee>
 8000a98:	2301      	movs	r3, #1
 8000a9a:	e000      	b.n	8000a9e <HAL_GPIO_Init+0x1ee>
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000aa0:	f002 0203 	and.w	r2, r2, #3
 8000aa4:	0092      	lsls	r2, r2, #2
 8000aa6:	4093      	lsls	r3, r2
 8000aa8:	68fa      	ldr	r2, [r7, #12]
 8000aaa:	4313      	orrs	r3, r2
 8000aac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000aae:	492f      	ldr	r1, [pc, #188]	@ (8000b6c <HAL_GPIO_Init+0x2bc>)
 8000ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ab2:	089b      	lsrs	r3, r3, #2
 8000ab4:	3302      	adds	r3, #2
 8000ab6:	68fa      	ldr	r2, [r7, #12]
 8000ab8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000abc:	683b      	ldr	r3, [r7, #0]
 8000abe:	685b      	ldr	r3, [r3, #4]
 8000ac0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d006      	beq.n	8000ad6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ac8:	4b2d      	ldr	r3, [pc, #180]	@ (8000b80 <HAL_GPIO_Init+0x2d0>)
 8000aca:	689a      	ldr	r2, [r3, #8]
 8000acc:	492c      	ldr	r1, [pc, #176]	@ (8000b80 <HAL_GPIO_Init+0x2d0>)
 8000ace:	69bb      	ldr	r3, [r7, #24]
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	608b      	str	r3, [r1, #8]
 8000ad4:	e006      	b.n	8000ae4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ad6:	4b2a      	ldr	r3, [pc, #168]	@ (8000b80 <HAL_GPIO_Init+0x2d0>)
 8000ad8:	689a      	ldr	r2, [r3, #8]
 8000ada:	69bb      	ldr	r3, [r7, #24]
 8000adc:	43db      	mvns	r3, r3
 8000ade:	4928      	ldr	r1, [pc, #160]	@ (8000b80 <HAL_GPIO_Init+0x2d0>)
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d006      	beq.n	8000afe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000af0:	4b23      	ldr	r3, [pc, #140]	@ (8000b80 <HAL_GPIO_Init+0x2d0>)
 8000af2:	68da      	ldr	r2, [r3, #12]
 8000af4:	4922      	ldr	r1, [pc, #136]	@ (8000b80 <HAL_GPIO_Init+0x2d0>)
 8000af6:	69bb      	ldr	r3, [r7, #24]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	60cb      	str	r3, [r1, #12]
 8000afc:	e006      	b.n	8000b0c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000afe:	4b20      	ldr	r3, [pc, #128]	@ (8000b80 <HAL_GPIO_Init+0x2d0>)
 8000b00:	68da      	ldr	r2, [r3, #12]
 8000b02:	69bb      	ldr	r3, [r7, #24]
 8000b04:	43db      	mvns	r3, r3
 8000b06:	491e      	ldr	r1, [pc, #120]	@ (8000b80 <HAL_GPIO_Init+0x2d0>)
 8000b08:	4013      	ands	r3, r2
 8000b0a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d006      	beq.n	8000b26 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000b18:	4b19      	ldr	r3, [pc, #100]	@ (8000b80 <HAL_GPIO_Init+0x2d0>)
 8000b1a:	685a      	ldr	r2, [r3, #4]
 8000b1c:	4918      	ldr	r1, [pc, #96]	@ (8000b80 <HAL_GPIO_Init+0x2d0>)
 8000b1e:	69bb      	ldr	r3, [r7, #24]
 8000b20:	4313      	orrs	r3, r2
 8000b22:	604b      	str	r3, [r1, #4]
 8000b24:	e006      	b.n	8000b34 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000b26:	4b16      	ldr	r3, [pc, #88]	@ (8000b80 <HAL_GPIO_Init+0x2d0>)
 8000b28:	685a      	ldr	r2, [r3, #4]
 8000b2a:	69bb      	ldr	r3, [r7, #24]
 8000b2c:	43db      	mvns	r3, r3
 8000b2e:	4914      	ldr	r1, [pc, #80]	@ (8000b80 <HAL_GPIO_Init+0x2d0>)
 8000b30:	4013      	ands	r3, r2
 8000b32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	685b      	ldr	r3, [r3, #4]
 8000b38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d021      	beq.n	8000b84 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000b40:	4b0f      	ldr	r3, [pc, #60]	@ (8000b80 <HAL_GPIO_Init+0x2d0>)
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	490e      	ldr	r1, [pc, #56]	@ (8000b80 <HAL_GPIO_Init+0x2d0>)
 8000b46:	69bb      	ldr	r3, [r7, #24]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	600b      	str	r3, [r1, #0]
 8000b4c:	e021      	b.n	8000b92 <HAL_GPIO_Init+0x2e2>
 8000b4e:	bf00      	nop
 8000b50:	10320000 	.word	0x10320000
 8000b54:	10310000 	.word	0x10310000
 8000b58:	10220000 	.word	0x10220000
 8000b5c:	10210000 	.word	0x10210000
 8000b60:	10120000 	.word	0x10120000
 8000b64:	10110000 	.word	0x10110000
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	40010000 	.word	0x40010000
 8000b70:	40010800 	.word	0x40010800
 8000b74:	40010c00 	.word	0x40010c00
 8000b78:	40011000 	.word	0x40011000
 8000b7c:	40011400 	.word	0x40011400
 8000b80:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000b84:	4b0b      	ldr	r3, [pc, #44]	@ (8000bb4 <HAL_GPIO_Init+0x304>)
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	43db      	mvns	r3, r3
 8000b8c:	4909      	ldr	r1, [pc, #36]	@ (8000bb4 <HAL_GPIO_Init+0x304>)
 8000b8e:	4013      	ands	r3, r2
 8000b90:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b94:	3301      	adds	r3, #1
 8000b96:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b9e:	fa22 f303 	lsr.w	r3, r2, r3
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	f47f ae8e 	bne.w	80008c4 <HAL_GPIO_Init+0x14>
  }
}
 8000ba8:	bf00      	nop
 8000baa:	bf00      	nop
 8000bac:	372c      	adds	r7, #44	@ 0x2c
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr
 8000bb4:	40010400 	.word	0x40010400

08000bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	807b      	strh	r3, [r7, #2]
 8000bc4:	4613      	mov	r3, r2
 8000bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000bc8:	787b      	ldrb	r3, [r7, #1]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d003      	beq.n	8000bd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bce:	887a      	ldrh	r2, [r7, #2]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000bd4:	e003      	b.n	8000bde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bd6:	887b      	ldrh	r3, [r7, #2]
 8000bd8:	041a      	lsls	r2, r3, #16
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	611a      	str	r2, [r3, #16]
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr

08000be8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	4603      	mov	r3, r0
 8000bf0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000bf2:	4b08      	ldr	r3, [pc, #32]	@ (8000c14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000bf4:	695a      	ldr	r2, [r3, #20]
 8000bf6:	88fb      	ldrh	r3, [r7, #6]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d006      	beq.n	8000c0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000bfe:	4a05      	ldr	r2, [pc, #20]	@ (8000c14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c00:	88fb      	ldrh	r3, [r7, #6]
 8000c02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000c04:	88fb      	ldrh	r3, [r7, #6]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f000 f806 	bl	8000c18 <HAL_GPIO_EXTI_Callback>
  }
}
 8000c0c:	bf00      	nop
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	40010400 	.word	0x40010400

08000c18 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000c22:	bf00      	nop
 8000c24:	370c      	adds	r7, #12
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bc80      	pop	{r7}
 8000c2a:	4770      	bx	lr

08000c2c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b086      	sub	sp, #24
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d101      	bne.n	8000c3e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e272      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	f000 8087 	beq.w	8000d5a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c4c:	4b92      	ldr	r3, [pc, #584]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000c4e:	685b      	ldr	r3, [r3, #4]
 8000c50:	f003 030c 	and.w	r3, r3, #12
 8000c54:	2b04      	cmp	r3, #4
 8000c56:	d00c      	beq.n	8000c72 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c58:	4b8f      	ldr	r3, [pc, #572]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f003 030c 	and.w	r3, r3, #12
 8000c60:	2b08      	cmp	r3, #8
 8000c62:	d112      	bne.n	8000c8a <HAL_RCC_OscConfig+0x5e>
 8000c64:	4b8c      	ldr	r3, [pc, #560]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c70:	d10b      	bne.n	8000c8a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c72:	4b89      	ldr	r3, [pc, #548]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d06c      	beq.n	8000d58 <HAL_RCC_OscConfig+0x12c>
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d168      	bne.n	8000d58 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	e24c      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000c92:	d106      	bne.n	8000ca2 <HAL_RCC_OscConfig+0x76>
 8000c94:	4b80      	ldr	r3, [pc, #512]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	4a7f      	ldr	r2, [pc, #508]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000c9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c9e:	6013      	str	r3, [r2, #0]
 8000ca0:	e02e      	b.n	8000d00 <HAL_RCC_OscConfig+0xd4>
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d10c      	bne.n	8000cc4 <HAL_RCC_OscConfig+0x98>
 8000caa:	4b7b      	ldr	r3, [pc, #492]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a7a      	ldr	r2, [pc, #488]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000cb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000cb4:	6013      	str	r3, [r2, #0]
 8000cb6:	4b78      	ldr	r3, [pc, #480]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a77      	ldr	r2, [pc, #476]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000cbc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cc0:	6013      	str	r3, [r2, #0]
 8000cc2:	e01d      	b.n	8000d00 <HAL_RCC_OscConfig+0xd4>
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000ccc:	d10c      	bne.n	8000ce8 <HAL_RCC_OscConfig+0xbc>
 8000cce:	4b72      	ldr	r3, [pc, #456]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a71      	ldr	r2, [pc, #452]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000cd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cd8:	6013      	str	r3, [r2, #0]
 8000cda:	4b6f      	ldr	r3, [pc, #444]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	4a6e      	ldr	r2, [pc, #440]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000ce0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000ce4:	6013      	str	r3, [r2, #0]
 8000ce6:	e00b      	b.n	8000d00 <HAL_RCC_OscConfig+0xd4>
 8000ce8:	4b6b      	ldr	r3, [pc, #428]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	4a6a      	ldr	r2, [pc, #424]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000cee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000cf2:	6013      	str	r3, [r2, #0]
 8000cf4:	4b68      	ldr	r3, [pc, #416]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a67      	ldr	r2, [pc, #412]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000cfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000cfe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	685b      	ldr	r3, [r3, #4]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d013      	beq.n	8000d30 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d08:	f7ff fce8 	bl	80006dc <HAL_GetTick>
 8000d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d0e:	e008      	b.n	8000d22 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d10:	f7ff fce4 	bl	80006dc <HAL_GetTick>
 8000d14:	4602      	mov	r2, r0
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	1ad3      	subs	r3, r2, r3
 8000d1a:	2b64      	cmp	r3, #100	@ 0x64
 8000d1c:	d901      	bls.n	8000d22 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	e200      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d22:	4b5d      	ldr	r3, [pc, #372]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d0f0      	beq.n	8000d10 <HAL_RCC_OscConfig+0xe4>
 8000d2e:	e014      	b.n	8000d5a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d30:	f7ff fcd4 	bl	80006dc <HAL_GetTick>
 8000d34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d36:	e008      	b.n	8000d4a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d38:	f7ff fcd0 	bl	80006dc <HAL_GetTick>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	693b      	ldr	r3, [r7, #16]
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	2b64      	cmp	r3, #100	@ 0x64
 8000d44:	d901      	bls.n	8000d4a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000d46:	2303      	movs	r3, #3
 8000d48:	e1ec      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d4a:	4b53      	ldr	r3, [pc, #332]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d1f0      	bne.n	8000d38 <HAL_RCC_OscConfig+0x10c>
 8000d56:	e000      	b.n	8000d5a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d063      	beq.n	8000e2e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d66:	4b4c      	ldr	r3, [pc, #304]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	f003 030c 	and.w	r3, r3, #12
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d00b      	beq.n	8000d8a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d72:	4b49      	ldr	r3, [pc, #292]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f003 030c 	and.w	r3, r3, #12
 8000d7a:	2b08      	cmp	r3, #8
 8000d7c:	d11c      	bne.n	8000db8 <HAL_RCC_OscConfig+0x18c>
 8000d7e:	4b46      	ldr	r3, [pc, #280]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000d80:	685b      	ldr	r3, [r3, #4]
 8000d82:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d116      	bne.n	8000db8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d8a:	4b43      	ldr	r3, [pc, #268]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d005      	beq.n	8000da2 <HAL_RCC_OscConfig+0x176>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	691b      	ldr	r3, [r3, #16]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d001      	beq.n	8000da2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e1c0      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000da2:	4b3d      	ldr	r3, [pc, #244]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	695b      	ldr	r3, [r3, #20]
 8000dae:	00db      	lsls	r3, r3, #3
 8000db0:	4939      	ldr	r1, [pc, #228]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000db2:	4313      	orrs	r3, r2
 8000db4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000db6:	e03a      	b.n	8000e2e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	691b      	ldr	r3, [r3, #16]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d020      	beq.n	8000e02 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dc0:	4b36      	ldr	r3, [pc, #216]	@ (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dc6:	f7ff fc89 	bl	80006dc <HAL_GetTick>
 8000dca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dcc:	e008      	b.n	8000de0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dce:	f7ff fc85 	bl	80006dc <HAL_GetTick>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d901      	bls.n	8000de0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	e1a1      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000de0:	4b2d      	ldr	r3, [pc, #180]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f003 0302 	and.w	r3, r3, #2
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d0f0      	beq.n	8000dce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dec:	4b2a      	ldr	r3, [pc, #168]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	695b      	ldr	r3, [r3, #20]
 8000df8:	00db      	lsls	r3, r3, #3
 8000dfa:	4927      	ldr	r1, [pc, #156]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	600b      	str	r3, [r1, #0]
 8000e00:	e015      	b.n	8000e2e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e02:	4b26      	ldr	r3, [pc, #152]	@ (8000e9c <HAL_RCC_OscConfig+0x270>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e08:	f7ff fc68 	bl	80006dc <HAL_GetTick>
 8000e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e0e:	e008      	b.n	8000e22 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e10:	f7ff fc64 	bl	80006dc <HAL_GetTick>
 8000e14:	4602      	mov	r2, r0
 8000e16:	693b      	ldr	r3, [r7, #16]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	2b02      	cmp	r3, #2
 8000e1c:	d901      	bls.n	8000e22 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	e180      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e22:	4b1d      	ldr	r3, [pc, #116]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f003 0302 	and.w	r3, r3, #2
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d1f0      	bne.n	8000e10 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	f003 0308 	and.w	r3, r3, #8
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d03a      	beq.n	8000eb0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	699b      	ldr	r3, [r3, #24]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d019      	beq.n	8000e76 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e42:	4b17      	ldr	r3, [pc, #92]	@ (8000ea0 <HAL_RCC_OscConfig+0x274>)
 8000e44:	2201      	movs	r2, #1
 8000e46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e48:	f7ff fc48 	bl	80006dc <HAL_GetTick>
 8000e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e4e:	e008      	b.n	8000e62 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e50:	f7ff fc44 	bl	80006dc <HAL_GetTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d901      	bls.n	8000e62 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	e160      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e62:	4b0d      	ldr	r3, [pc, #52]	@ (8000e98 <HAL_RCC_OscConfig+0x26c>)
 8000e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e66:	f003 0302 	and.w	r3, r3, #2
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d0f0      	beq.n	8000e50 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e6e:	2001      	movs	r0, #1
 8000e70:	f000 fafe 	bl	8001470 <RCC_Delay>
 8000e74:	e01c      	b.n	8000eb0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e76:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea0 <HAL_RCC_OscConfig+0x274>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e7c:	f7ff fc2e 	bl	80006dc <HAL_GetTick>
 8000e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e82:	e00f      	b.n	8000ea4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e84:	f7ff fc2a 	bl	80006dc <HAL_GetTick>
 8000e88:	4602      	mov	r2, r0
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d908      	bls.n	8000ea4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e92:	2303      	movs	r3, #3
 8000e94:	e146      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
 8000e96:	bf00      	nop
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	42420000 	.word	0x42420000
 8000ea0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ea4:	4b92      	ldr	r3, [pc, #584]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ea8:	f003 0302 	and.w	r3, r3, #2
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d1e9      	bne.n	8000e84 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	f003 0304 	and.w	r3, r3, #4
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	f000 80a6 	beq.w	800100a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000ec2:	4b8b      	ldr	r3, [pc, #556]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000ec4:	69db      	ldr	r3, [r3, #28]
 8000ec6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d10d      	bne.n	8000eea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ece:	4b88      	ldr	r3, [pc, #544]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	4a87      	ldr	r2, [pc, #540]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000ed4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ed8:	61d3      	str	r3, [r2, #28]
 8000eda:	4b85      	ldr	r3, [pc, #532]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eea:	4b82      	ldr	r3, [pc, #520]	@ (80010f4 <HAL_RCC_OscConfig+0x4c8>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d118      	bne.n	8000f28 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ef6:	4b7f      	ldr	r3, [pc, #508]	@ (80010f4 <HAL_RCC_OscConfig+0x4c8>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a7e      	ldr	r2, [pc, #504]	@ (80010f4 <HAL_RCC_OscConfig+0x4c8>)
 8000efc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f02:	f7ff fbeb 	bl	80006dc <HAL_GetTick>
 8000f06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f08:	e008      	b.n	8000f1c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f0a:	f7ff fbe7 	bl	80006dc <HAL_GetTick>
 8000f0e:	4602      	mov	r2, r0
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	2b64      	cmp	r3, #100	@ 0x64
 8000f16:	d901      	bls.n	8000f1c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	e103      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f1c:	4b75      	ldr	r3, [pc, #468]	@ (80010f4 <HAL_RCC_OscConfig+0x4c8>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d0f0      	beq.n	8000f0a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	2b01      	cmp	r3, #1
 8000f2e:	d106      	bne.n	8000f3e <HAL_RCC_OscConfig+0x312>
 8000f30:	4b6f      	ldr	r3, [pc, #444]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000f32:	6a1b      	ldr	r3, [r3, #32]
 8000f34:	4a6e      	ldr	r2, [pc, #440]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000f36:	f043 0301 	orr.w	r3, r3, #1
 8000f3a:	6213      	str	r3, [r2, #32]
 8000f3c:	e02d      	b.n	8000f9a <HAL_RCC_OscConfig+0x36e>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	68db      	ldr	r3, [r3, #12]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d10c      	bne.n	8000f60 <HAL_RCC_OscConfig+0x334>
 8000f46:	4b6a      	ldr	r3, [pc, #424]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000f48:	6a1b      	ldr	r3, [r3, #32]
 8000f4a:	4a69      	ldr	r2, [pc, #420]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000f4c:	f023 0301 	bic.w	r3, r3, #1
 8000f50:	6213      	str	r3, [r2, #32]
 8000f52:	4b67      	ldr	r3, [pc, #412]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000f54:	6a1b      	ldr	r3, [r3, #32]
 8000f56:	4a66      	ldr	r2, [pc, #408]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000f58:	f023 0304 	bic.w	r3, r3, #4
 8000f5c:	6213      	str	r3, [r2, #32]
 8000f5e:	e01c      	b.n	8000f9a <HAL_RCC_OscConfig+0x36e>
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	2b05      	cmp	r3, #5
 8000f66:	d10c      	bne.n	8000f82 <HAL_RCC_OscConfig+0x356>
 8000f68:	4b61      	ldr	r3, [pc, #388]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000f6a:	6a1b      	ldr	r3, [r3, #32]
 8000f6c:	4a60      	ldr	r2, [pc, #384]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000f6e:	f043 0304 	orr.w	r3, r3, #4
 8000f72:	6213      	str	r3, [r2, #32]
 8000f74:	4b5e      	ldr	r3, [pc, #376]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000f76:	6a1b      	ldr	r3, [r3, #32]
 8000f78:	4a5d      	ldr	r2, [pc, #372]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000f7a:	f043 0301 	orr.w	r3, r3, #1
 8000f7e:	6213      	str	r3, [r2, #32]
 8000f80:	e00b      	b.n	8000f9a <HAL_RCC_OscConfig+0x36e>
 8000f82:	4b5b      	ldr	r3, [pc, #364]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000f84:	6a1b      	ldr	r3, [r3, #32]
 8000f86:	4a5a      	ldr	r2, [pc, #360]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000f88:	f023 0301 	bic.w	r3, r3, #1
 8000f8c:	6213      	str	r3, [r2, #32]
 8000f8e:	4b58      	ldr	r3, [pc, #352]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000f90:	6a1b      	ldr	r3, [r3, #32]
 8000f92:	4a57      	ldr	r2, [pc, #348]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000f94:	f023 0304 	bic.w	r3, r3, #4
 8000f98:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	68db      	ldr	r3, [r3, #12]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d015      	beq.n	8000fce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fa2:	f7ff fb9b 	bl	80006dc <HAL_GetTick>
 8000fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fa8:	e00a      	b.n	8000fc0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000faa:	f7ff fb97 	bl	80006dc <HAL_GetTick>
 8000fae:	4602      	mov	r2, r0
 8000fb0:	693b      	ldr	r3, [r7, #16]
 8000fb2:	1ad3      	subs	r3, r2, r3
 8000fb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d901      	bls.n	8000fc0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000fbc:	2303      	movs	r3, #3
 8000fbe:	e0b1      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000fc0:	4b4b      	ldr	r3, [pc, #300]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000fc2:	6a1b      	ldr	r3, [r3, #32]
 8000fc4:	f003 0302 	and.w	r3, r3, #2
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d0ee      	beq.n	8000faa <HAL_RCC_OscConfig+0x37e>
 8000fcc:	e014      	b.n	8000ff8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fce:	f7ff fb85 	bl	80006dc <HAL_GetTick>
 8000fd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fd4:	e00a      	b.n	8000fec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000fd6:	f7ff fb81 	bl	80006dc <HAL_GetTick>
 8000fda:	4602      	mov	r2, r0
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	1ad3      	subs	r3, r2, r3
 8000fe0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	d901      	bls.n	8000fec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	e09b      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fec:	4b40      	ldr	r3, [pc, #256]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8000fee:	6a1b      	ldr	r3, [r3, #32]
 8000ff0:	f003 0302 	and.w	r3, r3, #2
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d1ee      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000ff8:	7dfb      	ldrb	r3, [r7, #23]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d105      	bne.n	800100a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ffe:	4b3c      	ldr	r3, [pc, #240]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8001000:	69db      	ldr	r3, [r3, #28]
 8001002:	4a3b      	ldr	r2, [pc, #236]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8001004:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001008:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	2b00      	cmp	r3, #0
 8001010:	f000 8087 	beq.w	8001122 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001014:	4b36      	ldr	r3, [pc, #216]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 030c 	and.w	r3, r3, #12
 800101c:	2b08      	cmp	r3, #8
 800101e:	d061      	beq.n	80010e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	69db      	ldr	r3, [r3, #28]
 8001024:	2b02      	cmp	r3, #2
 8001026:	d146      	bne.n	80010b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001028:	4b33      	ldr	r3, [pc, #204]	@ (80010f8 <HAL_RCC_OscConfig+0x4cc>)
 800102a:	2200      	movs	r2, #0
 800102c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800102e:	f7ff fb55 	bl	80006dc <HAL_GetTick>
 8001032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001034:	e008      	b.n	8001048 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001036:	f7ff fb51 	bl	80006dc <HAL_GetTick>
 800103a:	4602      	mov	r2, r0
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	2b02      	cmp	r3, #2
 8001042:	d901      	bls.n	8001048 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001044:	2303      	movs	r3, #3
 8001046:	e06d      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001048:	4b29      	ldr	r3, [pc, #164]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d1f0      	bne.n	8001036 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6a1b      	ldr	r3, [r3, #32]
 8001058:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800105c:	d108      	bne.n	8001070 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800105e:	4b24      	ldr	r3, [pc, #144]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	4921      	ldr	r1, [pc, #132]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 800106c:	4313      	orrs	r3, r2
 800106e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001070:	4b1f      	ldr	r3, [pc, #124]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6a19      	ldr	r1, [r3, #32]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001080:	430b      	orrs	r3, r1
 8001082:	491b      	ldr	r1, [pc, #108]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 8001084:	4313      	orrs	r3, r2
 8001086:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001088:	4b1b      	ldr	r3, [pc, #108]	@ (80010f8 <HAL_RCC_OscConfig+0x4cc>)
 800108a:	2201      	movs	r2, #1
 800108c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800108e:	f7ff fb25 	bl	80006dc <HAL_GetTick>
 8001092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001094:	e008      	b.n	80010a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001096:	f7ff fb21 	bl	80006dc <HAL_GetTick>
 800109a:	4602      	mov	r2, r0
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	1ad3      	subs	r3, r2, r3
 80010a0:	2b02      	cmp	r3, #2
 80010a2:	d901      	bls.n	80010a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80010a4:	2303      	movs	r3, #3
 80010a6:	e03d      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80010a8:	4b11      	ldr	r3, [pc, #68]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d0f0      	beq.n	8001096 <HAL_RCC_OscConfig+0x46a>
 80010b4:	e035      	b.n	8001122 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010b6:	4b10      	ldr	r3, [pc, #64]	@ (80010f8 <HAL_RCC_OscConfig+0x4cc>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010bc:	f7ff fb0e 	bl	80006dc <HAL_GetTick>
 80010c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010c2:	e008      	b.n	80010d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010c4:	f7ff fb0a 	bl	80006dc <HAL_GetTick>
 80010c8:	4602      	mov	r2, r0
 80010ca:	693b      	ldr	r3, [r7, #16]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d901      	bls.n	80010d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80010d2:	2303      	movs	r3, #3
 80010d4:	e026      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010d6:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <HAL_RCC_OscConfig+0x4c4>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d1f0      	bne.n	80010c4 <HAL_RCC_OscConfig+0x498>
 80010e2:	e01e      	b.n	8001122 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	69db      	ldr	r3, [r3, #28]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d107      	bne.n	80010fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80010ec:	2301      	movs	r3, #1
 80010ee:	e019      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
 80010f0:	40021000 	.word	0x40021000
 80010f4:	40007000 	.word	0x40007000
 80010f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80010fc:	4b0b      	ldr	r3, [pc, #44]	@ (800112c <HAL_RCC_OscConfig+0x500>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6a1b      	ldr	r3, [r3, #32]
 800110c:	429a      	cmp	r2, r3
 800110e:	d106      	bne.n	800111e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800111a:	429a      	cmp	r2, r3
 800111c:	d001      	beq.n	8001122 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e000      	b.n	8001124 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001122:	2300      	movs	r3, #0
}
 8001124:	4618      	mov	r0, r3
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40021000 	.word	0x40021000

08001130 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d101      	bne.n	8001144 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	e0d0      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001144:	4b6a      	ldr	r3, [pc, #424]	@ (80012f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 0307 	and.w	r3, r3, #7
 800114c:	683a      	ldr	r2, [r7, #0]
 800114e:	429a      	cmp	r2, r3
 8001150:	d910      	bls.n	8001174 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001152:	4b67      	ldr	r3, [pc, #412]	@ (80012f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f023 0207 	bic.w	r2, r3, #7
 800115a:	4965      	ldr	r1, [pc, #404]	@ (80012f0 <HAL_RCC_ClockConfig+0x1c0>)
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	4313      	orrs	r3, r2
 8001160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001162:	4b63      	ldr	r3, [pc, #396]	@ (80012f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	683a      	ldr	r2, [r7, #0]
 800116c:	429a      	cmp	r2, r3
 800116e:	d001      	beq.n	8001174 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001170:	2301      	movs	r3, #1
 8001172:	e0b8      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	2b00      	cmp	r3, #0
 800117e:	d020      	beq.n	80011c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0304 	and.w	r3, r3, #4
 8001188:	2b00      	cmp	r3, #0
 800118a:	d005      	beq.n	8001198 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800118c:	4b59      	ldr	r3, [pc, #356]	@ (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 800118e:	685b      	ldr	r3, [r3, #4]
 8001190:	4a58      	ldr	r2, [pc, #352]	@ (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001192:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001196:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0308 	and.w	r3, r3, #8
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d005      	beq.n	80011b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011a4:	4b53      	ldr	r3, [pc, #332]	@ (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	4a52      	ldr	r2, [pc, #328]	@ (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 80011aa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80011ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011b0:	4b50      	ldr	r3, [pc, #320]	@ (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 80011b2:	685b      	ldr	r3, [r3, #4]
 80011b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	494d      	ldr	r1, [pc, #308]	@ (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 80011be:	4313      	orrs	r3, r2
 80011c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d040      	beq.n	8001250 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d107      	bne.n	80011e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011d6:	4b47      	ldr	r3, [pc, #284]	@ (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d115      	bne.n	800120e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011e2:	2301      	movs	r3, #1
 80011e4:	e07f      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d107      	bne.n	80011fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011ee:	4b41      	ldr	r3, [pc, #260]	@ (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d109      	bne.n	800120e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011fa:	2301      	movs	r3, #1
 80011fc:	e073      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011fe:	4b3d      	ldr	r3, [pc, #244]	@ (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e06b      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800120e:	4b39      	ldr	r3, [pc, #228]	@ (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f023 0203 	bic.w	r2, r3, #3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	685b      	ldr	r3, [r3, #4]
 800121a:	4936      	ldr	r1, [pc, #216]	@ (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 800121c:	4313      	orrs	r3, r2
 800121e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001220:	f7ff fa5c 	bl	80006dc <HAL_GetTick>
 8001224:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001226:	e00a      	b.n	800123e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001228:	f7ff fa58 	bl	80006dc <HAL_GetTick>
 800122c:	4602      	mov	r2, r0
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001236:	4293      	cmp	r3, r2
 8001238:	d901      	bls.n	800123e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e053      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800123e:	4b2d      	ldr	r3, [pc, #180]	@ (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f003 020c 	and.w	r2, r3, #12
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	429a      	cmp	r2, r3
 800124e:	d1eb      	bne.n	8001228 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001250:	4b27      	ldr	r3, [pc, #156]	@ (80012f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0307 	and.w	r3, r3, #7
 8001258:	683a      	ldr	r2, [r7, #0]
 800125a:	429a      	cmp	r2, r3
 800125c:	d210      	bcs.n	8001280 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800125e:	4b24      	ldr	r3, [pc, #144]	@ (80012f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f023 0207 	bic.w	r2, r3, #7
 8001266:	4922      	ldr	r1, [pc, #136]	@ (80012f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	4313      	orrs	r3, r2
 800126c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800126e:	4b20      	ldr	r3, [pc, #128]	@ (80012f0 <HAL_RCC_ClockConfig+0x1c0>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f003 0307 	and.w	r3, r3, #7
 8001276:	683a      	ldr	r2, [r7, #0]
 8001278:	429a      	cmp	r2, r3
 800127a:	d001      	beq.n	8001280 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800127c:	2301      	movs	r3, #1
 800127e:	e032      	b.n	80012e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0304 	and.w	r3, r3, #4
 8001288:	2b00      	cmp	r3, #0
 800128a:	d008      	beq.n	800129e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800128c:	4b19      	ldr	r3, [pc, #100]	@ (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	4916      	ldr	r1, [pc, #88]	@ (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 800129a:	4313      	orrs	r3, r2
 800129c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0308 	and.w	r3, r3, #8
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d009      	beq.n	80012be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80012aa:	4b12      	ldr	r3, [pc, #72]	@ (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	691b      	ldr	r3, [r3, #16]
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	490e      	ldr	r1, [pc, #56]	@ (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 80012ba:	4313      	orrs	r3, r2
 80012bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80012be:	f000 f821 	bl	8001304 <HAL_RCC_GetSysClockFreq>
 80012c2:	4602      	mov	r2, r0
 80012c4:	4b0b      	ldr	r3, [pc, #44]	@ (80012f4 <HAL_RCC_ClockConfig+0x1c4>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	091b      	lsrs	r3, r3, #4
 80012ca:	f003 030f 	and.w	r3, r3, #15
 80012ce:	490a      	ldr	r1, [pc, #40]	@ (80012f8 <HAL_RCC_ClockConfig+0x1c8>)
 80012d0:	5ccb      	ldrb	r3, [r1, r3]
 80012d2:	fa22 f303 	lsr.w	r3, r2, r3
 80012d6:	4a09      	ldr	r2, [pc, #36]	@ (80012fc <HAL_RCC_ClockConfig+0x1cc>)
 80012d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80012da:	4b09      	ldr	r3, [pc, #36]	@ (8001300 <HAL_RCC_ClockConfig+0x1d0>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff f8fe 	bl	80004e0 <HAL_InitTick>

  return HAL_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40022000 	.word	0x40022000
 80012f4:	40021000 	.word	0x40021000
 80012f8:	0800465c 	.word	0x0800465c
 80012fc:	20000000 	.word	0x20000000
 8001300:	20000004 	.word	0x20000004

08001304 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001304:	b480      	push	{r7}
 8001306:	b087      	sub	sp, #28
 8001308:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800130a:	2300      	movs	r3, #0
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	2300      	movs	r3, #0
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	2300      	movs	r3, #0
 8001314:	617b      	str	r3, [r7, #20]
 8001316:	2300      	movs	r3, #0
 8001318:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800131a:	2300      	movs	r3, #0
 800131c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800131e:	4b1e      	ldr	r3, [pc, #120]	@ (8001398 <HAL_RCC_GetSysClockFreq+0x94>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f003 030c 	and.w	r3, r3, #12
 800132a:	2b04      	cmp	r3, #4
 800132c:	d002      	beq.n	8001334 <HAL_RCC_GetSysClockFreq+0x30>
 800132e:	2b08      	cmp	r3, #8
 8001330:	d003      	beq.n	800133a <HAL_RCC_GetSysClockFreq+0x36>
 8001332:	e027      	b.n	8001384 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001334:	4b19      	ldr	r3, [pc, #100]	@ (800139c <HAL_RCC_GetSysClockFreq+0x98>)
 8001336:	613b      	str	r3, [r7, #16]
      break;
 8001338:	e027      	b.n	800138a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	0c9b      	lsrs	r3, r3, #18
 800133e:	f003 030f 	and.w	r3, r3, #15
 8001342:	4a17      	ldr	r2, [pc, #92]	@ (80013a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001344:	5cd3      	ldrb	r3, [r2, r3]
 8001346:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d010      	beq.n	8001374 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001352:	4b11      	ldr	r3, [pc, #68]	@ (8001398 <HAL_RCC_GetSysClockFreq+0x94>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	0c5b      	lsrs	r3, r3, #17
 8001358:	f003 0301 	and.w	r3, r3, #1
 800135c:	4a11      	ldr	r2, [pc, #68]	@ (80013a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800135e:	5cd3      	ldrb	r3, [r2, r3]
 8001360:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a0d      	ldr	r2, [pc, #52]	@ (800139c <HAL_RCC_GetSysClockFreq+0x98>)
 8001366:	fb03 f202 	mul.w	r2, r3, r2
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001370:	617b      	str	r3, [r7, #20]
 8001372:	e004      	b.n	800137e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	4a0c      	ldr	r2, [pc, #48]	@ (80013a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001378:	fb02 f303 	mul.w	r3, r2, r3
 800137c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	613b      	str	r3, [r7, #16]
      break;
 8001382:	e002      	b.n	800138a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001384:	4b05      	ldr	r3, [pc, #20]	@ (800139c <HAL_RCC_GetSysClockFreq+0x98>)
 8001386:	613b      	str	r3, [r7, #16]
      break;
 8001388:	bf00      	nop
    }
  }
  return sysclockfreq;
 800138a:	693b      	ldr	r3, [r7, #16]
}
 800138c:	4618      	mov	r0, r3
 800138e:	371c      	adds	r7, #28
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	40021000 	.word	0x40021000
 800139c:	007a1200 	.word	0x007a1200
 80013a0:	08004674 	.word	0x08004674
 80013a4:	08004684 	.word	0x08004684
 80013a8:	003d0900 	.word	0x003d0900

080013ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80013b0:	4b02      	ldr	r3, [pc, #8]	@ (80013bc <HAL_RCC_GetHCLKFreq+0x10>)
 80013b2:	681b      	ldr	r3, [r3, #0]
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr
 80013bc:	20000000 	.word	0x20000000

080013c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80013c4:	f7ff fff2 	bl	80013ac <HAL_RCC_GetHCLKFreq>
 80013c8:	4602      	mov	r2, r0
 80013ca:	4b05      	ldr	r3, [pc, #20]	@ (80013e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	0a1b      	lsrs	r3, r3, #8
 80013d0:	f003 0307 	and.w	r3, r3, #7
 80013d4:	4903      	ldr	r1, [pc, #12]	@ (80013e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80013d6:	5ccb      	ldrb	r3, [r1, r3]
 80013d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80013dc:	4618      	mov	r0, r3
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40021000 	.word	0x40021000
 80013e4:	0800466c 	.word	0x0800466c

080013e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80013ec:	f7ff ffde 	bl	80013ac <HAL_RCC_GetHCLKFreq>
 80013f0:	4602      	mov	r2, r0
 80013f2:	4b05      	ldr	r3, [pc, #20]	@ (8001408 <HAL_RCC_GetPCLK2Freq+0x20>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	0adb      	lsrs	r3, r3, #11
 80013f8:	f003 0307 	and.w	r3, r3, #7
 80013fc:	4903      	ldr	r1, [pc, #12]	@ (800140c <HAL_RCC_GetPCLK2Freq+0x24>)
 80013fe:	5ccb      	ldrb	r3, [r1, r3]
 8001400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001404:	4618      	mov	r0, r3
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40021000 	.word	0x40021000
 800140c:	0800466c 	.word	0x0800466c

08001410 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001410:	b480      	push	{r7}
 8001412:	b083      	sub	sp, #12
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	220f      	movs	r2, #15
 800141e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001420:	4b11      	ldr	r3, [pc, #68]	@ (8001468 <HAL_RCC_GetClockConfig+0x58>)
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f003 0203 	and.w	r2, r3, #3
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800142c:	4b0e      	ldr	r3, [pc, #56]	@ (8001468 <HAL_RCC_GetClockConfig+0x58>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001438:	4b0b      	ldr	r3, [pc, #44]	@ (8001468 <HAL_RCC_GetClockConfig+0x58>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001444:	4b08      	ldr	r3, [pc, #32]	@ (8001468 <HAL_RCC_GetClockConfig+0x58>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	08db      	lsrs	r3, r3, #3
 800144a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001452:	4b06      	ldr	r3, [pc, #24]	@ (800146c <HAL_RCC_GetClockConfig+0x5c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0207 	and.w	r2, r3, #7
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	bc80      	pop	{r7}
 8001466:	4770      	bx	lr
 8001468:	40021000 	.word	0x40021000
 800146c:	40022000 	.word	0x40022000

08001470 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001478:	4b0a      	ldr	r3, [pc, #40]	@ (80014a4 <RCC_Delay+0x34>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a0a      	ldr	r2, [pc, #40]	@ (80014a8 <RCC_Delay+0x38>)
 800147e:	fba2 2303 	umull	r2, r3, r2, r3
 8001482:	0a5b      	lsrs	r3, r3, #9
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	fb02 f303 	mul.w	r3, r2, r3
 800148a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800148c:	bf00      	nop
  }
  while (Delay --);
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	1e5a      	subs	r2, r3, #1
 8001492:	60fa      	str	r2, [r7, #12]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d1f9      	bne.n	800148c <RCC_Delay+0x1c>
}
 8001498:	bf00      	nop
 800149a:	bf00      	nop
 800149c:	3714      	adds	r7, #20
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr
 80014a4:	20000000 	.word	0x20000000
 80014a8:	10624dd3 	.word	0x10624dd3

080014ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d101      	bne.n	80014be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e041      	b.n	8001542 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d106      	bne.n	80014d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	2200      	movs	r2, #0
 80014ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80014d2:	6878      	ldr	r0, [r7, #4]
 80014d4:	f000 f839 	bl	800154a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2202      	movs	r2, #2
 80014dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	3304      	adds	r3, #4
 80014e8:	4619      	mov	r1, r3
 80014ea:	4610      	mov	r0, r2
 80014ec:	f000 f99c 	bl	8001828 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	2201      	movs	r2, #1
 80014f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2201      	movs	r2, #1
 80014fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2201      	movs	r2, #1
 8001504:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2201      	movs	r2, #1
 800150c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2201      	movs	r2, #1
 8001514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2201      	movs	r2, #1
 800151c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2201      	movs	r2, #1
 8001524:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2201      	movs	r2, #1
 800152c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2201      	movs	r2, #1
 8001534:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2201      	movs	r2, #1
 800153c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800154a:	b480      	push	{r7}
 800154c:	b083      	sub	sp, #12
 800154e:	af00      	add	r7, sp, #0
 8001550:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr

0800155c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800155c:	b480      	push	{r7}
 800155e:	b085      	sub	sp, #20
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2b01      	cmp	r3, #1
 800156e:	d001      	beq.n	8001574 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e03a      	b.n	80015ea <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2202      	movs	r2, #2
 8001578:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	68da      	ldr	r2, [r3, #12]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f042 0201 	orr.w	r2, r2, #1
 800158a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a18      	ldr	r2, [pc, #96]	@ (80015f4 <HAL_TIM_Base_Start_IT+0x98>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d00e      	beq.n	80015b4 <HAL_TIM_Base_Start_IT+0x58>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800159e:	d009      	beq.n	80015b4 <HAL_TIM_Base_Start_IT+0x58>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a14      	ldr	r2, [pc, #80]	@ (80015f8 <HAL_TIM_Base_Start_IT+0x9c>)
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d004      	beq.n	80015b4 <HAL_TIM_Base_Start_IT+0x58>
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a13      	ldr	r2, [pc, #76]	@ (80015fc <HAL_TIM_Base_Start_IT+0xa0>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d111      	bne.n	80015d8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f003 0307 	and.w	r3, r3, #7
 80015be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	2b06      	cmp	r3, #6
 80015c4:	d010      	beq.n	80015e8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f042 0201 	orr.w	r2, r2, #1
 80015d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80015d6:	e007      	b.n	80015e8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f042 0201 	orr.w	r2, r2, #1
 80015e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3714      	adds	r7, #20
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bc80      	pop	{r7}
 80015f2:	4770      	bx	lr
 80015f4:	40012c00 	.word	0x40012c00
 80015f8:	40000400 	.word	0x40000400
 80015fc:	40000800 	.word	0x40000800

08001600 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b084      	sub	sp, #16
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	2b00      	cmp	r3, #0
 8001620:	d020      	beq.n	8001664 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d01b      	beq.n	8001664 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f06f 0202 	mvn.w	r2, #2
 8001634:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2201      	movs	r2, #1
 800163a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	f003 0303 	and.w	r3, r3, #3
 8001646:	2b00      	cmp	r3, #0
 8001648:	d003      	beq.n	8001652 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f000 f8d1 	bl	80017f2 <HAL_TIM_IC_CaptureCallback>
 8001650:	e005      	b.n	800165e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f000 f8c4 	bl	80017e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f000 f8d3 	bl	8001804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	2200      	movs	r2, #0
 8001662:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	f003 0304 	and.w	r3, r3, #4
 800166a:	2b00      	cmp	r3, #0
 800166c:	d020      	beq.n	80016b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	2b00      	cmp	r3, #0
 8001676:	d01b      	beq.n	80016b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f06f 0204 	mvn.w	r2, #4
 8001680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2202      	movs	r2, #2
 8001686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001692:	2b00      	cmp	r3, #0
 8001694:	d003      	beq.n	800169e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f000 f8ab 	bl	80017f2 <HAL_TIM_IC_CaptureCallback>
 800169c:	e005      	b.n	80016aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 f89e 	bl	80017e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f000 f8ad 	bl	8001804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	2200      	movs	r2, #0
 80016ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	f003 0308 	and.w	r3, r3, #8
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d020      	beq.n	80016fc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f003 0308 	and.w	r3, r3, #8
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d01b      	beq.n	80016fc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f06f 0208 	mvn.w	r2, #8
 80016cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2204      	movs	r2, #4
 80016d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	f003 0303 	and.w	r3, r3, #3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 f885 	bl	80017f2 <HAL_TIM_IC_CaptureCallback>
 80016e8:	e005      	b.n	80016f6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 f878 	bl	80017e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f000 f887 	bl	8001804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	f003 0310 	and.w	r3, r3, #16
 8001702:	2b00      	cmp	r3, #0
 8001704:	d020      	beq.n	8001748 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f003 0310 	and.w	r3, r3, #16
 800170c:	2b00      	cmp	r3, #0
 800170e:	d01b      	beq.n	8001748 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f06f 0210 	mvn.w	r2, #16
 8001718:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2208      	movs	r2, #8
 800171e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	69db      	ldr	r3, [r3, #28]
 8001726:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 f85f 	bl	80017f2 <HAL_TIM_IC_CaptureCallback>
 8001734:	e005      	b.n	8001742 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f000 f852 	bl	80017e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800173c:	6878      	ldr	r0, [r7, #4]
 800173e:	f000 f861 	bl	8001804 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2200      	movs	r2, #0
 8001746:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	d00c      	beq.n	800176c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	2b00      	cmp	r3, #0
 800175a:	d007      	beq.n	800176c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f06f 0201 	mvn.w	r2, #1
 8001764:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7fe fe2c 	bl	80003c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001772:	2b00      	cmp	r3, #0
 8001774:	d00c      	beq.n	8001790 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800177c:	2b00      	cmp	r3, #0
 800177e:	d007      	beq.n	8001790 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001788:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 f8c3 	bl	8001916 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001796:	2b00      	cmp	r3, #0
 8001798:	d00c      	beq.n	80017b4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d007      	beq.n	80017b4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80017ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80017ae:	6878      	ldr	r0, [r7, #4]
 80017b0:	f000 f831 	bl	8001816 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	f003 0320 	and.w	r3, r3, #32
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d00c      	beq.n	80017d8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	f003 0320 	and.w	r3, r3, #32
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d007      	beq.n	80017d8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f06f 0220 	mvn.w	r2, #32
 80017d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80017d2:	6878      	ldr	r0, [r7, #4]
 80017d4:	f000 f896 	bl	8001904 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80017d8:	bf00      	nop
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr

080017f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80017f2:	b480      	push	{r7}
 80017f4:	b083      	sub	sp, #12
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr

08001804 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr

08001816 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001816:	b480      	push	{r7}
 8001818:	b083      	sub	sp, #12
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800181e:	bf00      	nop
 8001820:	370c      	adds	r7, #12
 8001822:	46bd      	mov	sp, r7
 8001824:	bc80      	pop	{r7}
 8001826:	4770      	bx	lr

08001828 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a2f      	ldr	r2, [pc, #188]	@ (80018f8 <TIM_Base_SetConfig+0xd0>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d00b      	beq.n	8001858 <TIM_Base_SetConfig+0x30>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001846:	d007      	beq.n	8001858 <TIM_Base_SetConfig+0x30>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	4a2c      	ldr	r2, [pc, #176]	@ (80018fc <TIM_Base_SetConfig+0xd4>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d003      	beq.n	8001858 <TIM_Base_SetConfig+0x30>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4a2b      	ldr	r2, [pc, #172]	@ (8001900 <TIM_Base_SetConfig+0xd8>)
 8001854:	4293      	cmp	r3, r2
 8001856:	d108      	bne.n	800186a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800185e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	4313      	orrs	r3, r2
 8001868:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a22      	ldr	r2, [pc, #136]	@ (80018f8 <TIM_Base_SetConfig+0xd0>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d00b      	beq.n	800188a <TIM_Base_SetConfig+0x62>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001878:	d007      	beq.n	800188a <TIM_Base_SetConfig+0x62>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a1f      	ldr	r2, [pc, #124]	@ (80018fc <TIM_Base_SetConfig+0xd4>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d003      	beq.n	800188a <TIM_Base_SetConfig+0x62>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a1e      	ldr	r2, [pc, #120]	@ (8001900 <TIM_Base_SetConfig+0xd8>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d108      	bne.n	800189c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001890:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	68db      	ldr	r3, [r3, #12]
 8001896:	68fa      	ldr	r2, [r7, #12]
 8001898:	4313      	orrs	r3, r2
 800189a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	695b      	ldr	r3, [r3, #20]
 80018a6:	4313      	orrs	r3, r2
 80018a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	68fa      	ldr	r2, [r7, #12]
 80018ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	689a      	ldr	r2, [r3, #8]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	4a0d      	ldr	r2, [pc, #52]	@ (80018f8 <TIM_Base_SetConfig+0xd0>)
 80018c4:	4293      	cmp	r3, r2
 80018c6:	d103      	bne.n	80018d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	691a      	ldr	r2, [r3, #16]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	691b      	ldr	r3, [r3, #16]
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d005      	beq.n	80018ee <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	691b      	ldr	r3, [r3, #16]
 80018e6:	f023 0201 	bic.w	r2, r3, #1
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	611a      	str	r2, [r3, #16]
  }
}
 80018ee:	bf00      	nop
 80018f0:	3714      	adds	r7, #20
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr
 80018f8:	40012c00 	.word	0x40012c00
 80018fc:	40000400 	.word	0x40000400
 8001900:	40000800 	.word	0x40000800

08001904 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr

08001916 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr

08001928 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2b00      	cmp	r3, #0
 8001934:	d101      	bne.n	800193a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e042      	b.n	80019c0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001940:	b2db      	uxtb	r3, r3
 8001942:	2b00      	cmp	r3, #0
 8001944:	d106      	bne.n	8001954 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	f7fe fd88 	bl	8000464 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2224      	movs	r2, #36	@ 0x24
 8001958:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	68da      	ldr	r2, [r3, #12]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800196a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f000 f82b 	bl	80019c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	691a      	ldr	r2, [r3, #16]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001980:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	695a      	ldr	r2, [r3, #20]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001990:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	68da      	ldr	r2, [r3, #12]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80019a0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2220      	movs	r2, #32
 80019ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2220      	movs	r2, #32
 80019b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80019be:	2300      	movs	r3, #0
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}

080019c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b084      	sub	sp, #16
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68da      	ldr	r2, [r3, #12]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	430a      	orrs	r2, r1
 80019e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	689a      	ldr	r2, [r3, #8]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	695b      	ldr	r3, [r3, #20]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	68db      	ldr	r3, [r3, #12]
 80019fe:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8001a02:	f023 030c 	bic.w	r3, r3, #12
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	6812      	ldr	r2, [r2, #0]
 8001a0a:	68b9      	ldr	r1, [r7, #8]
 8001a0c:	430b      	orrs	r3, r1
 8001a0e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	699a      	ldr	r2, [r3, #24]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	430a      	orrs	r2, r1
 8001a24:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a2c      	ldr	r2, [pc, #176]	@ (8001adc <UART_SetConfig+0x114>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d103      	bne.n	8001a38 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8001a30:	f7ff fcda 	bl	80013e8 <HAL_RCC_GetPCLK2Freq>
 8001a34:	60f8      	str	r0, [r7, #12]
 8001a36:	e002      	b.n	8001a3e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8001a38:	f7ff fcc2 	bl	80013c0 <HAL_RCC_GetPCLK1Freq>
 8001a3c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	4613      	mov	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	009a      	lsls	r2, r3, #2
 8001a48:	441a      	add	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a54:	4a22      	ldr	r2, [pc, #136]	@ (8001ae0 <UART_SetConfig+0x118>)
 8001a56:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5a:	095b      	lsrs	r3, r3, #5
 8001a5c:	0119      	lsls	r1, r3, #4
 8001a5e:	68fa      	ldr	r2, [r7, #12]
 8001a60:	4613      	mov	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	009a      	lsls	r2, r3, #2
 8001a68:	441a      	add	r2, r3
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	fbb2 f2f3 	udiv	r2, r2, r3
 8001a74:	4b1a      	ldr	r3, [pc, #104]	@ (8001ae0 <UART_SetConfig+0x118>)
 8001a76:	fba3 0302 	umull	r0, r3, r3, r2
 8001a7a:	095b      	lsrs	r3, r3, #5
 8001a7c:	2064      	movs	r0, #100	@ 0x64
 8001a7e:	fb00 f303 	mul.w	r3, r0, r3
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	011b      	lsls	r3, r3, #4
 8001a86:	3332      	adds	r3, #50	@ 0x32
 8001a88:	4a15      	ldr	r2, [pc, #84]	@ (8001ae0 <UART_SetConfig+0x118>)
 8001a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8e:	095b      	lsrs	r3, r3, #5
 8001a90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a94:	4419      	add	r1, r3
 8001a96:	68fa      	ldr	r2, [r7, #12]
 8001a98:	4613      	mov	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	009a      	lsls	r2, r3, #2
 8001aa0:	441a      	add	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8001aac:	4b0c      	ldr	r3, [pc, #48]	@ (8001ae0 <UART_SetConfig+0x118>)
 8001aae:	fba3 0302 	umull	r0, r3, r3, r2
 8001ab2:	095b      	lsrs	r3, r3, #5
 8001ab4:	2064      	movs	r0, #100	@ 0x64
 8001ab6:	fb00 f303 	mul.w	r3, r0, r3
 8001aba:	1ad3      	subs	r3, r2, r3
 8001abc:	011b      	lsls	r3, r3, #4
 8001abe:	3332      	adds	r3, #50	@ 0x32
 8001ac0:	4a07      	ldr	r2, [pc, #28]	@ (8001ae0 <UART_SetConfig+0x118>)
 8001ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ac6:	095b      	lsrs	r3, r3, #5
 8001ac8:	f003 020f 	and.w	r2, r3, #15
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	440a      	add	r2, r1
 8001ad2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8001ad4:	bf00      	nop
 8001ad6:	3710      	adds	r7, #16
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}
 8001adc:	40013800 	.word	0x40013800
 8001ae0:	51eb851f 	.word	0x51eb851f

08001ae4 <__NVIC_SetPriority>:
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b083      	sub	sp, #12
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	4603      	mov	r3, r0
 8001aec:	6039      	str	r1, [r7, #0]
 8001aee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	db0a      	blt.n	8001b0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	490c      	ldr	r1, [pc, #48]	@ (8001b30 <__NVIC_SetPriority+0x4c>)
 8001afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b02:	0112      	lsls	r2, r2, #4
 8001b04:	b2d2      	uxtb	r2, r2
 8001b06:	440b      	add	r3, r1
 8001b08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001b0c:	e00a      	b.n	8001b24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	b2da      	uxtb	r2, r3
 8001b12:	4908      	ldr	r1, [pc, #32]	@ (8001b34 <__NVIC_SetPriority+0x50>)
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	f003 030f 	and.w	r3, r3, #15
 8001b1a:	3b04      	subs	r3, #4
 8001b1c:	0112      	lsls	r2, r2, #4
 8001b1e:	b2d2      	uxtb	r2, r2
 8001b20:	440b      	add	r3, r1
 8001b22:	761a      	strb	r2, [r3, #24]
}
 8001b24:	bf00      	nop
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	bc80      	pop	{r7}
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	e000e100 	.word	0xe000e100
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001b3c:	4b05      	ldr	r3, [pc, #20]	@ (8001b54 <SysTick_Handler+0x1c>)
 8001b3e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001b40:	f001 fd0c 	bl	800355c <xTaskGetSchedulerState>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d001      	beq.n	8001b4e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001b4a:	f002 faad 	bl	80040a8 <xPortSysTickHandler>
  }
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	e000e010 	.word	0xe000e010

08001b58 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	f06f 0004 	mvn.w	r0, #4
 8001b62:	f7ff ffbf 	bl	8001ae4 <__NVIC_SetPriority>
#endif
}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
	...

08001b6c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b72:	f3ef 8305 	mrs	r3, IPSR
 8001b76:	603b      	str	r3, [r7, #0]
  return(result);
 8001b78:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001b7e:	f06f 0305 	mvn.w	r3, #5
 8001b82:	607b      	str	r3, [r7, #4]
 8001b84:	e00c      	b.n	8001ba0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001b86:	4b09      	ldr	r3, [pc, #36]	@ (8001bac <osKernelInitialize+0x40>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d105      	bne.n	8001b9a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001b8e:	4b07      	ldr	r3, [pc, #28]	@ (8001bac <osKernelInitialize+0x40>)
 8001b90:	2201      	movs	r2, #1
 8001b92:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001b94:	2300      	movs	r3, #0
 8001b96:	607b      	str	r3, [r7, #4]
 8001b98:	e002      	b.n	8001ba0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001b9a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b9e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001ba0:	687b      	ldr	r3, [r7, #4]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bc80      	pop	{r7}
 8001baa:	4770      	bx	lr
 8001bac:	200000c4 	.word	0x200000c4

08001bb0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001bb6:	f3ef 8305 	mrs	r3, IPSR
 8001bba:	603b      	str	r3, [r7, #0]
  return(result);
 8001bbc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <osKernelStart+0x1a>
    stat = osErrorISR;
 8001bc2:	f06f 0305 	mvn.w	r3, #5
 8001bc6:	607b      	str	r3, [r7, #4]
 8001bc8:	e010      	b.n	8001bec <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001bca:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf8 <osKernelStart+0x48>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d109      	bne.n	8001be6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001bd2:	f7ff ffc1 	bl	8001b58 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001bd6:	4b08      	ldr	r3, [pc, #32]	@ (8001bf8 <osKernelStart+0x48>)
 8001bd8:	2202      	movs	r2, #2
 8001bda:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001bdc:	f001 f872 	bl	8002cc4 <vTaskStartScheduler>
      stat = osOK;
 8001be0:	2300      	movs	r3, #0
 8001be2:	607b      	str	r3, [r7, #4]
 8001be4:	e002      	b.n	8001bec <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001be6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001bec:	687b      	ldr	r3, [r7, #4]
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	200000c4 	.word	0x200000c4

08001bfc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b08e      	sub	sp, #56	@ 0x38
 8001c00:	af04      	add	r7, sp, #16
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c0c:	f3ef 8305 	mrs	r3, IPSR
 8001c10:	617b      	str	r3, [r7, #20]
  return(result);
 8001c12:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d17e      	bne.n	8001d16 <osThreadNew+0x11a>
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d07b      	beq.n	8001d16 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001c1e:	2380      	movs	r3, #128	@ 0x80
 8001c20:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001c22:	2318      	movs	r3, #24
 8001c24:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8001c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001c2e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d045      	beq.n	8001cc2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d002      	beq.n	8001c44 <osThreadNew+0x48>
        name = attr->name;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	699b      	ldr	r3, [r3, #24]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d002      	beq.n	8001c52 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d008      	beq.n	8001c6a <osThreadNew+0x6e>
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	2b38      	cmp	r3, #56	@ 0x38
 8001c5c:	d805      	bhi.n	8001c6a <osThreadNew+0x6e>
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <osThreadNew+0x72>
        return (NULL);
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	e054      	b.n	8001d18 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	695b      	ldr	r3, [r3, #20]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d003      	beq.n	8001c7e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	089b      	lsrs	r3, r3, #2
 8001c7c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d00e      	beq.n	8001ca4 <osThreadNew+0xa8>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	2b5b      	cmp	r3, #91	@ 0x5b
 8001c8c:	d90a      	bls.n	8001ca4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d006      	beq.n	8001ca4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	695b      	ldr	r3, [r3, #20]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d002      	beq.n	8001ca4 <osThreadNew+0xa8>
        mem = 1;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	61bb      	str	r3, [r7, #24]
 8001ca2:	e010      	b.n	8001cc6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d10c      	bne.n	8001cc6 <osThreadNew+0xca>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d108      	bne.n	8001cc6 <osThreadNew+0xca>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	691b      	ldr	r3, [r3, #16]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d104      	bne.n	8001cc6 <osThreadNew+0xca>
          mem = 0;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	61bb      	str	r3, [r7, #24]
 8001cc0:	e001      	b.n	8001cc6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d110      	bne.n	8001cee <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001cd0:	687a      	ldr	r2, [r7, #4]
 8001cd2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001cd4:	9202      	str	r2, [sp, #8]
 8001cd6:	9301      	str	r3, [sp, #4]
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	6a3a      	ldr	r2, [r7, #32]
 8001ce0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	f000 fe12 	bl	800290c <xTaskCreateStatic>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	613b      	str	r3, [r7, #16]
 8001cec:	e013      	b.n	8001d16 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d110      	bne.n	8001d16 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001cf4:	6a3b      	ldr	r3, [r7, #32]
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	f107 0310 	add.w	r3, r7, #16
 8001cfc:	9301      	str	r3, [sp, #4]
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d06:	68f8      	ldr	r0, [r7, #12]
 8001d08:	f000 fe60 	bl	80029cc <xTaskCreate>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d001      	beq.n	8001d16 <osThreadNew+0x11a>
            hTask = NULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001d16:	693b      	ldr	r3, [r7, #16]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3728      	adds	r7, #40	@ 0x28
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d28:	f3ef 8305 	mrs	r3, IPSR
 8001d2c:	60bb      	str	r3, [r7, #8]
  return(result);
 8001d2e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d003      	beq.n	8001d3c <osDelay+0x1c>
    stat = osErrorISR;
 8001d34:	f06f 0305 	mvn.w	r3, #5
 8001d38:	60fb      	str	r3, [r7, #12]
 8001d3a:	e007      	b.n	8001d4c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d002      	beq.n	8001d4c <osDelay+0x2c>
      vTaskDelay(ticks);
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f000 ff86 	bl	8002c58 <vTaskDelay>
    }
  }

  return (stat);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
	...

08001d58 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	4a06      	ldr	r2, [pc, #24]	@ (8001d80 <vApplicationGetIdleTaskMemory+0x28>)
 8001d68:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001d6a:	68bb      	ldr	r3, [r7, #8]
 8001d6c:	4a05      	ldr	r2, [pc, #20]	@ (8001d84 <vApplicationGetIdleTaskMemory+0x2c>)
 8001d6e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2280      	movs	r2, #128	@ 0x80
 8001d74:	601a      	str	r2, [r3, #0]
}
 8001d76:	bf00      	nop
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr
 8001d80:	200000c8 	.word	0x200000c8
 8001d84:	20000124 	.word	0x20000124

08001d88 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001d88:	b480      	push	{r7}
 8001d8a:	b085      	sub	sp, #20
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4a07      	ldr	r2, [pc, #28]	@ (8001db4 <vApplicationGetTimerTaskMemory+0x2c>)
 8001d98:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	4a06      	ldr	r2, [pc, #24]	@ (8001db8 <vApplicationGetTimerTaskMemory+0x30>)
 8001d9e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001da6:	601a      	str	r2, [r3, #0]
}
 8001da8:	bf00      	nop
 8001daa:	3714      	adds	r7, #20
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bc80      	pop	{r7}
 8001db0:	4770      	bx	lr
 8001db2:	bf00      	nop
 8001db4:	20000324 	.word	0x20000324
 8001db8:	20000380 	.word	0x20000380

08001dbc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f103 0208 	add.w	r2, r3, #8
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	f103 0208 	add.w	r2, r3, #8
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f103 0208 	add.w	r2, r3, #8
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bc80      	pop	{r7}
 8001df8:	4770      	bx	lr

08001dfa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b083      	sub	sp, #12
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2200      	movs	r2, #0
 8001e06:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bc80      	pop	{r7}
 8001e10:	4770      	bx	lr

08001e12 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001e12:	b480      	push	{r7}
 8001e14:	b085      	sub	sp, #20
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
 8001e1a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	683a      	ldr	r2, [r7, #0]
 8001e3c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	1c5a      	adds	r2, r3, #1
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	601a      	str	r2, [r3, #0]
}
 8001e4e:	bf00      	nop
 8001e50:	3714      	adds	r7, #20
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bc80      	pop	{r7}
 8001e56:	4770      	bx	lr

08001e58 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e6e:	d103      	bne.n	8001e78 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	691b      	ldr	r3, [r3, #16]
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	e00c      	b.n	8001e92 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	3308      	adds	r3, #8
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	e002      	b.n	8001e86 <vListInsert+0x2e>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	60fb      	str	r3, [r7, #12]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68ba      	ldr	r2, [r7, #8]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d2f6      	bcs.n	8001e80 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	685a      	ldr	r2, [r3, #4]
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	687a      	ldr	r2, [r7, #4]
 8001eb2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	1c5a      	adds	r2, r3, #1
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	601a      	str	r2, [r3, #0]
}
 8001ebe:	bf00      	nop
 8001ec0:	3714      	adds	r7, #20
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr

08001ec8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	6892      	ldr	r2, [r2, #8]
 8001ede:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	687a      	ldr	r2, [r7, #4]
 8001ee6:	6852      	ldr	r2, [r2, #4]
 8001ee8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	687a      	ldr	r2, [r7, #4]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d103      	bne.n	8001efc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	1e5a      	subs	r2, r3, #1
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3714      	adds	r7, #20
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bc80      	pop	{r7}
 8001f18:	4770      	bx	lr
	...

08001f1c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b084      	sub	sp, #16
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d10b      	bne.n	8001f48 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f34:	f383 8811 	msr	BASEPRI, r3
 8001f38:	f3bf 8f6f 	isb	sy
 8001f3c:	f3bf 8f4f 	dsb	sy
 8001f40:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001f42:	bf00      	nop
 8001f44:	bf00      	nop
 8001f46:	e7fd      	b.n	8001f44 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001f48:	f002 f830 	bl	8003fac <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f54:	68f9      	ldr	r1, [r7, #12]
 8001f56:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001f58:	fb01 f303 	mul.w	r3, r1, r3
 8001f5c:	441a      	add	r2, r3
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2200      	movs	r2, #0
 8001f66:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	68f9      	ldr	r1, [r7, #12]
 8001f7c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001f7e:	fb01 f303 	mul.w	r3, r1, r3
 8001f82:	441a      	add	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	22ff      	movs	r2, #255	@ 0xff
 8001f8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	22ff      	movs	r2, #255	@ 0xff
 8001f94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d114      	bne.n	8001fc8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d01a      	beq.n	8001fdc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	3310      	adds	r3, #16
 8001faa:	4618      	mov	r0, r3
 8001fac:	f001 f916 	bl	80031dc <xTaskRemoveFromEventList>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d012      	beq.n	8001fdc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001fb6:	4b0d      	ldr	r3, [pc, #52]	@ (8001fec <xQueueGenericReset+0xd0>)
 8001fb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001fbc:	601a      	str	r2, [r3, #0]
 8001fbe:	f3bf 8f4f 	dsb	sy
 8001fc2:	f3bf 8f6f 	isb	sy
 8001fc6:	e009      	b.n	8001fdc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	3310      	adds	r3, #16
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f7ff fef5 	bl	8001dbc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	3324      	adds	r3, #36	@ 0x24
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff fef0 	bl	8001dbc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001fdc:	f002 f816 	bl	800400c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001fe0:	2301      	movs	r3, #1
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	e000ed04 	.word	0xe000ed04

08001ff0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08e      	sub	sp, #56	@ 0x38
 8001ff4:	af02      	add	r7, sp, #8
 8001ff6:	60f8      	str	r0, [r7, #12]
 8001ff8:	60b9      	str	r1, [r7, #8]
 8001ffa:	607a      	str	r2, [r7, #4]
 8001ffc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d10b      	bne.n	800201c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002008:	f383 8811 	msr	BASEPRI, r3
 800200c:	f3bf 8f6f 	isb	sy
 8002010:	f3bf 8f4f 	dsb	sy
 8002014:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002016:	bf00      	nop
 8002018:	bf00      	nop
 800201a:	e7fd      	b.n	8002018 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10b      	bne.n	800203a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002026:	f383 8811 	msr	BASEPRI, r3
 800202a:	f3bf 8f6f 	isb	sy
 800202e:	f3bf 8f4f 	dsb	sy
 8002032:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002034:	bf00      	nop
 8002036:	bf00      	nop
 8002038:	e7fd      	b.n	8002036 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d002      	beq.n	8002046 <xQueueGenericCreateStatic+0x56>
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d001      	beq.n	800204a <xQueueGenericCreateStatic+0x5a>
 8002046:	2301      	movs	r3, #1
 8002048:	e000      	b.n	800204c <xQueueGenericCreateStatic+0x5c>
 800204a:	2300      	movs	r3, #0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d10b      	bne.n	8002068 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002054:	f383 8811 	msr	BASEPRI, r3
 8002058:	f3bf 8f6f 	isb	sy
 800205c:	f3bf 8f4f 	dsb	sy
 8002060:	623b      	str	r3, [r7, #32]
}
 8002062:	bf00      	nop
 8002064:	bf00      	nop
 8002066:	e7fd      	b.n	8002064 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d102      	bne.n	8002074 <xQueueGenericCreateStatic+0x84>
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <xQueueGenericCreateStatic+0x88>
 8002074:	2301      	movs	r3, #1
 8002076:	e000      	b.n	800207a <xQueueGenericCreateStatic+0x8a>
 8002078:	2300      	movs	r3, #0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d10b      	bne.n	8002096 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800207e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002082:	f383 8811 	msr	BASEPRI, r3
 8002086:	f3bf 8f6f 	isb	sy
 800208a:	f3bf 8f4f 	dsb	sy
 800208e:	61fb      	str	r3, [r7, #28]
}
 8002090:	bf00      	nop
 8002092:	bf00      	nop
 8002094:	e7fd      	b.n	8002092 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002096:	2350      	movs	r3, #80	@ 0x50
 8002098:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	2b50      	cmp	r3, #80	@ 0x50
 800209e:	d00b      	beq.n	80020b8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80020a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020a4:	f383 8811 	msr	BASEPRI, r3
 80020a8:	f3bf 8f6f 	isb	sy
 80020ac:	f3bf 8f4f 	dsb	sy
 80020b0:	61bb      	str	r3, [r7, #24]
}
 80020b2:	bf00      	nop
 80020b4:	bf00      	nop
 80020b6:	e7fd      	b.n	80020b4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80020b8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80020be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00d      	beq.n	80020e0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80020c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020c6:	2201      	movs	r2, #1
 80020c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80020cc:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80020d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80020d2:	9300      	str	r3, [sp, #0]
 80020d4:	4613      	mov	r3, r2
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	68b9      	ldr	r1, [r7, #8]
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f000 f805 	bl	80020ea <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80020e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3730      	adds	r7, #48	@ 0x30
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80020ea:	b580      	push	{r7, lr}
 80020ec:	b084      	sub	sp, #16
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	60f8      	str	r0, [r7, #12]
 80020f2:	60b9      	str	r1, [r7, #8]
 80020f4:	607a      	str	r2, [r7, #4]
 80020f6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d103      	bne.n	8002106 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	e002      	b.n	800210c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	68ba      	ldr	r2, [r7, #8]
 8002116:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002118:	2101      	movs	r1, #1
 800211a:	69b8      	ldr	r0, [r7, #24]
 800211c:	f7ff fefe 	bl	8001f1c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	78fa      	ldrb	r2, [r7, #3]
 8002124:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002128:	bf00      	nop
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b08e      	sub	sp, #56	@ 0x38
 8002134:	af00      	add	r7, sp, #0
 8002136:	60f8      	str	r0, [r7, #12]
 8002138:	60b9      	str	r1, [r7, #8]
 800213a:	607a      	str	r2, [r7, #4]
 800213c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800213e:	2300      	movs	r3, #0
 8002140:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002148:	2b00      	cmp	r3, #0
 800214a:	d10b      	bne.n	8002164 <xQueueGenericSend+0x34>
	__asm volatile
 800214c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002150:	f383 8811 	msr	BASEPRI, r3
 8002154:	f3bf 8f6f 	isb	sy
 8002158:	f3bf 8f4f 	dsb	sy
 800215c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800215e:	bf00      	nop
 8002160:	bf00      	nop
 8002162:	e7fd      	b.n	8002160 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d103      	bne.n	8002172 <xQueueGenericSend+0x42>
 800216a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800216c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216e:	2b00      	cmp	r3, #0
 8002170:	d101      	bne.n	8002176 <xQueueGenericSend+0x46>
 8002172:	2301      	movs	r3, #1
 8002174:	e000      	b.n	8002178 <xQueueGenericSend+0x48>
 8002176:	2300      	movs	r3, #0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d10b      	bne.n	8002194 <xQueueGenericSend+0x64>
	__asm volatile
 800217c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002180:	f383 8811 	msr	BASEPRI, r3
 8002184:	f3bf 8f6f 	isb	sy
 8002188:	f3bf 8f4f 	dsb	sy
 800218c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800218e:	bf00      	nop
 8002190:	bf00      	nop
 8002192:	e7fd      	b.n	8002190 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	2b02      	cmp	r3, #2
 8002198:	d103      	bne.n	80021a2 <xQueueGenericSend+0x72>
 800219a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800219c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d101      	bne.n	80021a6 <xQueueGenericSend+0x76>
 80021a2:	2301      	movs	r3, #1
 80021a4:	e000      	b.n	80021a8 <xQueueGenericSend+0x78>
 80021a6:	2300      	movs	r3, #0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d10b      	bne.n	80021c4 <xQueueGenericSend+0x94>
	__asm volatile
 80021ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021b0:	f383 8811 	msr	BASEPRI, r3
 80021b4:	f3bf 8f6f 	isb	sy
 80021b8:	f3bf 8f4f 	dsb	sy
 80021bc:	623b      	str	r3, [r7, #32]
}
 80021be:	bf00      	nop
 80021c0:	bf00      	nop
 80021c2:	e7fd      	b.n	80021c0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80021c4:	f001 f9ca 	bl	800355c <xTaskGetSchedulerState>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d102      	bne.n	80021d4 <xQueueGenericSend+0xa4>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d101      	bne.n	80021d8 <xQueueGenericSend+0xa8>
 80021d4:	2301      	movs	r3, #1
 80021d6:	e000      	b.n	80021da <xQueueGenericSend+0xaa>
 80021d8:	2300      	movs	r3, #0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d10b      	bne.n	80021f6 <xQueueGenericSend+0xc6>
	__asm volatile
 80021de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021e2:	f383 8811 	msr	BASEPRI, r3
 80021e6:	f3bf 8f6f 	isb	sy
 80021ea:	f3bf 8f4f 	dsb	sy
 80021ee:	61fb      	str	r3, [r7, #28]
}
 80021f0:	bf00      	nop
 80021f2:	bf00      	nop
 80021f4:	e7fd      	b.n	80021f2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80021f6:	f001 fed9 	bl	8003fac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80021fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80021fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002202:	429a      	cmp	r2, r3
 8002204:	d302      	bcc.n	800220c <xQueueGenericSend+0xdc>
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	2b02      	cmp	r3, #2
 800220a:	d129      	bne.n	8002260 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	68b9      	ldr	r1, [r7, #8]
 8002210:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002212:	f000 fa0f 	bl	8002634 <prvCopyDataToQueue>
 8002216:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800221a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800221c:	2b00      	cmp	r3, #0
 800221e:	d010      	beq.n	8002242 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002222:	3324      	adds	r3, #36	@ 0x24
 8002224:	4618      	mov	r0, r3
 8002226:	f000 ffd9 	bl	80031dc <xTaskRemoveFromEventList>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d013      	beq.n	8002258 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002230:	4b3f      	ldr	r3, [pc, #252]	@ (8002330 <xQueueGenericSend+0x200>)
 8002232:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002236:	601a      	str	r2, [r3, #0]
 8002238:	f3bf 8f4f 	dsb	sy
 800223c:	f3bf 8f6f 	isb	sy
 8002240:	e00a      	b.n	8002258 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002242:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002244:	2b00      	cmp	r3, #0
 8002246:	d007      	beq.n	8002258 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002248:	4b39      	ldr	r3, [pc, #228]	@ (8002330 <xQueueGenericSend+0x200>)
 800224a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800224e:	601a      	str	r2, [r3, #0]
 8002250:	f3bf 8f4f 	dsb	sy
 8002254:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002258:	f001 fed8 	bl	800400c <vPortExitCritical>
				return pdPASS;
 800225c:	2301      	movs	r3, #1
 800225e:	e063      	b.n	8002328 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d103      	bne.n	800226e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002266:	f001 fed1 	bl	800400c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800226a:	2300      	movs	r3, #0
 800226c:	e05c      	b.n	8002328 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800226e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002270:	2b00      	cmp	r3, #0
 8002272:	d106      	bne.n	8002282 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002274:	f107 0314 	add.w	r3, r7, #20
 8002278:	4618      	mov	r0, r3
 800227a:	f001 f813 	bl	80032a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800227e:	2301      	movs	r3, #1
 8002280:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002282:	f001 fec3 	bl	800400c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002286:	f000 fd85 	bl	8002d94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800228a:	f001 fe8f 	bl	8003fac <vPortEnterCritical>
 800228e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002290:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002294:	b25b      	sxtb	r3, r3
 8002296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800229a:	d103      	bne.n	80022a4 <xQueueGenericSend+0x174>
 800229c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80022a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022a6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80022aa:	b25b      	sxtb	r3, r3
 80022ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022b0:	d103      	bne.n	80022ba <xQueueGenericSend+0x18a>
 80022b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80022ba:	f001 fea7 	bl	800400c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80022be:	1d3a      	adds	r2, r7, #4
 80022c0:	f107 0314 	add.w	r3, r7, #20
 80022c4:	4611      	mov	r1, r2
 80022c6:	4618      	mov	r0, r3
 80022c8:	f001 f802 	bl	80032d0 <xTaskCheckForTimeOut>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d124      	bne.n	800231c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80022d2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80022d4:	f000 faa6 	bl	8002824 <prvIsQueueFull>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d018      	beq.n	8002310 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80022de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022e0:	3310      	adds	r3, #16
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	4611      	mov	r1, r2
 80022e6:	4618      	mov	r0, r3
 80022e8:	f000 ff26 	bl	8003138 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80022ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80022ee:	f000 fa31 	bl	8002754 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80022f2:	f000 fd5d 	bl	8002db0 <xTaskResumeAll>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f47f af7c 	bne.w	80021f6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80022fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002330 <xQueueGenericSend+0x200>)
 8002300:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002304:	601a      	str	r2, [r3, #0]
 8002306:	f3bf 8f4f 	dsb	sy
 800230a:	f3bf 8f6f 	isb	sy
 800230e:	e772      	b.n	80021f6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002310:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002312:	f000 fa1f 	bl	8002754 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002316:	f000 fd4b 	bl	8002db0 <xTaskResumeAll>
 800231a:	e76c      	b.n	80021f6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800231c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800231e:	f000 fa19 	bl	8002754 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002322:	f000 fd45 	bl	8002db0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002326:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002328:	4618      	mov	r0, r3
 800232a:	3738      	adds	r7, #56	@ 0x38
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	e000ed04 	.word	0xe000ed04

08002334 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b090      	sub	sp, #64	@ 0x40
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	607a      	str	r2, [r7, #4]
 8002340:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8002346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10b      	bne.n	8002364 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800234c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002350:	f383 8811 	msr	BASEPRI, r3
 8002354:	f3bf 8f6f 	isb	sy
 8002358:	f3bf 8f4f 	dsb	sy
 800235c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800235e:	bf00      	nop
 8002360:	bf00      	nop
 8002362:	e7fd      	b.n	8002360 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d103      	bne.n	8002372 <xQueueGenericSendFromISR+0x3e>
 800236a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800236c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <xQueueGenericSendFromISR+0x42>
 8002372:	2301      	movs	r3, #1
 8002374:	e000      	b.n	8002378 <xQueueGenericSendFromISR+0x44>
 8002376:	2300      	movs	r3, #0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10b      	bne.n	8002394 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800237c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002380:	f383 8811 	msr	BASEPRI, r3
 8002384:	f3bf 8f6f 	isb	sy
 8002388:	f3bf 8f4f 	dsb	sy
 800238c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800238e:	bf00      	nop
 8002390:	bf00      	nop
 8002392:	e7fd      	b.n	8002390 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	2b02      	cmp	r3, #2
 8002398:	d103      	bne.n	80023a2 <xQueueGenericSendFromISR+0x6e>
 800239a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800239c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d101      	bne.n	80023a6 <xQueueGenericSendFromISR+0x72>
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <xQueueGenericSendFromISR+0x74>
 80023a6:	2300      	movs	r3, #0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d10b      	bne.n	80023c4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80023ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023b0:	f383 8811 	msr	BASEPRI, r3
 80023b4:	f3bf 8f6f 	isb	sy
 80023b8:	f3bf 8f4f 	dsb	sy
 80023bc:	623b      	str	r3, [r7, #32]
}
 80023be:	bf00      	nop
 80023c0:	bf00      	nop
 80023c2:	e7fd      	b.n	80023c0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80023c4:	f001 feb4 	bl	8004130 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80023c8:	f3ef 8211 	mrs	r2, BASEPRI
 80023cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023d0:	f383 8811 	msr	BASEPRI, r3
 80023d4:	f3bf 8f6f 	isb	sy
 80023d8:	f3bf 8f4f 	dsb	sy
 80023dc:	61fa      	str	r2, [r7, #28]
 80023de:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80023e0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80023e2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80023e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80023e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d302      	bcc.n	80023f6 <xQueueGenericSendFromISR+0xc2>
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d12f      	bne.n	8002456 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80023f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80023f8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80023fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002402:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002404:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	68b9      	ldr	r1, [r7, #8]
 800240a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800240c:	f000 f912 	bl	8002634 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002410:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8002414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002418:	d112      	bne.n	8002440 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800241a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800241c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241e:	2b00      	cmp	r3, #0
 8002420:	d016      	beq.n	8002450 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002424:	3324      	adds	r3, #36	@ 0x24
 8002426:	4618      	mov	r0, r3
 8002428:	f000 fed8 	bl	80031dc <xTaskRemoveFromEventList>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00e      	beq.n	8002450 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00b      	beq.n	8002450 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	601a      	str	r2, [r3, #0]
 800243e:	e007      	b.n	8002450 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002440:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002444:	3301      	adds	r3, #1
 8002446:	b2db      	uxtb	r3, r3
 8002448:	b25a      	sxtb	r2, r3
 800244a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800244c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002450:	2301      	movs	r3, #1
 8002452:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8002454:	e001      	b.n	800245a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002456:	2300      	movs	r3, #0
 8002458:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800245a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800245c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800245e:	697b      	ldr	r3, [r7, #20]
 8002460:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002464:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8002468:	4618      	mov	r0, r3
 800246a:	3740      	adds	r7, #64	@ 0x40
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b08c      	sub	sp, #48	@ 0x30
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800247c:	2300      	movs	r3, #0
 800247e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002486:	2b00      	cmp	r3, #0
 8002488:	d10b      	bne.n	80024a2 <xQueueReceive+0x32>
	__asm volatile
 800248a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800248e:	f383 8811 	msr	BASEPRI, r3
 8002492:	f3bf 8f6f 	isb	sy
 8002496:	f3bf 8f4f 	dsb	sy
 800249a:	623b      	str	r3, [r7, #32]
}
 800249c:	bf00      	nop
 800249e:	bf00      	nop
 80024a0:	e7fd      	b.n	800249e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d103      	bne.n	80024b0 <xQueueReceive+0x40>
 80024a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d101      	bne.n	80024b4 <xQueueReceive+0x44>
 80024b0:	2301      	movs	r3, #1
 80024b2:	e000      	b.n	80024b6 <xQueueReceive+0x46>
 80024b4:	2300      	movs	r3, #0
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10b      	bne.n	80024d2 <xQueueReceive+0x62>
	__asm volatile
 80024ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024be:	f383 8811 	msr	BASEPRI, r3
 80024c2:	f3bf 8f6f 	isb	sy
 80024c6:	f3bf 8f4f 	dsb	sy
 80024ca:	61fb      	str	r3, [r7, #28]
}
 80024cc:	bf00      	nop
 80024ce:	bf00      	nop
 80024d0:	e7fd      	b.n	80024ce <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024d2:	f001 f843 	bl	800355c <xTaskGetSchedulerState>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d102      	bne.n	80024e2 <xQueueReceive+0x72>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <xQueueReceive+0x76>
 80024e2:	2301      	movs	r3, #1
 80024e4:	e000      	b.n	80024e8 <xQueueReceive+0x78>
 80024e6:	2300      	movs	r3, #0
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d10b      	bne.n	8002504 <xQueueReceive+0x94>
	__asm volatile
 80024ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024f0:	f383 8811 	msr	BASEPRI, r3
 80024f4:	f3bf 8f6f 	isb	sy
 80024f8:	f3bf 8f4f 	dsb	sy
 80024fc:	61bb      	str	r3, [r7, #24]
}
 80024fe:	bf00      	nop
 8002500:	bf00      	nop
 8002502:	e7fd      	b.n	8002500 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002504:	f001 fd52 	bl	8003fac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800250a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800250c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800250e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002510:	2b00      	cmp	r3, #0
 8002512:	d01f      	beq.n	8002554 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002514:	68b9      	ldr	r1, [r7, #8]
 8002516:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002518:	f000 f8f6 	bl	8002708 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800251c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800251e:	1e5a      	subs	r2, r3, #1
 8002520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002522:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002526:	691b      	ldr	r3, [r3, #16]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00f      	beq.n	800254c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800252c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800252e:	3310      	adds	r3, #16
 8002530:	4618      	mov	r0, r3
 8002532:	f000 fe53 	bl	80031dc <xTaskRemoveFromEventList>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d007      	beq.n	800254c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800253c:	4b3c      	ldr	r3, [pc, #240]	@ (8002630 <xQueueReceive+0x1c0>)
 800253e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	f3bf 8f4f 	dsb	sy
 8002548:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800254c:	f001 fd5e 	bl	800400c <vPortExitCritical>
				return pdPASS;
 8002550:	2301      	movs	r3, #1
 8002552:	e069      	b.n	8002628 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d103      	bne.n	8002562 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800255a:	f001 fd57 	bl	800400c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800255e:	2300      	movs	r3, #0
 8002560:	e062      	b.n	8002628 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002562:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002564:	2b00      	cmp	r3, #0
 8002566:	d106      	bne.n	8002576 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002568:	f107 0310 	add.w	r3, r7, #16
 800256c:	4618      	mov	r0, r3
 800256e:	f000 fe99 	bl	80032a4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002572:	2301      	movs	r3, #1
 8002574:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002576:	f001 fd49 	bl	800400c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800257a:	f000 fc0b 	bl	8002d94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800257e:	f001 fd15 	bl	8003fac <vPortEnterCritical>
 8002582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002584:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002588:	b25b      	sxtb	r3, r3
 800258a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800258e:	d103      	bne.n	8002598 <xQueueReceive+0x128>
 8002590:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002592:	2200      	movs	r2, #0
 8002594:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800259a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800259e:	b25b      	sxtb	r3, r3
 80025a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025a4:	d103      	bne.n	80025ae <xQueueReceive+0x13e>
 80025a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80025ae:	f001 fd2d 	bl	800400c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80025b2:	1d3a      	adds	r2, r7, #4
 80025b4:	f107 0310 	add.w	r3, r7, #16
 80025b8:	4611      	mov	r1, r2
 80025ba:	4618      	mov	r0, r3
 80025bc:	f000 fe88 	bl	80032d0 <xTaskCheckForTimeOut>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d123      	bne.n	800260e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80025c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80025c8:	f000 f916 	bl	80027f8 <prvIsQueueEmpty>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d017      	beq.n	8002602 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80025d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025d4:	3324      	adds	r3, #36	@ 0x24
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	4611      	mov	r1, r2
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 fdac 	bl	8003138 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80025e0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80025e2:	f000 f8b7 	bl	8002754 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80025e6:	f000 fbe3 	bl	8002db0 <xTaskResumeAll>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d189      	bne.n	8002504 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80025f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002630 <xQueueReceive+0x1c0>)
 80025f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	f3bf 8f4f 	dsb	sy
 80025fc:	f3bf 8f6f 	isb	sy
 8002600:	e780      	b.n	8002504 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002602:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002604:	f000 f8a6 	bl	8002754 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002608:	f000 fbd2 	bl	8002db0 <xTaskResumeAll>
 800260c:	e77a      	b.n	8002504 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800260e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002610:	f000 f8a0 	bl	8002754 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002614:	f000 fbcc 	bl	8002db0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002618:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800261a:	f000 f8ed 	bl	80027f8 <prvIsQueueEmpty>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	f43f af6f 	beq.w	8002504 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002626:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002628:	4618      	mov	r0, r3
 800262a:	3730      	adds	r7, #48	@ 0x30
 800262c:	46bd      	mov	sp, r7
 800262e:	bd80      	pop	{r7, pc}
 8002630:	e000ed04 	.word	0xe000ed04

08002634 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	60b9      	str	r1, [r7, #8]
 800263e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002640:	2300      	movs	r3, #0
 8002642:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002648:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10d      	bne.n	800266e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d14d      	bne.n	80026f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	4618      	mov	r0, r3
 8002660:	f000 ff9a 	bl	8003598 <xTaskPriorityDisinherit>
 8002664:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	609a      	str	r2, [r3, #8]
 800266c:	e043      	b.n	80026f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d119      	bne.n	80026a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	6858      	ldr	r0, [r3, #4]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800267c:	461a      	mov	r2, r3
 800267e:	68b9      	ldr	r1, [r7, #8]
 8002680:	f001 ffae 	bl	80045e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	685a      	ldr	r2, [r3, #4]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800268c:	441a      	add	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	429a      	cmp	r2, r3
 800269c:	d32b      	bcc.n	80026f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	605a      	str	r2, [r3, #4]
 80026a6:	e026      	b.n	80026f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	68d8      	ldr	r0, [r3, #12]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b0:	461a      	mov	r2, r3
 80026b2:	68b9      	ldr	r1, [r7, #8]
 80026b4:	f001 ff94 	bl	80045e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	68da      	ldr	r2, [r3, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c0:	425b      	negs	r3, r3
 80026c2:	441a      	add	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	68da      	ldr	r2, [r3, #12]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d207      	bcs.n	80026e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026dc:	425b      	negs	r3, r3
 80026de:	441a      	add	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d105      	bne.n	80026f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d002      	beq.n	80026f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	3b01      	subs	r3, #1
 80026f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80026f6:	693b      	ldr	r3, [r7, #16]
 80026f8:	1c5a      	adds	r2, r3, #1
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80026fe:	697b      	ldr	r3, [r7, #20]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
 8002710:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002716:	2b00      	cmp	r3, #0
 8002718:	d018      	beq.n	800274c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	68da      	ldr	r2, [r3, #12]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002722:	441a      	add	r2, r3
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	68da      	ldr	r2, [r3, #12]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	429a      	cmp	r2, r3
 8002732:	d303      	bcc.n	800273c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68d9      	ldr	r1, [r3, #12]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002744:	461a      	mov	r2, r3
 8002746:	6838      	ldr	r0, [r7, #0]
 8002748:	f001 ff4a 	bl	80045e0 <memcpy>
	}
}
 800274c:	bf00      	nop
 800274e:	3708      	adds	r7, #8
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b084      	sub	sp, #16
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800275c:	f001 fc26 	bl	8003fac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002766:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002768:	e011      	b.n	800278e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800276e:	2b00      	cmp	r3, #0
 8002770:	d012      	beq.n	8002798 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	3324      	adds	r3, #36	@ 0x24
 8002776:	4618      	mov	r0, r3
 8002778:	f000 fd30 	bl	80031dc <xTaskRemoveFromEventList>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002782:	f000 fe09 	bl	8003398 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002786:	7bfb      	ldrb	r3, [r7, #15]
 8002788:	3b01      	subs	r3, #1
 800278a:	b2db      	uxtb	r3, r3
 800278c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800278e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002792:	2b00      	cmp	r3, #0
 8002794:	dce9      	bgt.n	800276a <prvUnlockQueue+0x16>
 8002796:	e000      	b.n	800279a <prvUnlockQueue+0x46>
					break;
 8002798:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	22ff      	movs	r2, #255	@ 0xff
 800279e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80027a2:	f001 fc33 	bl	800400c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80027a6:	f001 fc01 	bl	8003fac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80027b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80027b2:	e011      	b.n	80027d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	691b      	ldr	r3, [r3, #16]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d012      	beq.n	80027e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	3310      	adds	r3, #16
 80027c0:	4618      	mov	r0, r3
 80027c2:	f000 fd0b 	bl	80031dc <xTaskRemoveFromEventList>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d001      	beq.n	80027d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80027cc:	f000 fde4 	bl	8003398 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80027d0:	7bbb      	ldrb	r3, [r7, #14]
 80027d2:	3b01      	subs	r3, #1
 80027d4:	b2db      	uxtb	r3, r3
 80027d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80027d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	dce9      	bgt.n	80027b4 <prvUnlockQueue+0x60>
 80027e0:	e000      	b.n	80027e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80027e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	22ff      	movs	r2, #255	@ 0xff
 80027e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80027ec:	f001 fc0e 	bl	800400c <vPortExitCritical>
}
 80027f0:	bf00      	nop
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002800:	f001 fbd4 	bl	8003fac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002808:	2b00      	cmp	r3, #0
 800280a:	d102      	bne.n	8002812 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800280c:	2301      	movs	r3, #1
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	e001      	b.n	8002816 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002812:	2300      	movs	r3, #0
 8002814:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002816:	f001 fbf9 	bl	800400c <vPortExitCritical>

	return xReturn;
 800281a:	68fb      	ldr	r3, [r7, #12]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800282c:	f001 fbbe 	bl	8003fac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002838:	429a      	cmp	r2, r3
 800283a:	d102      	bne.n	8002842 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800283c:	2301      	movs	r3, #1
 800283e:	60fb      	str	r3, [r7, #12]
 8002840:	e001      	b.n	8002846 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002842:	2300      	movs	r3, #0
 8002844:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002846:	f001 fbe1 	bl	800400c <vPortExitCritical>

	return xReturn;
 800284a:	68fb      	ldr	r3, [r7, #12]
}
 800284c:	4618      	mov	r0, r3
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
 800285c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800285e:	2300      	movs	r3, #0
 8002860:	60fb      	str	r3, [r7, #12]
 8002862:	e014      	b.n	800288e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002864:	4a0e      	ldr	r2, [pc, #56]	@ (80028a0 <vQueueAddToRegistry+0x4c>)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d10b      	bne.n	8002888 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002870:	490b      	ldr	r1, [pc, #44]	@ (80028a0 <vQueueAddToRegistry+0x4c>)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800287a:	4a09      	ldr	r2, [pc, #36]	@ (80028a0 <vQueueAddToRegistry+0x4c>)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	4413      	add	r3, r2
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002886:	e006      	b.n	8002896 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	3301      	adds	r3, #1
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2b07      	cmp	r3, #7
 8002892:	d9e7      	bls.n	8002864 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002894:	bf00      	nop
 8002896:	bf00      	nop
 8002898:	3714      	adds	r7, #20
 800289a:	46bd      	mov	sp, r7
 800289c:	bc80      	pop	{r7}
 800289e:	4770      	bx	lr
 80028a0:	20000780 	.word	0x20000780

080028a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80028b4:	f001 fb7a 	bl	8003fac <vPortEnterCritical>
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80028be:	b25b      	sxtb	r3, r3
 80028c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c4:	d103      	bne.n	80028ce <vQueueWaitForMessageRestricted+0x2a>
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80028d4:	b25b      	sxtb	r3, r3
 80028d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028da:	d103      	bne.n	80028e4 <vQueueWaitForMessageRestricted+0x40>
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	2200      	movs	r2, #0
 80028e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80028e4:	f001 fb92 	bl	800400c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d106      	bne.n	80028fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	3324      	adds	r3, #36	@ 0x24
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	68b9      	ldr	r1, [r7, #8]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f000 fc43 	bl	8003184 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80028fe:	6978      	ldr	r0, [r7, #20]
 8002900:	f7ff ff28 	bl	8002754 <prvUnlockQueue>
	}
 8002904:	bf00      	nop
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800290c:	b580      	push	{r7, lr}
 800290e:	b08e      	sub	sp, #56	@ 0x38
 8002910:	af04      	add	r7, sp, #16
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	607a      	str	r2, [r7, #4]
 8002918:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800291a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800291c:	2b00      	cmp	r3, #0
 800291e:	d10b      	bne.n	8002938 <xTaskCreateStatic+0x2c>
	__asm volatile
 8002920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002924:	f383 8811 	msr	BASEPRI, r3
 8002928:	f3bf 8f6f 	isb	sy
 800292c:	f3bf 8f4f 	dsb	sy
 8002930:	623b      	str	r3, [r7, #32]
}
 8002932:	bf00      	nop
 8002934:	bf00      	nop
 8002936:	e7fd      	b.n	8002934 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002938:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800293a:	2b00      	cmp	r3, #0
 800293c:	d10b      	bne.n	8002956 <xTaskCreateStatic+0x4a>
	__asm volatile
 800293e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002942:	f383 8811 	msr	BASEPRI, r3
 8002946:	f3bf 8f6f 	isb	sy
 800294a:	f3bf 8f4f 	dsb	sy
 800294e:	61fb      	str	r3, [r7, #28]
}
 8002950:	bf00      	nop
 8002952:	bf00      	nop
 8002954:	e7fd      	b.n	8002952 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002956:	235c      	movs	r3, #92	@ 0x5c
 8002958:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	2b5c      	cmp	r3, #92	@ 0x5c
 800295e:	d00b      	beq.n	8002978 <xTaskCreateStatic+0x6c>
	__asm volatile
 8002960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002964:	f383 8811 	msr	BASEPRI, r3
 8002968:	f3bf 8f6f 	isb	sy
 800296c:	f3bf 8f4f 	dsb	sy
 8002970:	61bb      	str	r3, [r7, #24]
}
 8002972:	bf00      	nop
 8002974:	bf00      	nop
 8002976:	e7fd      	b.n	8002974 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002978:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800297a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800297c:	2b00      	cmp	r3, #0
 800297e:	d01e      	beq.n	80029be <xTaskCreateStatic+0xb2>
 8002980:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002982:	2b00      	cmp	r3, #0
 8002984:	d01b      	beq.n	80029be <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002988:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800298a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800298e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002992:	2202      	movs	r2, #2
 8002994:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002998:	2300      	movs	r3, #0
 800299a:	9303      	str	r3, [sp, #12]
 800299c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800299e:	9302      	str	r3, [sp, #8]
 80029a0:	f107 0314 	add.w	r3, r7, #20
 80029a4:	9301      	str	r3, [sp, #4]
 80029a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	68b9      	ldr	r1, [r7, #8]
 80029b0:	68f8      	ldr	r0, [r7, #12]
 80029b2:	f000 f850 	bl	8002a56 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80029b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80029b8:	f000 f8de 	bl	8002b78 <prvAddNewTaskToReadyList>
 80029bc:	e001      	b.n	80029c2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80029be:	2300      	movs	r3, #0
 80029c0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80029c2:	697b      	ldr	r3, [r7, #20]
	}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3728      	adds	r7, #40	@ 0x28
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b08c      	sub	sp, #48	@ 0x30
 80029d0:	af04      	add	r7, sp, #16
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	603b      	str	r3, [r7, #0]
 80029d8:	4613      	mov	r3, r2
 80029da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80029dc:	88fb      	ldrh	r3, [r7, #6]
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	4618      	mov	r0, r3
 80029e2:	f001 fbe5 	bl	80041b0 <pvPortMalloc>
 80029e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00e      	beq.n	8002a0c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80029ee:	205c      	movs	r0, #92	@ 0x5c
 80029f0:	f001 fbde 	bl	80041b0 <pvPortMalloc>
 80029f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80029f6:	69fb      	ldr	r3, [r7, #28]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d003      	beq.n	8002a04 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a02:	e005      	b.n	8002a10 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002a04:	6978      	ldr	r0, [r7, #20]
 8002a06:	f001 fca1 	bl	800434c <vPortFree>
 8002a0a:	e001      	b.n	8002a10 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d017      	beq.n	8002a46 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a1e:	88fa      	ldrh	r2, [r7, #6]
 8002a20:	2300      	movs	r3, #0
 8002a22:	9303      	str	r3, [sp, #12]
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	9302      	str	r3, [sp, #8]
 8002a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a2a:	9301      	str	r3, [sp, #4]
 8002a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	68b9      	ldr	r1, [r7, #8]
 8002a34:	68f8      	ldr	r0, [r7, #12]
 8002a36:	f000 f80e 	bl	8002a56 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a3a:	69f8      	ldr	r0, [r7, #28]
 8002a3c:	f000 f89c 	bl	8002b78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002a40:	2301      	movs	r3, #1
 8002a42:	61bb      	str	r3, [r7, #24]
 8002a44:	e002      	b.n	8002a4c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a46:	f04f 33ff 	mov.w	r3, #4294967295
 8002a4a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002a4c:	69bb      	ldr	r3, [r7, #24]
	}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3720      	adds	r7, #32
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002a56:	b580      	push	{r7, lr}
 8002a58:	b088      	sub	sp, #32
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	60f8      	str	r0, [r7, #12]
 8002a5e:	60b9      	str	r1, [r7, #8]
 8002a60:	607a      	str	r2, [r7, #4]
 8002a62:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a66:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	21a5      	movs	r1, #165	@ 0xa5
 8002a70:	f001 fd8a 	bl	8004588 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002a86:	69bb      	ldr	r3, [r7, #24]
 8002a88:	f023 0307 	bic.w	r3, r3, #7
 8002a8c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	f003 0307 	and.w	r3, r3, #7
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00b      	beq.n	8002ab0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8002a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a9c:	f383 8811 	msr	BASEPRI, r3
 8002aa0:	f3bf 8f6f 	isb	sy
 8002aa4:	f3bf 8f4f 	dsb	sy
 8002aa8:	617b      	str	r3, [r7, #20]
}
 8002aaa:	bf00      	nop
 8002aac:	bf00      	nop
 8002aae:	e7fd      	b.n	8002aac <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d01f      	beq.n	8002af6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	61fb      	str	r3, [r7, #28]
 8002aba:	e012      	b.n	8002ae2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002abc:	68ba      	ldr	r2, [r7, #8]
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	4413      	add	r3, r2
 8002ac2:	7819      	ldrb	r1, [r3, #0]
 8002ac4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	4413      	add	r3, r2
 8002aca:	3334      	adds	r3, #52	@ 0x34
 8002acc:	460a      	mov	r2, r1
 8002ace:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	4413      	add	r3, r2
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d006      	beq.n	8002aea <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	3301      	adds	r3, #1
 8002ae0:	61fb      	str	r3, [r7, #28]
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	2b0f      	cmp	r3, #15
 8002ae6:	d9e9      	bls.n	8002abc <prvInitialiseNewTask+0x66>
 8002ae8:	e000      	b.n	8002aec <prvInitialiseNewTask+0x96>
			{
				break;
 8002aea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002af4:	e003      	b.n	8002afe <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b00:	2b37      	cmp	r3, #55	@ 0x37
 8002b02:	d901      	bls.n	8002b08 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b04:	2337      	movs	r3, #55	@ 0x37
 8002b06:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b0c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b12:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002b14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b16:	2200      	movs	r2, #0
 8002b18:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b1c:	3304      	adds	r3, #4
 8002b1e:	4618      	mov	r0, r3
 8002b20:	f7ff f96b 	bl	8001dfa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b26:	3318      	adds	r3, #24
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7ff f966 	bl	8001dfa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b30:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b36:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8002b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b42:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b46:	2200      	movs	r2, #0
 8002b48:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002b4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	68f9      	ldr	r1, [r7, #12]
 8002b56:	69b8      	ldr	r0, [r7, #24]
 8002b58:	f001 f93a 	bl	8003dd0 <pxPortInitialiseStack>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b60:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002b62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d002      	beq.n	8002b6e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b6e:	bf00      	nop
 8002b70:	3720      	adds	r7, #32
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
	...

08002b78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002b80:	f001 fa14 	bl	8003fac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002b84:	4b2d      	ldr	r3, [pc, #180]	@ (8002c3c <prvAddNewTaskToReadyList+0xc4>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	3301      	adds	r3, #1
 8002b8a:	4a2c      	ldr	r2, [pc, #176]	@ (8002c3c <prvAddNewTaskToReadyList+0xc4>)
 8002b8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002b8e:	4b2c      	ldr	r3, [pc, #176]	@ (8002c40 <prvAddNewTaskToReadyList+0xc8>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d109      	bne.n	8002baa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002b96:	4a2a      	ldr	r2, [pc, #168]	@ (8002c40 <prvAddNewTaskToReadyList+0xc8>)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b9c:	4b27      	ldr	r3, [pc, #156]	@ (8002c3c <prvAddNewTaskToReadyList+0xc4>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	2b01      	cmp	r3, #1
 8002ba2:	d110      	bne.n	8002bc6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002ba4:	f000 fc1c 	bl	80033e0 <prvInitialiseTaskLists>
 8002ba8:	e00d      	b.n	8002bc6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002baa:	4b26      	ldr	r3, [pc, #152]	@ (8002c44 <prvAddNewTaskToReadyList+0xcc>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d109      	bne.n	8002bc6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002bb2:	4b23      	ldr	r3, [pc, #140]	@ (8002c40 <prvAddNewTaskToReadyList+0xc8>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bbc:	429a      	cmp	r2, r3
 8002bbe:	d802      	bhi.n	8002bc6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002bc0:	4a1f      	ldr	r2, [pc, #124]	@ (8002c40 <prvAddNewTaskToReadyList+0xc8>)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002bc6:	4b20      	ldr	r3, [pc, #128]	@ (8002c48 <prvAddNewTaskToReadyList+0xd0>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	4a1e      	ldr	r2, [pc, #120]	@ (8002c48 <prvAddNewTaskToReadyList+0xd0>)
 8002bce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002bd0:	4b1d      	ldr	r3, [pc, #116]	@ (8002c48 <prvAddNewTaskToReadyList+0xd0>)
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bdc:	4b1b      	ldr	r3, [pc, #108]	@ (8002c4c <prvAddNewTaskToReadyList+0xd4>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d903      	bls.n	8002bec <prvAddNewTaskToReadyList+0x74>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002be8:	4a18      	ldr	r2, [pc, #96]	@ (8002c4c <prvAddNewTaskToReadyList+0xd4>)
 8002bea:	6013      	str	r3, [r2, #0]
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bf0:	4613      	mov	r3, r2
 8002bf2:	009b      	lsls	r3, r3, #2
 8002bf4:	4413      	add	r3, r2
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	4a15      	ldr	r2, [pc, #84]	@ (8002c50 <prvAddNewTaskToReadyList+0xd8>)
 8002bfa:	441a      	add	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3304      	adds	r3, #4
 8002c00:	4619      	mov	r1, r3
 8002c02:	4610      	mov	r0, r2
 8002c04:	f7ff f905 	bl	8001e12 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002c08:	f001 fa00 	bl	800400c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002c0c:	4b0d      	ldr	r3, [pc, #52]	@ (8002c44 <prvAddNewTaskToReadyList+0xcc>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00e      	beq.n	8002c32 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c14:	4b0a      	ldr	r3, [pc, #40]	@ (8002c40 <prvAddNewTaskToReadyList+0xc8>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c1e:	429a      	cmp	r2, r3
 8002c20:	d207      	bcs.n	8002c32 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002c22:	4b0c      	ldr	r3, [pc, #48]	@ (8002c54 <prvAddNewTaskToReadyList+0xdc>)
 8002c24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	f3bf 8f4f 	dsb	sy
 8002c2e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c32:	bf00      	nop
 8002c34:	3708      	adds	r7, #8
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}
 8002c3a:	bf00      	nop
 8002c3c:	20000c94 	.word	0x20000c94
 8002c40:	200007c0 	.word	0x200007c0
 8002c44:	20000ca0 	.word	0x20000ca0
 8002c48:	20000cb0 	.word	0x20000cb0
 8002c4c:	20000c9c 	.word	0x20000c9c
 8002c50:	200007c4 	.word	0x200007c4
 8002c54:	e000ed04 	.word	0xe000ed04

08002c58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b084      	sub	sp, #16
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002c60:	2300      	movs	r3, #0
 8002c62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d018      	beq.n	8002c9c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002c6a:	4b14      	ldr	r3, [pc, #80]	@ (8002cbc <vTaskDelay+0x64>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00b      	beq.n	8002c8a <vTaskDelay+0x32>
	__asm volatile
 8002c72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c76:	f383 8811 	msr	BASEPRI, r3
 8002c7a:	f3bf 8f6f 	isb	sy
 8002c7e:	f3bf 8f4f 	dsb	sy
 8002c82:	60bb      	str	r3, [r7, #8]
}
 8002c84:	bf00      	nop
 8002c86:	bf00      	nop
 8002c88:	e7fd      	b.n	8002c86 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002c8a:	f000 f883 	bl	8002d94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002c8e:	2100      	movs	r1, #0
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 fcf1 	bl	8003678 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002c96:	f000 f88b 	bl	8002db0 <xTaskResumeAll>
 8002c9a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d107      	bne.n	8002cb2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002ca2:	4b07      	ldr	r3, [pc, #28]	@ (8002cc0 <vTaskDelay+0x68>)
 8002ca4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	f3bf 8f4f 	dsb	sy
 8002cae:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002cb2:	bf00      	nop
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	20000cbc 	.word	0x20000cbc
 8002cc0:	e000ed04 	.word	0xe000ed04

08002cc4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08a      	sub	sp, #40	@ 0x28
 8002cc8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002cd2:	463a      	mov	r2, r7
 8002cd4:	1d39      	adds	r1, r7, #4
 8002cd6:	f107 0308 	add.w	r3, r7, #8
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff f83c 	bl	8001d58 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002ce0:	6839      	ldr	r1, [r7, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68ba      	ldr	r2, [r7, #8]
 8002ce6:	9202      	str	r2, [sp, #8]
 8002ce8:	9301      	str	r3, [sp, #4]
 8002cea:	2300      	movs	r3, #0
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	2300      	movs	r3, #0
 8002cf0:	460a      	mov	r2, r1
 8002cf2:	4922      	ldr	r1, [pc, #136]	@ (8002d7c <vTaskStartScheduler+0xb8>)
 8002cf4:	4822      	ldr	r0, [pc, #136]	@ (8002d80 <vTaskStartScheduler+0xbc>)
 8002cf6:	f7ff fe09 	bl	800290c <xTaskCreateStatic>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	4a21      	ldr	r2, [pc, #132]	@ (8002d84 <vTaskStartScheduler+0xc0>)
 8002cfe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002d00:	4b20      	ldr	r3, [pc, #128]	@ (8002d84 <vTaskStartScheduler+0xc0>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d002      	beq.n	8002d0e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	617b      	str	r3, [r7, #20]
 8002d0c:	e001      	b.n	8002d12 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d102      	bne.n	8002d1e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002d18:	f000 fd02 	bl	8003720 <xTimerCreateTimerTask>
 8002d1c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d116      	bne.n	8002d52 <vTaskStartScheduler+0x8e>
	__asm volatile
 8002d24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d28:	f383 8811 	msr	BASEPRI, r3
 8002d2c:	f3bf 8f6f 	isb	sy
 8002d30:	f3bf 8f4f 	dsb	sy
 8002d34:	613b      	str	r3, [r7, #16]
}
 8002d36:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002d38:	4b13      	ldr	r3, [pc, #76]	@ (8002d88 <vTaskStartScheduler+0xc4>)
 8002d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8002d3e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002d40:	4b12      	ldr	r3, [pc, #72]	@ (8002d8c <vTaskStartScheduler+0xc8>)
 8002d42:	2201      	movs	r2, #1
 8002d44:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002d46:	4b12      	ldr	r3, [pc, #72]	@ (8002d90 <vTaskStartScheduler+0xcc>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002d4c:	f001 f8bc 	bl	8003ec8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002d50:	e00f      	b.n	8002d72 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d58:	d10b      	bne.n	8002d72 <vTaskStartScheduler+0xae>
	__asm volatile
 8002d5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d5e:	f383 8811 	msr	BASEPRI, r3
 8002d62:	f3bf 8f6f 	isb	sy
 8002d66:	f3bf 8f4f 	dsb	sy
 8002d6a:	60fb      	str	r3, [r7, #12]
}
 8002d6c:	bf00      	nop
 8002d6e:	bf00      	nop
 8002d70:	e7fd      	b.n	8002d6e <vTaskStartScheduler+0xaa>
}
 8002d72:	bf00      	nop
 8002d74:	3718      	adds	r7, #24
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	08004620 	.word	0x08004620
 8002d80:	080033b1 	.word	0x080033b1
 8002d84:	20000cb8 	.word	0x20000cb8
 8002d88:	20000cb4 	.word	0x20000cb4
 8002d8c:	20000ca0 	.word	0x20000ca0
 8002d90:	20000c98 	.word	0x20000c98

08002d94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002d98:	4b04      	ldr	r3, [pc, #16]	@ (8002dac <vTaskSuspendAll+0x18>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	3301      	adds	r3, #1
 8002d9e:	4a03      	ldr	r2, [pc, #12]	@ (8002dac <vTaskSuspendAll+0x18>)
 8002da0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002da2:	bf00      	nop
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bc80      	pop	{r7}
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	20000cbc 	.word	0x20000cbc

08002db0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b084      	sub	sp, #16
 8002db4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002db6:	2300      	movs	r3, #0
 8002db8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002dbe:	4b42      	ldr	r3, [pc, #264]	@ (8002ec8 <xTaskResumeAll+0x118>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d10b      	bne.n	8002dde <xTaskResumeAll+0x2e>
	__asm volatile
 8002dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dca:	f383 8811 	msr	BASEPRI, r3
 8002dce:	f3bf 8f6f 	isb	sy
 8002dd2:	f3bf 8f4f 	dsb	sy
 8002dd6:	603b      	str	r3, [r7, #0]
}
 8002dd8:	bf00      	nop
 8002dda:	bf00      	nop
 8002ddc:	e7fd      	b.n	8002dda <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002dde:	f001 f8e5 	bl	8003fac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002de2:	4b39      	ldr	r3, [pc, #228]	@ (8002ec8 <xTaskResumeAll+0x118>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	3b01      	subs	r3, #1
 8002de8:	4a37      	ldr	r2, [pc, #220]	@ (8002ec8 <xTaskResumeAll+0x118>)
 8002dea:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002dec:	4b36      	ldr	r3, [pc, #216]	@ (8002ec8 <xTaskResumeAll+0x118>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d162      	bne.n	8002eba <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002df4:	4b35      	ldr	r3, [pc, #212]	@ (8002ecc <xTaskResumeAll+0x11c>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d05e      	beq.n	8002eba <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002dfc:	e02f      	b.n	8002e5e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002dfe:	4b34      	ldr	r3, [pc, #208]	@ (8002ed0 <xTaskResumeAll+0x120>)
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	68db      	ldr	r3, [r3, #12]
 8002e04:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	3318      	adds	r3, #24
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff f85c 	bl	8001ec8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	3304      	adds	r3, #4
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff f857 	bl	8001ec8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e1e:	4b2d      	ldr	r3, [pc, #180]	@ (8002ed4 <xTaskResumeAll+0x124>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d903      	bls.n	8002e2e <xTaskResumeAll+0x7e>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e2a:	4a2a      	ldr	r2, [pc, #168]	@ (8002ed4 <xTaskResumeAll+0x124>)
 8002e2c:	6013      	str	r3, [r2, #0]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e32:	4613      	mov	r3, r2
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	4413      	add	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4a27      	ldr	r2, [pc, #156]	@ (8002ed8 <xTaskResumeAll+0x128>)
 8002e3c:	441a      	add	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	3304      	adds	r3, #4
 8002e42:	4619      	mov	r1, r3
 8002e44:	4610      	mov	r0, r2
 8002e46:	f7fe ffe4 	bl	8001e12 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e4e:	4b23      	ldr	r3, [pc, #140]	@ (8002edc <xTaskResumeAll+0x12c>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e54:	429a      	cmp	r2, r3
 8002e56:	d302      	bcc.n	8002e5e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8002e58:	4b21      	ldr	r3, [pc, #132]	@ (8002ee0 <xTaskResumeAll+0x130>)
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002e5e:	4b1c      	ldr	r3, [pc, #112]	@ (8002ed0 <xTaskResumeAll+0x120>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1cb      	bne.n	8002dfe <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d001      	beq.n	8002e70 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002e6c:	f000 fb56 	bl	800351c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002e70:	4b1c      	ldr	r3, [pc, #112]	@ (8002ee4 <xTaskResumeAll+0x134>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d010      	beq.n	8002e9e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002e7c:	f000 f844 	bl	8002f08 <xTaskIncrementTick>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d002      	beq.n	8002e8c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8002e86:	4b16      	ldr	r3, [pc, #88]	@ (8002ee0 <xTaskResumeAll+0x130>)
 8002e88:	2201      	movs	r2, #1
 8002e8a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1f1      	bne.n	8002e7c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8002e98:	4b12      	ldr	r3, [pc, #72]	@ (8002ee4 <xTaskResumeAll+0x134>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002e9e:	4b10      	ldr	r3, [pc, #64]	@ (8002ee0 <xTaskResumeAll+0x130>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d009      	beq.n	8002eba <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002eaa:	4b0f      	ldr	r3, [pc, #60]	@ (8002ee8 <xTaskResumeAll+0x138>)
 8002eac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	f3bf 8f4f 	dsb	sy
 8002eb6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002eba:	f001 f8a7 	bl	800400c <vPortExitCritical>

	return xAlreadyYielded;
 8002ebe:	68bb      	ldr	r3, [r7, #8]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3710      	adds	r7, #16
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	20000cbc 	.word	0x20000cbc
 8002ecc:	20000c94 	.word	0x20000c94
 8002ed0:	20000c54 	.word	0x20000c54
 8002ed4:	20000c9c 	.word	0x20000c9c
 8002ed8:	200007c4 	.word	0x200007c4
 8002edc:	200007c0 	.word	0x200007c0
 8002ee0:	20000ca8 	.word	0x20000ca8
 8002ee4:	20000ca4 	.word	0x20000ca4
 8002ee8:	e000ed04 	.word	0xe000ed04

08002eec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002ef2:	4b04      	ldr	r3, [pc, #16]	@ (8002f04 <xTaskGetTickCount+0x18>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002ef8:	687b      	ldr	r3, [r7, #4]
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bc80      	pop	{r7}
 8002f02:	4770      	bx	lr
 8002f04:	20000c98 	.word	0x20000c98

08002f08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002f12:	4b4f      	ldr	r3, [pc, #316]	@ (8003050 <xTaskIncrementTick+0x148>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	f040 8090 	bne.w	800303c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002f1c:	4b4d      	ldr	r3, [pc, #308]	@ (8003054 <xTaskIncrementTick+0x14c>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	3301      	adds	r3, #1
 8002f22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002f24:	4a4b      	ldr	r2, [pc, #300]	@ (8003054 <xTaskIncrementTick+0x14c>)
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d121      	bne.n	8002f74 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002f30:	4b49      	ldr	r3, [pc, #292]	@ (8003058 <xTaskIncrementTick+0x150>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d00b      	beq.n	8002f52 <xTaskIncrementTick+0x4a>
	__asm volatile
 8002f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f3e:	f383 8811 	msr	BASEPRI, r3
 8002f42:	f3bf 8f6f 	isb	sy
 8002f46:	f3bf 8f4f 	dsb	sy
 8002f4a:	603b      	str	r3, [r7, #0]
}
 8002f4c:	bf00      	nop
 8002f4e:	bf00      	nop
 8002f50:	e7fd      	b.n	8002f4e <xTaskIncrementTick+0x46>
 8002f52:	4b41      	ldr	r3, [pc, #260]	@ (8003058 <xTaskIncrementTick+0x150>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	60fb      	str	r3, [r7, #12]
 8002f58:	4b40      	ldr	r3, [pc, #256]	@ (800305c <xTaskIncrementTick+0x154>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a3e      	ldr	r2, [pc, #248]	@ (8003058 <xTaskIncrementTick+0x150>)
 8002f5e:	6013      	str	r3, [r2, #0]
 8002f60:	4a3e      	ldr	r2, [pc, #248]	@ (800305c <xTaskIncrementTick+0x154>)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	6013      	str	r3, [r2, #0]
 8002f66:	4b3e      	ldr	r3, [pc, #248]	@ (8003060 <xTaskIncrementTick+0x158>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	4a3c      	ldr	r2, [pc, #240]	@ (8003060 <xTaskIncrementTick+0x158>)
 8002f6e:	6013      	str	r3, [r2, #0]
 8002f70:	f000 fad4 	bl	800351c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002f74:	4b3b      	ldr	r3, [pc, #236]	@ (8003064 <xTaskIncrementTick+0x15c>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	693a      	ldr	r2, [r7, #16]
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d349      	bcc.n	8003012 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f7e:	4b36      	ldr	r3, [pc, #216]	@ (8003058 <xTaskIncrementTick+0x150>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d104      	bne.n	8002f92 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f88:	4b36      	ldr	r3, [pc, #216]	@ (8003064 <xTaskIncrementTick+0x15c>)
 8002f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8002f8e:	601a      	str	r2, [r3, #0]
					break;
 8002f90:	e03f      	b.n	8003012 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f92:	4b31      	ldr	r3, [pc, #196]	@ (8003058 <xTaskIncrementTick+0x150>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d203      	bcs.n	8002fb2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002faa:	4a2e      	ldr	r2, [pc, #184]	@ (8003064 <xTaskIncrementTick+0x15c>)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002fb0:	e02f      	b.n	8003012 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	3304      	adds	r3, #4
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fe ff86 	bl	8001ec8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d004      	beq.n	8002fce <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	3318      	adds	r3, #24
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f7fe ff7d 	bl	8001ec8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fd2:	4b25      	ldr	r3, [pc, #148]	@ (8003068 <xTaskIncrementTick+0x160>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d903      	bls.n	8002fe2 <xTaskIncrementTick+0xda>
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fde:	4a22      	ldr	r2, [pc, #136]	@ (8003068 <xTaskIncrementTick+0x160>)
 8002fe0:	6013      	str	r3, [r2, #0]
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	4413      	add	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4a1f      	ldr	r2, [pc, #124]	@ (800306c <xTaskIncrementTick+0x164>)
 8002ff0:	441a      	add	r2, r3
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	3304      	adds	r3, #4
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	f7fe ff0a 	bl	8001e12 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003002:	4b1b      	ldr	r3, [pc, #108]	@ (8003070 <xTaskIncrementTick+0x168>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003008:	429a      	cmp	r2, r3
 800300a:	d3b8      	bcc.n	8002f7e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800300c:	2301      	movs	r3, #1
 800300e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003010:	e7b5      	b.n	8002f7e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003012:	4b17      	ldr	r3, [pc, #92]	@ (8003070 <xTaskIncrementTick+0x168>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003018:	4914      	ldr	r1, [pc, #80]	@ (800306c <xTaskIncrementTick+0x164>)
 800301a:	4613      	mov	r3, r2
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	4413      	add	r3, r2
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	440b      	add	r3, r1
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2b01      	cmp	r3, #1
 8003028:	d901      	bls.n	800302e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800302a:	2301      	movs	r3, #1
 800302c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800302e:	4b11      	ldr	r3, [pc, #68]	@ (8003074 <xTaskIncrementTick+0x16c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d007      	beq.n	8003046 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003036:	2301      	movs	r3, #1
 8003038:	617b      	str	r3, [r7, #20]
 800303a:	e004      	b.n	8003046 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800303c:	4b0e      	ldr	r3, [pc, #56]	@ (8003078 <xTaskIncrementTick+0x170>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	3301      	adds	r3, #1
 8003042:	4a0d      	ldr	r2, [pc, #52]	@ (8003078 <xTaskIncrementTick+0x170>)
 8003044:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003046:	697b      	ldr	r3, [r7, #20]
}
 8003048:	4618      	mov	r0, r3
 800304a:	3718      	adds	r7, #24
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	20000cbc 	.word	0x20000cbc
 8003054:	20000c98 	.word	0x20000c98
 8003058:	20000c4c 	.word	0x20000c4c
 800305c:	20000c50 	.word	0x20000c50
 8003060:	20000cac 	.word	0x20000cac
 8003064:	20000cb4 	.word	0x20000cb4
 8003068:	20000c9c 	.word	0x20000c9c
 800306c:	200007c4 	.word	0x200007c4
 8003070:	200007c0 	.word	0x200007c0
 8003074:	20000ca8 	.word	0x20000ca8
 8003078:	20000ca4 	.word	0x20000ca4

0800307c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003082:	4b28      	ldr	r3, [pc, #160]	@ (8003124 <vTaskSwitchContext+0xa8>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d003      	beq.n	8003092 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800308a:	4b27      	ldr	r3, [pc, #156]	@ (8003128 <vTaskSwitchContext+0xac>)
 800308c:	2201      	movs	r2, #1
 800308e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003090:	e042      	b.n	8003118 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003092:	4b25      	ldr	r3, [pc, #148]	@ (8003128 <vTaskSwitchContext+0xac>)
 8003094:	2200      	movs	r2, #0
 8003096:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003098:	4b24      	ldr	r3, [pc, #144]	@ (800312c <vTaskSwitchContext+0xb0>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	60fb      	str	r3, [r7, #12]
 800309e:	e011      	b.n	80030c4 <vTaskSwitchContext+0x48>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10b      	bne.n	80030be <vTaskSwitchContext+0x42>
	__asm volatile
 80030a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030aa:	f383 8811 	msr	BASEPRI, r3
 80030ae:	f3bf 8f6f 	isb	sy
 80030b2:	f3bf 8f4f 	dsb	sy
 80030b6:	607b      	str	r3, [r7, #4]
}
 80030b8:	bf00      	nop
 80030ba:	bf00      	nop
 80030bc:	e7fd      	b.n	80030ba <vTaskSwitchContext+0x3e>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	3b01      	subs	r3, #1
 80030c2:	60fb      	str	r3, [r7, #12]
 80030c4:	491a      	ldr	r1, [pc, #104]	@ (8003130 <vTaskSwitchContext+0xb4>)
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	4613      	mov	r3, r2
 80030ca:	009b      	lsls	r3, r3, #2
 80030cc:	4413      	add	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d0e3      	beq.n	80030a0 <vTaskSwitchContext+0x24>
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	4613      	mov	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	009b      	lsls	r3, r3, #2
 80030e2:	4a13      	ldr	r2, [pc, #76]	@ (8003130 <vTaskSwitchContext+0xb4>)
 80030e4:	4413      	add	r3, r2
 80030e6:	60bb      	str	r3, [r7, #8]
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	685a      	ldr	r2, [r3, #4]
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	605a      	str	r2, [r3, #4]
 80030f2:	68bb      	ldr	r3, [r7, #8]
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	3308      	adds	r3, #8
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d104      	bne.n	8003108 <vTaskSwitchContext+0x8c>
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	685a      	ldr	r2, [r3, #4]
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	605a      	str	r2, [r3, #4]
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	4a09      	ldr	r2, [pc, #36]	@ (8003134 <vTaskSwitchContext+0xb8>)
 8003110:	6013      	str	r3, [r2, #0]
 8003112:	4a06      	ldr	r2, [pc, #24]	@ (800312c <vTaskSwitchContext+0xb0>)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6013      	str	r3, [r2, #0]
}
 8003118:	bf00      	nop
 800311a:	3714      	adds	r7, #20
 800311c:	46bd      	mov	sp, r7
 800311e:	bc80      	pop	{r7}
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop
 8003124:	20000cbc 	.word	0x20000cbc
 8003128:	20000ca8 	.word	0x20000ca8
 800312c:	20000c9c 	.word	0x20000c9c
 8003130:	200007c4 	.word	0x200007c4
 8003134:	200007c0 	.word	0x200007c0

08003138 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10b      	bne.n	8003160 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003148:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800314c:	f383 8811 	msr	BASEPRI, r3
 8003150:	f3bf 8f6f 	isb	sy
 8003154:	f3bf 8f4f 	dsb	sy
 8003158:	60fb      	str	r3, [r7, #12]
}
 800315a:	bf00      	nop
 800315c:	bf00      	nop
 800315e:	e7fd      	b.n	800315c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003160:	4b07      	ldr	r3, [pc, #28]	@ (8003180 <vTaskPlaceOnEventList+0x48>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	3318      	adds	r3, #24
 8003166:	4619      	mov	r1, r3
 8003168:	6878      	ldr	r0, [r7, #4]
 800316a:	f7fe fe75 	bl	8001e58 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800316e:	2101      	movs	r1, #1
 8003170:	6838      	ldr	r0, [r7, #0]
 8003172:	f000 fa81 	bl	8003678 <prvAddCurrentTaskToDelayedList>
}
 8003176:	bf00      	nop
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	200007c0 	.word	0x200007c0

08003184 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	60f8      	str	r0, [r7, #12]
 800318c:	60b9      	str	r1, [r7, #8]
 800318e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10b      	bne.n	80031ae <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003196:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800319a:	f383 8811 	msr	BASEPRI, r3
 800319e:	f3bf 8f6f 	isb	sy
 80031a2:	f3bf 8f4f 	dsb	sy
 80031a6:	617b      	str	r3, [r7, #20]
}
 80031a8:	bf00      	nop
 80031aa:	bf00      	nop
 80031ac:	e7fd      	b.n	80031aa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80031ae:	4b0a      	ldr	r3, [pc, #40]	@ (80031d8 <vTaskPlaceOnEventListRestricted+0x54>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	3318      	adds	r3, #24
 80031b4:	4619      	mov	r1, r3
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f7fe fe2b 	bl	8001e12 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d002      	beq.n	80031c8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80031c2:	f04f 33ff 	mov.w	r3, #4294967295
 80031c6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80031c8:	6879      	ldr	r1, [r7, #4]
 80031ca:	68b8      	ldr	r0, [r7, #8]
 80031cc:	f000 fa54 	bl	8003678 <prvAddCurrentTaskToDelayedList>
	}
 80031d0:	bf00      	nop
 80031d2:	3718      	adds	r7, #24
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	200007c0 	.word	0x200007c0

080031dc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b086      	sub	sp, #24
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	68db      	ldr	r3, [r3, #12]
 80031ea:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10b      	bne.n	800320a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80031f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031f6:	f383 8811 	msr	BASEPRI, r3
 80031fa:	f3bf 8f6f 	isb	sy
 80031fe:	f3bf 8f4f 	dsb	sy
 8003202:	60fb      	str	r3, [r7, #12]
}
 8003204:	bf00      	nop
 8003206:	bf00      	nop
 8003208:	e7fd      	b.n	8003206 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	3318      	adds	r3, #24
 800320e:	4618      	mov	r0, r3
 8003210:	f7fe fe5a 	bl	8001ec8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003214:	4b1d      	ldr	r3, [pc, #116]	@ (800328c <xTaskRemoveFromEventList+0xb0>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d11d      	bne.n	8003258 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	3304      	adds	r3, #4
 8003220:	4618      	mov	r0, r3
 8003222:	f7fe fe51 	bl	8001ec8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800322a:	4b19      	ldr	r3, [pc, #100]	@ (8003290 <xTaskRemoveFromEventList+0xb4>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	429a      	cmp	r2, r3
 8003230:	d903      	bls.n	800323a <xTaskRemoveFromEventList+0x5e>
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003236:	4a16      	ldr	r2, [pc, #88]	@ (8003290 <xTaskRemoveFromEventList+0xb4>)
 8003238:	6013      	str	r3, [r2, #0]
 800323a:	693b      	ldr	r3, [r7, #16]
 800323c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800323e:	4613      	mov	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	4a13      	ldr	r2, [pc, #76]	@ (8003294 <xTaskRemoveFromEventList+0xb8>)
 8003248:	441a      	add	r2, r3
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	3304      	adds	r3, #4
 800324e:	4619      	mov	r1, r3
 8003250:	4610      	mov	r0, r2
 8003252:	f7fe fdde 	bl	8001e12 <vListInsertEnd>
 8003256:	e005      	b.n	8003264 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	3318      	adds	r3, #24
 800325c:	4619      	mov	r1, r3
 800325e:	480e      	ldr	r0, [pc, #56]	@ (8003298 <xTaskRemoveFromEventList+0xbc>)
 8003260:	f7fe fdd7 	bl	8001e12 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003268:	4b0c      	ldr	r3, [pc, #48]	@ (800329c <xTaskRemoveFromEventList+0xc0>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800326e:	429a      	cmp	r2, r3
 8003270:	d905      	bls.n	800327e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003272:	2301      	movs	r3, #1
 8003274:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003276:	4b0a      	ldr	r3, [pc, #40]	@ (80032a0 <xTaskRemoveFromEventList+0xc4>)
 8003278:	2201      	movs	r2, #1
 800327a:	601a      	str	r2, [r3, #0]
 800327c:	e001      	b.n	8003282 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800327e:	2300      	movs	r3, #0
 8003280:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003282:	697b      	ldr	r3, [r7, #20]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3718      	adds	r7, #24
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	20000cbc 	.word	0x20000cbc
 8003290:	20000c9c 	.word	0x20000c9c
 8003294:	200007c4 	.word	0x200007c4
 8003298:	20000c54 	.word	0x20000c54
 800329c:	200007c0 	.word	0x200007c0
 80032a0:	20000ca8 	.word	0x20000ca8

080032a4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80032ac:	4b06      	ldr	r3, [pc, #24]	@ (80032c8 <vTaskInternalSetTimeOutState+0x24>)
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80032b4:	4b05      	ldr	r3, [pc, #20]	@ (80032cc <vTaskInternalSetTimeOutState+0x28>)
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	605a      	str	r2, [r3, #4]
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bc80      	pop	{r7}
 80032c4:	4770      	bx	lr
 80032c6:	bf00      	nop
 80032c8:	20000cac 	.word	0x20000cac
 80032cc:	20000c98 	.word	0x20000c98

080032d0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b088      	sub	sp, #32
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10b      	bne.n	80032f8 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80032e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032e4:	f383 8811 	msr	BASEPRI, r3
 80032e8:	f3bf 8f6f 	isb	sy
 80032ec:	f3bf 8f4f 	dsb	sy
 80032f0:	613b      	str	r3, [r7, #16]
}
 80032f2:	bf00      	nop
 80032f4:	bf00      	nop
 80032f6:	e7fd      	b.n	80032f4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d10b      	bne.n	8003316 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80032fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003302:	f383 8811 	msr	BASEPRI, r3
 8003306:	f3bf 8f6f 	isb	sy
 800330a:	f3bf 8f4f 	dsb	sy
 800330e:	60fb      	str	r3, [r7, #12]
}
 8003310:	bf00      	nop
 8003312:	bf00      	nop
 8003314:	e7fd      	b.n	8003312 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8003316:	f000 fe49 	bl	8003fac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800331a:	4b1d      	ldr	r3, [pc, #116]	@ (8003390 <xTaskCheckForTimeOut+0xc0>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003332:	d102      	bne.n	800333a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003334:	2300      	movs	r3, #0
 8003336:	61fb      	str	r3, [r7, #28]
 8003338:	e023      	b.n	8003382 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	4b15      	ldr	r3, [pc, #84]	@ (8003394 <xTaskCheckForTimeOut+0xc4>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	429a      	cmp	r2, r3
 8003344:	d007      	beq.n	8003356 <xTaskCheckForTimeOut+0x86>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	69ba      	ldr	r2, [r7, #24]
 800334c:	429a      	cmp	r2, r3
 800334e:	d302      	bcc.n	8003356 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003350:	2301      	movs	r3, #1
 8003352:	61fb      	str	r3, [r7, #28]
 8003354:	e015      	b.n	8003382 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	429a      	cmp	r2, r3
 800335e:	d20b      	bcs.n	8003378 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	1ad2      	subs	r2, r2, r3
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f7ff ff99 	bl	80032a4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003372:	2300      	movs	r3, #0
 8003374:	61fb      	str	r3, [r7, #28]
 8003376:	e004      	b.n	8003382 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	2200      	movs	r2, #0
 800337c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800337e:	2301      	movs	r3, #1
 8003380:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003382:	f000 fe43 	bl	800400c <vPortExitCritical>

	return xReturn;
 8003386:	69fb      	ldr	r3, [r7, #28]
}
 8003388:	4618      	mov	r0, r3
 800338a:	3720      	adds	r7, #32
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	20000c98 	.word	0x20000c98
 8003394:	20000cac 	.word	0x20000cac

08003398 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003398:	b480      	push	{r7}
 800339a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800339c:	4b03      	ldr	r3, [pc, #12]	@ (80033ac <vTaskMissedYield+0x14>)
 800339e:	2201      	movs	r2, #1
 80033a0:	601a      	str	r2, [r3, #0]
}
 80033a2:	bf00      	nop
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bc80      	pop	{r7}
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	20000ca8 	.word	0x20000ca8

080033b0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b082      	sub	sp, #8
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80033b8:	f000 f852 	bl	8003460 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80033bc:	4b06      	ldr	r3, [pc, #24]	@ (80033d8 <prvIdleTask+0x28>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d9f9      	bls.n	80033b8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80033c4:	4b05      	ldr	r3, [pc, #20]	@ (80033dc <prvIdleTask+0x2c>)
 80033c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	f3bf 8f4f 	dsb	sy
 80033d0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80033d4:	e7f0      	b.n	80033b8 <prvIdleTask+0x8>
 80033d6:	bf00      	nop
 80033d8:	200007c4 	.word	0x200007c4
 80033dc:	e000ed04 	.word	0xe000ed04

080033e0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b082      	sub	sp, #8
 80033e4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80033e6:	2300      	movs	r3, #0
 80033e8:	607b      	str	r3, [r7, #4]
 80033ea:	e00c      	b.n	8003406 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	4613      	mov	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	4a12      	ldr	r2, [pc, #72]	@ (8003440 <prvInitialiseTaskLists+0x60>)
 80033f8:	4413      	add	r3, r2
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fe fcde 	bl	8001dbc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	3301      	adds	r3, #1
 8003404:	607b      	str	r3, [r7, #4]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2b37      	cmp	r3, #55	@ 0x37
 800340a:	d9ef      	bls.n	80033ec <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800340c:	480d      	ldr	r0, [pc, #52]	@ (8003444 <prvInitialiseTaskLists+0x64>)
 800340e:	f7fe fcd5 	bl	8001dbc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003412:	480d      	ldr	r0, [pc, #52]	@ (8003448 <prvInitialiseTaskLists+0x68>)
 8003414:	f7fe fcd2 	bl	8001dbc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003418:	480c      	ldr	r0, [pc, #48]	@ (800344c <prvInitialiseTaskLists+0x6c>)
 800341a:	f7fe fccf 	bl	8001dbc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800341e:	480c      	ldr	r0, [pc, #48]	@ (8003450 <prvInitialiseTaskLists+0x70>)
 8003420:	f7fe fccc 	bl	8001dbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003424:	480b      	ldr	r0, [pc, #44]	@ (8003454 <prvInitialiseTaskLists+0x74>)
 8003426:	f7fe fcc9 	bl	8001dbc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800342a:	4b0b      	ldr	r3, [pc, #44]	@ (8003458 <prvInitialiseTaskLists+0x78>)
 800342c:	4a05      	ldr	r2, [pc, #20]	@ (8003444 <prvInitialiseTaskLists+0x64>)
 800342e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003430:	4b0a      	ldr	r3, [pc, #40]	@ (800345c <prvInitialiseTaskLists+0x7c>)
 8003432:	4a05      	ldr	r2, [pc, #20]	@ (8003448 <prvInitialiseTaskLists+0x68>)
 8003434:	601a      	str	r2, [r3, #0]
}
 8003436:	bf00      	nop
 8003438:	3708      	adds	r7, #8
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	200007c4 	.word	0x200007c4
 8003444:	20000c24 	.word	0x20000c24
 8003448:	20000c38 	.word	0x20000c38
 800344c:	20000c54 	.word	0x20000c54
 8003450:	20000c68 	.word	0x20000c68
 8003454:	20000c80 	.word	0x20000c80
 8003458:	20000c4c 	.word	0x20000c4c
 800345c:	20000c50 	.word	0x20000c50

08003460 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003466:	e019      	b.n	800349c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003468:	f000 fda0 	bl	8003fac <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800346c:	4b10      	ldr	r3, [pc, #64]	@ (80034b0 <prvCheckTasksWaitingTermination+0x50>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	3304      	adds	r3, #4
 8003478:	4618      	mov	r0, r3
 800347a:	f7fe fd25 	bl	8001ec8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800347e:	4b0d      	ldr	r3, [pc, #52]	@ (80034b4 <prvCheckTasksWaitingTermination+0x54>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	3b01      	subs	r3, #1
 8003484:	4a0b      	ldr	r2, [pc, #44]	@ (80034b4 <prvCheckTasksWaitingTermination+0x54>)
 8003486:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003488:	4b0b      	ldr	r3, [pc, #44]	@ (80034b8 <prvCheckTasksWaitingTermination+0x58>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	3b01      	subs	r3, #1
 800348e:	4a0a      	ldr	r2, [pc, #40]	@ (80034b8 <prvCheckTasksWaitingTermination+0x58>)
 8003490:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003492:	f000 fdbb 	bl	800400c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f810 	bl	80034bc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800349c:	4b06      	ldr	r3, [pc, #24]	@ (80034b8 <prvCheckTasksWaitingTermination+0x58>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1e1      	bne.n	8003468 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80034a4:	bf00      	nop
 80034a6:	bf00      	nop
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	20000c68 	.word	0x20000c68
 80034b4:	20000c94 	.word	0x20000c94
 80034b8:	20000c7c 	.word	0x20000c7c

080034bc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b084      	sub	sp, #16
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d108      	bne.n	80034e0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 ff3a 	bl	800434c <vPortFree>
				vPortFree( pxTCB );
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 ff37 	bl	800434c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80034de:	e019      	b.n	8003514 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d103      	bne.n	80034f2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 ff2e 	bl	800434c <vPortFree>
	}
 80034f0:	e010      	b.n	8003514 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d00b      	beq.n	8003514 <prvDeleteTCB+0x58>
	__asm volatile
 80034fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003500:	f383 8811 	msr	BASEPRI, r3
 8003504:	f3bf 8f6f 	isb	sy
 8003508:	f3bf 8f4f 	dsb	sy
 800350c:	60fb      	str	r3, [r7, #12]
}
 800350e:	bf00      	nop
 8003510:	bf00      	nop
 8003512:	e7fd      	b.n	8003510 <prvDeleteTCB+0x54>
	}
 8003514:	bf00      	nop
 8003516:	3710      	adds	r7, #16
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003522:	4b0c      	ldr	r3, [pc, #48]	@ (8003554 <prvResetNextTaskUnblockTime+0x38>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d104      	bne.n	8003536 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800352c:	4b0a      	ldr	r3, [pc, #40]	@ (8003558 <prvResetNextTaskUnblockTime+0x3c>)
 800352e:	f04f 32ff 	mov.w	r2, #4294967295
 8003532:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003534:	e008      	b.n	8003548 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003536:	4b07      	ldr	r3, [pc, #28]	@ (8003554 <prvResetNextTaskUnblockTime+0x38>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	4a04      	ldr	r2, [pc, #16]	@ (8003558 <prvResetNextTaskUnblockTime+0x3c>)
 8003546:	6013      	str	r3, [r2, #0]
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	bc80      	pop	{r7}
 8003550:	4770      	bx	lr
 8003552:	bf00      	nop
 8003554:	20000c4c 	.word	0x20000c4c
 8003558:	20000cb4 	.word	0x20000cb4

0800355c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003562:	4b0b      	ldr	r3, [pc, #44]	@ (8003590 <xTaskGetSchedulerState+0x34>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d102      	bne.n	8003570 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800356a:	2301      	movs	r3, #1
 800356c:	607b      	str	r3, [r7, #4]
 800356e:	e008      	b.n	8003582 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003570:	4b08      	ldr	r3, [pc, #32]	@ (8003594 <xTaskGetSchedulerState+0x38>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d102      	bne.n	800357e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003578:	2302      	movs	r3, #2
 800357a:	607b      	str	r3, [r7, #4]
 800357c:	e001      	b.n	8003582 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800357e:	2300      	movs	r3, #0
 8003580:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003582:	687b      	ldr	r3, [r7, #4]
	}
 8003584:	4618      	mov	r0, r3
 8003586:	370c      	adds	r7, #12
 8003588:	46bd      	mov	sp, r7
 800358a:	bc80      	pop	{r7}
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	20000ca0 	.word	0x20000ca0
 8003594:	20000cbc 	.word	0x20000cbc

08003598 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003598:	b580      	push	{r7, lr}
 800359a:	b086      	sub	sp, #24
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80035a4:	2300      	movs	r3, #0
 80035a6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d058      	beq.n	8003660 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80035ae:	4b2f      	ldr	r3, [pc, #188]	@ (800366c <xTaskPriorityDisinherit+0xd4>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d00b      	beq.n	80035d0 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80035b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035bc:	f383 8811 	msr	BASEPRI, r3
 80035c0:	f3bf 8f6f 	isb	sy
 80035c4:	f3bf 8f4f 	dsb	sy
 80035c8:	60fb      	str	r3, [r7, #12]
}
 80035ca:	bf00      	nop
 80035cc:	bf00      	nop
 80035ce:	e7fd      	b.n	80035cc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d10b      	bne.n	80035f0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80035d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035dc:	f383 8811 	msr	BASEPRI, r3
 80035e0:	f3bf 8f6f 	isb	sy
 80035e4:	f3bf 8f4f 	dsb	sy
 80035e8:	60bb      	str	r3, [r7, #8]
}
 80035ea:	bf00      	nop
 80035ec:	bf00      	nop
 80035ee:	e7fd      	b.n	80035ec <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035f4:	1e5a      	subs	r2, r3, #1
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003602:	429a      	cmp	r2, r3
 8003604:	d02c      	beq.n	8003660 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800360a:	2b00      	cmp	r3, #0
 800360c:	d128      	bne.n	8003660 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	3304      	adds	r3, #4
 8003612:	4618      	mov	r0, r3
 8003614:	f7fe fc58 	bl	8001ec8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003624:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003630:	4b0f      	ldr	r3, [pc, #60]	@ (8003670 <xTaskPriorityDisinherit+0xd8>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	429a      	cmp	r2, r3
 8003636:	d903      	bls.n	8003640 <xTaskPriorityDisinherit+0xa8>
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800363c:	4a0c      	ldr	r2, [pc, #48]	@ (8003670 <xTaskPriorityDisinherit+0xd8>)
 800363e:	6013      	str	r3, [r2, #0]
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003644:	4613      	mov	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4a09      	ldr	r2, [pc, #36]	@ (8003674 <xTaskPriorityDisinherit+0xdc>)
 800364e:	441a      	add	r2, r3
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	3304      	adds	r3, #4
 8003654:	4619      	mov	r1, r3
 8003656:	4610      	mov	r0, r2
 8003658:	f7fe fbdb 	bl	8001e12 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800365c:	2301      	movs	r3, #1
 800365e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003660:	697b      	ldr	r3, [r7, #20]
	}
 8003662:	4618      	mov	r0, r3
 8003664:	3718      	adds	r7, #24
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	200007c0 	.word	0x200007c0
 8003670:	20000c9c 	.word	0x20000c9c
 8003674:	200007c4 	.word	0x200007c4

08003678 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003682:	4b21      	ldr	r3, [pc, #132]	@ (8003708 <prvAddCurrentTaskToDelayedList+0x90>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003688:	4b20      	ldr	r3, [pc, #128]	@ (800370c <prvAddCurrentTaskToDelayedList+0x94>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	3304      	adds	r3, #4
 800368e:	4618      	mov	r0, r3
 8003690:	f7fe fc1a 	bl	8001ec8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369a:	d10a      	bne.n	80036b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d007      	beq.n	80036b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80036a2:	4b1a      	ldr	r3, [pc, #104]	@ (800370c <prvAddCurrentTaskToDelayedList+0x94>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	3304      	adds	r3, #4
 80036a8:	4619      	mov	r1, r3
 80036aa:	4819      	ldr	r0, [pc, #100]	@ (8003710 <prvAddCurrentTaskToDelayedList+0x98>)
 80036ac:	f7fe fbb1 	bl	8001e12 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80036b0:	e026      	b.n	8003700 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	4413      	add	r3, r2
 80036b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80036ba:	4b14      	ldr	r3, [pc, #80]	@ (800370c <prvAddCurrentTaskToDelayedList+0x94>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68ba      	ldr	r2, [r7, #8]
 80036c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d209      	bcs.n	80036de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80036ca:	4b12      	ldr	r3, [pc, #72]	@ (8003714 <prvAddCurrentTaskToDelayedList+0x9c>)
 80036cc:	681a      	ldr	r2, [r3, #0]
 80036ce:	4b0f      	ldr	r3, [pc, #60]	@ (800370c <prvAddCurrentTaskToDelayedList+0x94>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	3304      	adds	r3, #4
 80036d4:	4619      	mov	r1, r3
 80036d6:	4610      	mov	r0, r2
 80036d8:	f7fe fbbe 	bl	8001e58 <vListInsert>
}
 80036dc:	e010      	b.n	8003700 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80036de:	4b0e      	ldr	r3, [pc, #56]	@ (8003718 <prvAddCurrentTaskToDelayedList+0xa0>)
 80036e0:	681a      	ldr	r2, [r3, #0]
 80036e2:	4b0a      	ldr	r3, [pc, #40]	@ (800370c <prvAddCurrentTaskToDelayedList+0x94>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	3304      	adds	r3, #4
 80036e8:	4619      	mov	r1, r3
 80036ea:	4610      	mov	r0, r2
 80036ec:	f7fe fbb4 	bl	8001e58 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80036f0:	4b0a      	ldr	r3, [pc, #40]	@ (800371c <prvAddCurrentTaskToDelayedList+0xa4>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	68ba      	ldr	r2, [r7, #8]
 80036f6:	429a      	cmp	r2, r3
 80036f8:	d202      	bcs.n	8003700 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80036fa:	4a08      	ldr	r2, [pc, #32]	@ (800371c <prvAddCurrentTaskToDelayedList+0xa4>)
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	6013      	str	r3, [r2, #0]
}
 8003700:	bf00      	nop
 8003702:	3710      	adds	r7, #16
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	20000c98 	.word	0x20000c98
 800370c:	200007c0 	.word	0x200007c0
 8003710:	20000c80 	.word	0x20000c80
 8003714:	20000c50 	.word	0x20000c50
 8003718:	20000c4c 	.word	0x20000c4c
 800371c:	20000cb4 	.word	0x20000cb4

08003720 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b08a      	sub	sp, #40	@ 0x28
 8003724:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003726:	2300      	movs	r3, #0
 8003728:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800372a:	f000 fb11 	bl	8003d50 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800372e:	4b1d      	ldr	r3, [pc, #116]	@ (80037a4 <xTimerCreateTimerTask+0x84>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d021      	beq.n	800377a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003736:	2300      	movs	r3, #0
 8003738:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800373a:	2300      	movs	r3, #0
 800373c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800373e:	1d3a      	adds	r2, r7, #4
 8003740:	f107 0108 	add.w	r1, r7, #8
 8003744:	f107 030c 	add.w	r3, r7, #12
 8003748:	4618      	mov	r0, r3
 800374a:	f7fe fb1d 	bl	8001d88 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	68fa      	ldr	r2, [r7, #12]
 8003754:	9202      	str	r2, [sp, #8]
 8003756:	9301      	str	r3, [sp, #4]
 8003758:	2302      	movs	r3, #2
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	2300      	movs	r3, #0
 800375e:	460a      	mov	r2, r1
 8003760:	4911      	ldr	r1, [pc, #68]	@ (80037a8 <xTimerCreateTimerTask+0x88>)
 8003762:	4812      	ldr	r0, [pc, #72]	@ (80037ac <xTimerCreateTimerTask+0x8c>)
 8003764:	f7ff f8d2 	bl	800290c <xTaskCreateStatic>
 8003768:	4603      	mov	r3, r0
 800376a:	4a11      	ldr	r2, [pc, #68]	@ (80037b0 <xTimerCreateTimerTask+0x90>)
 800376c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800376e:	4b10      	ldr	r3, [pc, #64]	@ (80037b0 <xTimerCreateTimerTask+0x90>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003776:	2301      	movs	r3, #1
 8003778:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10b      	bne.n	8003798 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8003780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003784:	f383 8811 	msr	BASEPRI, r3
 8003788:	f3bf 8f6f 	isb	sy
 800378c:	f3bf 8f4f 	dsb	sy
 8003790:	613b      	str	r3, [r7, #16]
}
 8003792:	bf00      	nop
 8003794:	bf00      	nop
 8003796:	e7fd      	b.n	8003794 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003798:	697b      	ldr	r3, [r7, #20]
}
 800379a:	4618      	mov	r0, r3
 800379c:	3718      	adds	r7, #24
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	20000cf0 	.word	0x20000cf0
 80037a8:	08004628 	.word	0x08004628
 80037ac:	080038ed 	.word	0x080038ed
 80037b0:	20000cf4 	.word	0x20000cf4

080037b4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b08a      	sub	sp, #40	@ 0x28
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
 80037c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80037c2:	2300      	movs	r3, #0
 80037c4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10b      	bne.n	80037e4 <xTimerGenericCommand+0x30>
	__asm volatile
 80037cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037d0:	f383 8811 	msr	BASEPRI, r3
 80037d4:	f3bf 8f6f 	isb	sy
 80037d8:	f3bf 8f4f 	dsb	sy
 80037dc:	623b      	str	r3, [r7, #32]
}
 80037de:	bf00      	nop
 80037e0:	bf00      	nop
 80037e2:	e7fd      	b.n	80037e0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80037e4:	4b19      	ldr	r3, [pc, #100]	@ (800384c <xTimerGenericCommand+0x98>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d02a      	beq.n	8003842 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	2b05      	cmp	r3, #5
 80037fc:	dc18      	bgt.n	8003830 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80037fe:	f7ff fead 	bl	800355c <xTaskGetSchedulerState>
 8003802:	4603      	mov	r3, r0
 8003804:	2b02      	cmp	r3, #2
 8003806:	d109      	bne.n	800381c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003808:	4b10      	ldr	r3, [pc, #64]	@ (800384c <xTimerGenericCommand+0x98>)
 800380a:	6818      	ldr	r0, [r3, #0]
 800380c:	f107 0110 	add.w	r1, r7, #16
 8003810:	2300      	movs	r3, #0
 8003812:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003814:	f7fe fc8c 	bl	8002130 <xQueueGenericSend>
 8003818:	6278      	str	r0, [r7, #36]	@ 0x24
 800381a:	e012      	b.n	8003842 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800381c:	4b0b      	ldr	r3, [pc, #44]	@ (800384c <xTimerGenericCommand+0x98>)
 800381e:	6818      	ldr	r0, [r3, #0]
 8003820:	f107 0110 	add.w	r1, r7, #16
 8003824:	2300      	movs	r3, #0
 8003826:	2200      	movs	r2, #0
 8003828:	f7fe fc82 	bl	8002130 <xQueueGenericSend>
 800382c:	6278      	str	r0, [r7, #36]	@ 0x24
 800382e:	e008      	b.n	8003842 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003830:	4b06      	ldr	r3, [pc, #24]	@ (800384c <xTimerGenericCommand+0x98>)
 8003832:	6818      	ldr	r0, [r3, #0]
 8003834:	f107 0110 	add.w	r1, r7, #16
 8003838:	2300      	movs	r3, #0
 800383a:	683a      	ldr	r2, [r7, #0]
 800383c:	f7fe fd7a 	bl	8002334 <xQueueGenericSendFromISR>
 8003840:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003844:	4618      	mov	r0, r3
 8003846:	3728      	adds	r7, #40	@ 0x28
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	20000cf0 	.word	0x20000cf0

08003850 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b088      	sub	sp, #32
 8003854:	af02      	add	r7, sp, #8
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800385a:	4b23      	ldr	r3, [pc, #140]	@ (80038e8 <prvProcessExpiredTimer+0x98>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	3304      	adds	r3, #4
 8003868:	4618      	mov	r0, r3
 800386a:	f7fe fb2d 	bl	8001ec8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003874:	f003 0304 	and.w	r3, r3, #4
 8003878:	2b00      	cmp	r3, #0
 800387a:	d023      	beq.n	80038c4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	699a      	ldr	r2, [r3, #24]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	18d1      	adds	r1, r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	6978      	ldr	r0, [r7, #20]
 800388a:	f000 f8d3 	bl	8003a34 <prvInsertTimerInActiveList>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d020      	beq.n	80038d6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003894:	2300      	movs	r3, #0
 8003896:	9300      	str	r3, [sp, #0]
 8003898:	2300      	movs	r3, #0
 800389a:	687a      	ldr	r2, [r7, #4]
 800389c:	2100      	movs	r1, #0
 800389e:	6978      	ldr	r0, [r7, #20]
 80038a0:	f7ff ff88 	bl	80037b4 <xTimerGenericCommand>
 80038a4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d114      	bne.n	80038d6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 80038ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038b0:	f383 8811 	msr	BASEPRI, r3
 80038b4:	f3bf 8f6f 	isb	sy
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	60fb      	str	r3, [r7, #12]
}
 80038be:	bf00      	nop
 80038c0:	bf00      	nop
 80038c2:	e7fd      	b.n	80038c0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80038ca:	f023 0301 	bic.w	r3, r3, #1
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	6978      	ldr	r0, [r7, #20]
 80038dc:	4798      	blx	r3
}
 80038de:	bf00      	nop
 80038e0:	3718      	adds	r7, #24
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
 80038e6:	bf00      	nop
 80038e8:	20000ce8 	.word	0x20000ce8

080038ec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80038f4:	f107 0308 	add.w	r3, r7, #8
 80038f8:	4618      	mov	r0, r3
 80038fa:	f000 f859 	bl	80039b0 <prvGetNextExpireTime>
 80038fe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	4619      	mov	r1, r3
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 f805 	bl	8003914 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800390a:	f000 f8d5 	bl	8003ab8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800390e:	bf00      	nop
 8003910:	e7f0      	b.n	80038f4 <prvTimerTask+0x8>
	...

08003914 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
 800391c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800391e:	f7ff fa39 	bl	8002d94 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003922:	f107 0308 	add.w	r3, r7, #8
 8003926:	4618      	mov	r0, r3
 8003928:	f000 f864 	bl	80039f4 <prvSampleTimeNow>
 800392c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d130      	bne.n	8003996 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10a      	bne.n	8003950 <prvProcessTimerOrBlockTask+0x3c>
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	429a      	cmp	r2, r3
 8003940:	d806      	bhi.n	8003950 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003942:	f7ff fa35 	bl	8002db0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003946:	68f9      	ldr	r1, [r7, #12]
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	f7ff ff81 	bl	8003850 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800394e:	e024      	b.n	800399a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d008      	beq.n	8003968 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003956:	4b13      	ldr	r3, [pc, #76]	@ (80039a4 <prvProcessTimerOrBlockTask+0x90>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d101      	bne.n	8003964 <prvProcessTimerOrBlockTask+0x50>
 8003960:	2301      	movs	r3, #1
 8003962:	e000      	b.n	8003966 <prvProcessTimerOrBlockTask+0x52>
 8003964:	2300      	movs	r3, #0
 8003966:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003968:	4b0f      	ldr	r3, [pc, #60]	@ (80039a8 <prvProcessTimerOrBlockTask+0x94>)
 800396a:	6818      	ldr	r0, [r3, #0]
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	683a      	ldr	r2, [r7, #0]
 8003974:	4619      	mov	r1, r3
 8003976:	f7fe ff95 	bl	80028a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800397a:	f7ff fa19 	bl	8002db0 <xTaskResumeAll>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d10a      	bne.n	800399a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003984:	4b09      	ldr	r3, [pc, #36]	@ (80039ac <prvProcessTimerOrBlockTask+0x98>)
 8003986:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	f3bf 8f4f 	dsb	sy
 8003990:	f3bf 8f6f 	isb	sy
}
 8003994:	e001      	b.n	800399a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003996:	f7ff fa0b 	bl	8002db0 <xTaskResumeAll>
}
 800399a:	bf00      	nop
 800399c:	3710      	adds	r7, #16
 800399e:	46bd      	mov	sp, r7
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	20000cec 	.word	0x20000cec
 80039a8:	20000cf0 	.word	0x20000cf0
 80039ac:	e000ed04 	.word	0xe000ed04

080039b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80039b0:	b480      	push	{r7}
 80039b2:	b085      	sub	sp, #20
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80039b8:	4b0d      	ldr	r3, [pc, #52]	@ (80039f0 <prvGetNextExpireTime+0x40>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d101      	bne.n	80039c6 <prvGetNextExpireTime+0x16>
 80039c2:	2201      	movs	r2, #1
 80039c4:	e000      	b.n	80039c8 <prvGetNextExpireTime+0x18>
 80039c6:	2200      	movs	r2, #0
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d105      	bne.n	80039e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80039d4:	4b06      	ldr	r3, [pc, #24]	@ (80039f0 <prvGetNextExpireTime+0x40>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	60fb      	str	r3, [r7, #12]
 80039de:	e001      	b.n	80039e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80039e0:	2300      	movs	r3, #0
 80039e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80039e4:	68fb      	ldr	r3, [r7, #12]
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3714      	adds	r7, #20
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bc80      	pop	{r7}
 80039ee:	4770      	bx	lr
 80039f0:	20000ce8 	.word	0x20000ce8

080039f4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b084      	sub	sp, #16
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80039fc:	f7ff fa76 	bl	8002eec <xTaskGetTickCount>
 8003a00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003a02:	4b0b      	ldr	r3, [pc, #44]	@ (8003a30 <prvSampleTimeNow+0x3c>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68fa      	ldr	r2, [r7, #12]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d205      	bcs.n	8003a18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003a0c:	f000 f93a 	bl	8003c84 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	601a      	str	r2, [r3, #0]
 8003a16:	e002      	b.n	8003a1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003a1e:	4a04      	ldr	r2, [pc, #16]	@ (8003a30 <prvSampleTimeNow+0x3c>)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003a24:	68fb      	ldr	r3, [r7, #12]
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3710      	adds	r7, #16
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	20000cf8 	.word	0x20000cf8

08003a34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b086      	sub	sp, #24
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	60b9      	str	r1, [r7, #8]
 8003a3e:	607a      	str	r2, [r7, #4]
 8003a40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003a42:	2300      	movs	r3, #0
 8003a44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	68ba      	ldr	r2, [r7, #8]
 8003a4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	429a      	cmp	r2, r3
 8003a58:	d812      	bhi.n	8003a80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	1ad2      	subs	r2, r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d302      	bcc.n	8003a6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	617b      	str	r3, [r7, #20]
 8003a6c:	e01b      	b.n	8003aa6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003a6e:	4b10      	ldr	r3, [pc, #64]	@ (8003ab0 <prvInsertTimerInActiveList+0x7c>)
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	3304      	adds	r3, #4
 8003a76:	4619      	mov	r1, r3
 8003a78:	4610      	mov	r0, r2
 8003a7a:	f7fe f9ed 	bl	8001e58 <vListInsert>
 8003a7e:	e012      	b.n	8003aa6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d206      	bcs.n	8003a96 <prvInsertTimerInActiveList+0x62>
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d302      	bcc.n	8003a96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003a90:	2301      	movs	r3, #1
 8003a92:	617b      	str	r3, [r7, #20]
 8003a94:	e007      	b.n	8003aa6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003a96:	4b07      	ldr	r3, [pc, #28]	@ (8003ab4 <prvInsertTimerInActiveList+0x80>)
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	3304      	adds	r3, #4
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	4610      	mov	r0, r2
 8003aa2:	f7fe f9d9 	bl	8001e58 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003aa6:	697b      	ldr	r3, [r7, #20]
}
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	3718      	adds	r7, #24
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	20000cec 	.word	0x20000cec
 8003ab4:	20000ce8 	.word	0x20000ce8

08003ab8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b08e      	sub	sp, #56	@ 0x38
 8003abc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003abe:	e0ce      	b.n	8003c5e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	da19      	bge.n	8003afa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003ac6:	1d3b      	adds	r3, r7, #4
 8003ac8:	3304      	adds	r3, #4
 8003aca:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003acc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d10b      	bne.n	8003aea <prvProcessReceivedCommands+0x32>
	__asm volatile
 8003ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ad6:	f383 8811 	msr	BASEPRI, r3
 8003ada:	f3bf 8f6f 	isb	sy
 8003ade:	f3bf 8f4f 	dsb	sy
 8003ae2:	61fb      	str	r3, [r7, #28]
}
 8003ae4:	bf00      	nop
 8003ae6:	bf00      	nop
 8003ae8:	e7fd      	b.n	8003ae6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003af0:	6850      	ldr	r0, [r2, #4]
 8003af2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003af4:	6892      	ldr	r2, [r2, #8]
 8003af6:	4611      	mov	r1, r2
 8003af8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f2c0 80ae 	blt.w	8003c5e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d004      	beq.n	8003b18 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b10:	3304      	adds	r3, #4
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fe f9d8 	bl	8001ec8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003b18:	463b      	mov	r3, r7
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f7ff ff6a 	bl	80039f4 <prvSampleTimeNow>
 8003b20:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2b09      	cmp	r3, #9
 8003b26:	f200 8097 	bhi.w	8003c58 <prvProcessReceivedCommands+0x1a0>
 8003b2a:	a201      	add	r2, pc, #4	@ (adr r2, 8003b30 <prvProcessReceivedCommands+0x78>)
 8003b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b30:	08003b59 	.word	0x08003b59
 8003b34:	08003b59 	.word	0x08003b59
 8003b38:	08003b59 	.word	0x08003b59
 8003b3c:	08003bcf 	.word	0x08003bcf
 8003b40:	08003be3 	.word	0x08003be3
 8003b44:	08003c2f 	.word	0x08003c2f
 8003b48:	08003b59 	.word	0x08003b59
 8003b4c:	08003b59 	.word	0x08003b59
 8003b50:	08003bcf 	.word	0x08003bcf
 8003b54:	08003be3 	.word	0x08003be3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b5e:	f043 0301 	orr.w	r3, r3, #1
 8003b62:	b2da      	uxtb	r2, r3
 8003b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003b6a:	68ba      	ldr	r2, [r7, #8]
 8003b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	18d1      	adds	r1, r2, r3
 8003b72:	68bb      	ldr	r3, [r7, #8]
 8003b74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b78:	f7ff ff5c 	bl	8003a34 <prvInsertTimerInActiveList>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d06c      	beq.n	8003c5c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b88:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b90:	f003 0304 	and.w	r3, r3, #4
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d061      	beq.n	8003c5c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	441a      	add	r2, r3
 8003ba0:	2300      	movs	r3, #0
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003baa:	f7ff fe03 	bl	80037b4 <xTimerGenericCommand>
 8003bae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003bb0:	6a3b      	ldr	r3, [r7, #32]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d152      	bne.n	8003c5c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8003bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bba:	f383 8811 	msr	BASEPRI, r3
 8003bbe:	f3bf 8f6f 	isb	sy
 8003bc2:	f3bf 8f4f 	dsb	sy
 8003bc6:	61bb      	str	r3, [r7, #24]
}
 8003bc8:	bf00      	nop
 8003bca:	bf00      	nop
 8003bcc:	e7fd      	b.n	8003bca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003bce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bd0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003bd4:	f023 0301 	bic.w	r3, r3, #1
 8003bd8:	b2da      	uxtb	r2, r3
 8003bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bdc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003be0:	e03d      	b.n	8003c5e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003be4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003be8:	f043 0301 	orr.w	r3, r3, #1
 8003bec:	b2da      	uxtb	r2, r3
 8003bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bf0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bf8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003bfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bfc:	699b      	ldr	r3, [r3, #24]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d10b      	bne.n	8003c1a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8003c02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c06:	f383 8811 	msr	BASEPRI, r3
 8003c0a:	f3bf 8f6f 	isb	sy
 8003c0e:	f3bf 8f4f 	dsb	sy
 8003c12:	617b      	str	r3, [r7, #20]
}
 8003c14:	bf00      	nop
 8003c16:	bf00      	nop
 8003c18:	e7fd      	b.n	8003c16 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c1c:	699a      	ldr	r2, [r3, #24]
 8003c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c20:	18d1      	adds	r1, r2, r3
 8003c22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c28:	f7ff ff04 	bl	8003a34 <prvInsertTimerInActiveList>
					break;
 8003c2c:	e017      	b.n	8003c5e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d103      	bne.n	8003c44 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8003c3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003c3e:	f000 fb85 	bl	800434c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003c42:	e00c      	b.n	8003c5e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003c44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003c4a:	f023 0301 	bic.w	r3, r3, #1
 8003c4e:	b2da      	uxtb	r2, r3
 8003c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8003c56:	e002      	b.n	8003c5e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8003c58:	bf00      	nop
 8003c5a:	e000      	b.n	8003c5e <prvProcessReceivedCommands+0x1a6>
					break;
 8003c5c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003c5e:	4b08      	ldr	r3, [pc, #32]	@ (8003c80 <prvProcessReceivedCommands+0x1c8>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	1d39      	adds	r1, r7, #4
 8003c64:	2200      	movs	r2, #0
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7fe fc02 	bl	8002470 <xQueueReceive>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f47f af26 	bne.w	8003ac0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8003c74:	bf00      	nop
 8003c76:	bf00      	nop
 8003c78:	3730      	adds	r7, #48	@ 0x30
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	20000cf0 	.word	0x20000cf0

08003c84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b088      	sub	sp, #32
 8003c88:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003c8a:	e049      	b.n	8003d20 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c8c:	4b2e      	ldr	r3, [pc, #184]	@ (8003d48 <prvSwitchTimerLists+0xc4>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c96:	4b2c      	ldr	r3, [pc, #176]	@ (8003d48 <prvSwitchTimerLists+0xc4>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	3304      	adds	r3, #4
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7fe f90f 	bl	8001ec8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	68f8      	ldr	r0, [r7, #12]
 8003cb0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003cb8:	f003 0304 	and.w	r3, r3, #4
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d02f      	beq.n	8003d20 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	693a      	ldr	r2, [r7, #16]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	429a      	cmp	r2, r3
 8003cd0:	d90e      	bls.n	8003cf0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	68ba      	ldr	r2, [r7, #8]
 8003cd6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	68fa      	ldr	r2, [r7, #12]
 8003cdc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003cde:	4b1a      	ldr	r3, [pc, #104]	@ (8003d48 <prvSwitchTimerLists+0xc4>)
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	3304      	adds	r3, #4
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	4610      	mov	r0, r2
 8003cea:	f7fe f8b5 	bl	8001e58 <vListInsert>
 8003cee:	e017      	b.n	8003d20 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	9300      	str	r3, [sp, #0]
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	693a      	ldr	r2, [r7, #16]
 8003cf8:	2100      	movs	r1, #0
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f7ff fd5a 	bl	80037b4 <xTimerGenericCommand>
 8003d00:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d10b      	bne.n	8003d20 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8003d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d0c:	f383 8811 	msr	BASEPRI, r3
 8003d10:	f3bf 8f6f 	isb	sy
 8003d14:	f3bf 8f4f 	dsb	sy
 8003d18:	603b      	str	r3, [r7, #0]
}
 8003d1a:	bf00      	nop
 8003d1c:	bf00      	nop
 8003d1e:	e7fd      	b.n	8003d1c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003d20:	4b09      	ldr	r3, [pc, #36]	@ (8003d48 <prvSwitchTimerLists+0xc4>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1b0      	bne.n	8003c8c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003d2a:	4b07      	ldr	r3, [pc, #28]	@ (8003d48 <prvSwitchTimerLists+0xc4>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003d30:	4b06      	ldr	r3, [pc, #24]	@ (8003d4c <prvSwitchTimerLists+0xc8>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a04      	ldr	r2, [pc, #16]	@ (8003d48 <prvSwitchTimerLists+0xc4>)
 8003d36:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003d38:	4a04      	ldr	r2, [pc, #16]	@ (8003d4c <prvSwitchTimerLists+0xc8>)
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	6013      	str	r3, [r2, #0]
}
 8003d3e:	bf00      	nop
 8003d40:	3718      	adds	r7, #24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	bf00      	nop
 8003d48:	20000ce8 	.word	0x20000ce8
 8003d4c:	20000cec 	.word	0x20000cec

08003d50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003d56:	f000 f929 	bl	8003fac <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003d5a:	4b15      	ldr	r3, [pc, #84]	@ (8003db0 <prvCheckForValidListAndQueue+0x60>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d120      	bne.n	8003da4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003d62:	4814      	ldr	r0, [pc, #80]	@ (8003db4 <prvCheckForValidListAndQueue+0x64>)
 8003d64:	f7fe f82a 	bl	8001dbc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003d68:	4813      	ldr	r0, [pc, #76]	@ (8003db8 <prvCheckForValidListAndQueue+0x68>)
 8003d6a:	f7fe f827 	bl	8001dbc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003d6e:	4b13      	ldr	r3, [pc, #76]	@ (8003dbc <prvCheckForValidListAndQueue+0x6c>)
 8003d70:	4a10      	ldr	r2, [pc, #64]	@ (8003db4 <prvCheckForValidListAndQueue+0x64>)
 8003d72:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003d74:	4b12      	ldr	r3, [pc, #72]	@ (8003dc0 <prvCheckForValidListAndQueue+0x70>)
 8003d76:	4a10      	ldr	r2, [pc, #64]	@ (8003db8 <prvCheckForValidListAndQueue+0x68>)
 8003d78:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	4b11      	ldr	r3, [pc, #68]	@ (8003dc4 <prvCheckForValidListAndQueue+0x74>)
 8003d80:	4a11      	ldr	r2, [pc, #68]	@ (8003dc8 <prvCheckForValidListAndQueue+0x78>)
 8003d82:	2110      	movs	r1, #16
 8003d84:	200a      	movs	r0, #10
 8003d86:	f7fe f933 	bl	8001ff0 <xQueueGenericCreateStatic>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	4a08      	ldr	r2, [pc, #32]	@ (8003db0 <prvCheckForValidListAndQueue+0x60>)
 8003d8e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003d90:	4b07      	ldr	r3, [pc, #28]	@ (8003db0 <prvCheckForValidListAndQueue+0x60>)
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d005      	beq.n	8003da4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003d98:	4b05      	ldr	r3, [pc, #20]	@ (8003db0 <prvCheckForValidListAndQueue+0x60>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	490b      	ldr	r1, [pc, #44]	@ (8003dcc <prvCheckForValidListAndQueue+0x7c>)
 8003d9e:	4618      	mov	r0, r3
 8003da0:	f7fe fd58 	bl	8002854 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003da4:	f000 f932 	bl	800400c <vPortExitCritical>
}
 8003da8:	bf00      	nop
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	20000cf0 	.word	0x20000cf0
 8003db4:	20000cc0 	.word	0x20000cc0
 8003db8:	20000cd4 	.word	0x20000cd4
 8003dbc:	20000ce8 	.word	0x20000ce8
 8003dc0:	20000cec 	.word	0x20000cec
 8003dc4:	20000d9c 	.word	0x20000d9c
 8003dc8:	20000cfc 	.word	0x20000cfc
 8003dcc:	08004630 	.word	0x08004630

08003dd0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b085      	sub	sp, #20
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	3b04      	subs	r3, #4
 8003de0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003de8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	3b04      	subs	r3, #4
 8003dee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	f023 0201 	bic.w	r2, r3, #1
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	3b04      	subs	r3, #4
 8003dfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003e00:	4a08      	ldr	r2, [pc, #32]	@ (8003e24 <pxPortInitialiseStack+0x54>)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	3b14      	subs	r3, #20
 8003e0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	3b20      	subs	r3, #32
 8003e16:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003e18:	68fb      	ldr	r3, [r7, #12]
}
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	3714      	adds	r7, #20
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bc80      	pop	{r7}
 8003e22:	4770      	bx	lr
 8003e24:	08003e29 	.word	0x08003e29

08003e28 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003e28:	b480      	push	{r7}
 8003e2a:	b085      	sub	sp, #20
 8003e2c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003e32:	4b12      	ldr	r3, [pc, #72]	@ (8003e7c <prvTaskExitError+0x54>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3a:	d00b      	beq.n	8003e54 <prvTaskExitError+0x2c>
	__asm volatile
 8003e3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e40:	f383 8811 	msr	BASEPRI, r3
 8003e44:	f3bf 8f6f 	isb	sy
 8003e48:	f3bf 8f4f 	dsb	sy
 8003e4c:	60fb      	str	r3, [r7, #12]
}
 8003e4e:	bf00      	nop
 8003e50:	bf00      	nop
 8003e52:	e7fd      	b.n	8003e50 <prvTaskExitError+0x28>
	__asm volatile
 8003e54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e58:	f383 8811 	msr	BASEPRI, r3
 8003e5c:	f3bf 8f6f 	isb	sy
 8003e60:	f3bf 8f4f 	dsb	sy
 8003e64:	60bb      	str	r3, [r7, #8]
}
 8003e66:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003e68:	bf00      	nop
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d0fc      	beq.n	8003e6a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003e70:	bf00      	nop
 8003e72:	bf00      	nop
 8003e74:	3714      	adds	r7, #20
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bc80      	pop	{r7}
 8003e7a:	4770      	bx	lr
 8003e7c:	2000000c 	.word	0x2000000c

08003e80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003e80:	4b07      	ldr	r3, [pc, #28]	@ (8003ea0 <pxCurrentTCBConst2>)
 8003e82:	6819      	ldr	r1, [r3, #0]
 8003e84:	6808      	ldr	r0, [r1, #0]
 8003e86:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003e8a:	f380 8809 	msr	PSP, r0
 8003e8e:	f3bf 8f6f 	isb	sy
 8003e92:	f04f 0000 	mov.w	r0, #0
 8003e96:	f380 8811 	msr	BASEPRI, r0
 8003e9a:	f04e 0e0d 	orr.w	lr, lr, #13
 8003e9e:	4770      	bx	lr

08003ea0 <pxCurrentTCBConst2>:
 8003ea0:	200007c0 	.word	0x200007c0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003ea4:	bf00      	nop
 8003ea6:	bf00      	nop

08003ea8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003ea8:	4806      	ldr	r0, [pc, #24]	@ (8003ec4 <prvPortStartFirstTask+0x1c>)
 8003eaa:	6800      	ldr	r0, [r0, #0]
 8003eac:	6800      	ldr	r0, [r0, #0]
 8003eae:	f380 8808 	msr	MSP, r0
 8003eb2:	b662      	cpsie	i
 8003eb4:	b661      	cpsie	f
 8003eb6:	f3bf 8f4f 	dsb	sy
 8003eba:	f3bf 8f6f 	isb	sy
 8003ebe:	df00      	svc	0
 8003ec0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003ec2:	bf00      	nop
 8003ec4:	e000ed08 	.word	0xe000ed08

08003ec8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003ece:	4b32      	ldr	r3, [pc, #200]	@ (8003f98 <xPortStartScheduler+0xd0>)
 8003ed0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	781b      	ldrb	r3, [r3, #0]
 8003ed6:	b2db      	uxtb	r3, r3
 8003ed8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	22ff      	movs	r2, #255	@ 0xff
 8003ede:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003ee8:	78fb      	ldrb	r3, [r7, #3]
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003ef0:	b2da      	uxtb	r2, r3
 8003ef2:	4b2a      	ldr	r3, [pc, #168]	@ (8003f9c <xPortStartScheduler+0xd4>)
 8003ef4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003ef6:	4b2a      	ldr	r3, [pc, #168]	@ (8003fa0 <xPortStartScheduler+0xd8>)
 8003ef8:	2207      	movs	r2, #7
 8003efa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003efc:	e009      	b.n	8003f12 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8003efe:	4b28      	ldr	r3, [pc, #160]	@ (8003fa0 <xPortStartScheduler+0xd8>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	3b01      	subs	r3, #1
 8003f04:	4a26      	ldr	r2, [pc, #152]	@ (8003fa0 <xPortStartScheduler+0xd8>)
 8003f06:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f08:	78fb      	ldrb	r3, [r7, #3]
 8003f0a:	b2db      	uxtb	r3, r3
 8003f0c:	005b      	lsls	r3, r3, #1
 8003f0e:	b2db      	uxtb	r3, r3
 8003f10:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f12:	78fb      	ldrb	r3, [r7, #3]
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f1a:	2b80      	cmp	r3, #128	@ 0x80
 8003f1c:	d0ef      	beq.n	8003efe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003f1e:	4b20      	ldr	r3, [pc, #128]	@ (8003fa0 <xPortStartScheduler+0xd8>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f1c3 0307 	rsb	r3, r3, #7
 8003f26:	2b04      	cmp	r3, #4
 8003f28:	d00b      	beq.n	8003f42 <xPortStartScheduler+0x7a>
	__asm volatile
 8003f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f2e:	f383 8811 	msr	BASEPRI, r3
 8003f32:	f3bf 8f6f 	isb	sy
 8003f36:	f3bf 8f4f 	dsb	sy
 8003f3a:	60bb      	str	r3, [r7, #8]
}
 8003f3c:	bf00      	nop
 8003f3e:	bf00      	nop
 8003f40:	e7fd      	b.n	8003f3e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003f42:	4b17      	ldr	r3, [pc, #92]	@ (8003fa0 <xPortStartScheduler+0xd8>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	021b      	lsls	r3, r3, #8
 8003f48:	4a15      	ldr	r2, [pc, #84]	@ (8003fa0 <xPortStartScheduler+0xd8>)
 8003f4a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003f4c:	4b14      	ldr	r3, [pc, #80]	@ (8003fa0 <xPortStartScheduler+0xd8>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003f54:	4a12      	ldr	r2, [pc, #72]	@ (8003fa0 <xPortStartScheduler+0xd8>)
 8003f56:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	b2da      	uxtb	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003f60:	4b10      	ldr	r3, [pc, #64]	@ (8003fa4 <xPortStartScheduler+0xdc>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a0f      	ldr	r2, [pc, #60]	@ (8003fa4 <xPortStartScheduler+0xdc>)
 8003f66:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003f6a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003f6c:	4b0d      	ldr	r3, [pc, #52]	@ (8003fa4 <xPortStartScheduler+0xdc>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a0c      	ldr	r2, [pc, #48]	@ (8003fa4 <xPortStartScheduler+0xdc>)
 8003f72:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003f76:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003f78:	f000 f8b8 	bl	80040ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8003fa8 <xPortStartScheduler+0xe0>)
 8003f7e:	2200      	movs	r2, #0
 8003f80:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003f82:	f7ff ff91 	bl	8003ea8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003f86:	f7ff f879 	bl	800307c <vTaskSwitchContext>
	prvTaskExitError();
 8003f8a:	f7ff ff4d 	bl	8003e28 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3710      	adds	r7, #16
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	e000e400 	.word	0xe000e400
 8003f9c:	20000dec 	.word	0x20000dec
 8003fa0:	20000df0 	.word	0x20000df0
 8003fa4:	e000ed20 	.word	0xe000ed20
 8003fa8:	2000000c 	.word	0x2000000c

08003fac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
	__asm volatile
 8003fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fb6:	f383 8811 	msr	BASEPRI, r3
 8003fba:	f3bf 8f6f 	isb	sy
 8003fbe:	f3bf 8f4f 	dsb	sy
 8003fc2:	607b      	str	r3, [r7, #4]
}
 8003fc4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8004004 <vPortEnterCritical+0x58>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	3301      	adds	r3, #1
 8003fcc:	4a0d      	ldr	r2, [pc, #52]	@ (8004004 <vPortEnterCritical+0x58>)
 8003fce:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8004004 <vPortEnterCritical+0x58>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d110      	bne.n	8003ffa <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003fd8:	4b0b      	ldr	r3, [pc, #44]	@ (8004008 <vPortEnterCritical+0x5c>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00b      	beq.n	8003ffa <vPortEnterCritical+0x4e>
	__asm volatile
 8003fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fe6:	f383 8811 	msr	BASEPRI, r3
 8003fea:	f3bf 8f6f 	isb	sy
 8003fee:	f3bf 8f4f 	dsb	sy
 8003ff2:	603b      	str	r3, [r7, #0]
}
 8003ff4:	bf00      	nop
 8003ff6:	bf00      	nop
 8003ff8:	e7fd      	b.n	8003ff6 <vPortEnterCritical+0x4a>
	}
}
 8003ffa:	bf00      	nop
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bc80      	pop	{r7}
 8004002:	4770      	bx	lr
 8004004:	2000000c 	.word	0x2000000c
 8004008:	e000ed04 	.word	0xe000ed04

0800400c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800400c:	b480      	push	{r7}
 800400e:	b083      	sub	sp, #12
 8004010:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004012:	4b12      	ldr	r3, [pc, #72]	@ (800405c <vPortExitCritical+0x50>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d10b      	bne.n	8004032 <vPortExitCritical+0x26>
	__asm volatile
 800401a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800401e:	f383 8811 	msr	BASEPRI, r3
 8004022:	f3bf 8f6f 	isb	sy
 8004026:	f3bf 8f4f 	dsb	sy
 800402a:	607b      	str	r3, [r7, #4]
}
 800402c:	bf00      	nop
 800402e:	bf00      	nop
 8004030:	e7fd      	b.n	800402e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004032:	4b0a      	ldr	r3, [pc, #40]	@ (800405c <vPortExitCritical+0x50>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	3b01      	subs	r3, #1
 8004038:	4a08      	ldr	r2, [pc, #32]	@ (800405c <vPortExitCritical+0x50>)
 800403a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800403c:	4b07      	ldr	r3, [pc, #28]	@ (800405c <vPortExitCritical+0x50>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d105      	bne.n	8004050 <vPortExitCritical+0x44>
 8004044:	2300      	movs	r3, #0
 8004046:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	f383 8811 	msr	BASEPRI, r3
}
 800404e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004050:	bf00      	nop
 8004052:	370c      	adds	r7, #12
 8004054:	46bd      	mov	sp, r7
 8004056:	bc80      	pop	{r7}
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	2000000c 	.word	0x2000000c

08004060 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004060:	f3ef 8009 	mrs	r0, PSP
 8004064:	f3bf 8f6f 	isb	sy
 8004068:	4b0d      	ldr	r3, [pc, #52]	@ (80040a0 <pxCurrentTCBConst>)
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004070:	6010      	str	r0, [r2, #0]
 8004072:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004076:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800407a:	f380 8811 	msr	BASEPRI, r0
 800407e:	f7fe fffd 	bl	800307c <vTaskSwitchContext>
 8004082:	f04f 0000 	mov.w	r0, #0
 8004086:	f380 8811 	msr	BASEPRI, r0
 800408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800408e:	6819      	ldr	r1, [r3, #0]
 8004090:	6808      	ldr	r0, [r1, #0]
 8004092:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004096:	f380 8809 	msr	PSP, r0
 800409a:	f3bf 8f6f 	isb	sy
 800409e:	4770      	bx	lr

080040a0 <pxCurrentTCBConst>:
 80040a0:	200007c0 	.word	0x200007c0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80040a4:	bf00      	nop
 80040a6:	bf00      	nop

080040a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
	__asm volatile
 80040ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040b2:	f383 8811 	msr	BASEPRI, r3
 80040b6:	f3bf 8f6f 	isb	sy
 80040ba:	f3bf 8f4f 	dsb	sy
 80040be:	607b      	str	r3, [r7, #4]
}
 80040c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80040c2:	f7fe ff21 	bl	8002f08 <xTaskIncrementTick>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d003      	beq.n	80040d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80040cc:	4b06      	ldr	r3, [pc, #24]	@ (80040e8 <xPortSysTickHandler+0x40>)
 80040ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	2300      	movs	r3, #0
 80040d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	f383 8811 	msr	BASEPRI, r3
}
 80040de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80040e0:	bf00      	nop
 80040e2:	3708      	adds	r7, #8
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	e000ed04 	.word	0xe000ed04

080040ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80040f0:	4b0a      	ldr	r3, [pc, #40]	@ (800411c <vPortSetupTimerInterrupt+0x30>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80040f6:	4b0a      	ldr	r3, [pc, #40]	@ (8004120 <vPortSetupTimerInterrupt+0x34>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80040fc:	4b09      	ldr	r3, [pc, #36]	@ (8004124 <vPortSetupTimerInterrupt+0x38>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a09      	ldr	r2, [pc, #36]	@ (8004128 <vPortSetupTimerInterrupt+0x3c>)
 8004102:	fba2 2303 	umull	r2, r3, r2, r3
 8004106:	099b      	lsrs	r3, r3, #6
 8004108:	4a08      	ldr	r2, [pc, #32]	@ (800412c <vPortSetupTimerInterrupt+0x40>)
 800410a:	3b01      	subs	r3, #1
 800410c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800410e:	4b03      	ldr	r3, [pc, #12]	@ (800411c <vPortSetupTimerInterrupt+0x30>)
 8004110:	2207      	movs	r2, #7
 8004112:	601a      	str	r2, [r3, #0]
}
 8004114:	bf00      	nop
 8004116:	46bd      	mov	sp, r7
 8004118:	bc80      	pop	{r7}
 800411a:	4770      	bx	lr
 800411c:	e000e010 	.word	0xe000e010
 8004120:	e000e018 	.word	0xe000e018
 8004124:	20000000 	.word	0x20000000
 8004128:	10624dd3 	.word	0x10624dd3
 800412c:	e000e014 	.word	0xe000e014

08004130 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004136:	f3ef 8305 	mrs	r3, IPSR
 800413a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	2b0f      	cmp	r3, #15
 8004140:	d915      	bls.n	800416e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004142:	4a17      	ldr	r2, [pc, #92]	@ (80041a0 <vPortValidateInterruptPriority+0x70>)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	4413      	add	r3, r2
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800414c:	4b15      	ldr	r3, [pc, #84]	@ (80041a4 <vPortValidateInterruptPriority+0x74>)
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	7afa      	ldrb	r2, [r7, #11]
 8004152:	429a      	cmp	r2, r3
 8004154:	d20b      	bcs.n	800416e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800415a:	f383 8811 	msr	BASEPRI, r3
 800415e:	f3bf 8f6f 	isb	sy
 8004162:	f3bf 8f4f 	dsb	sy
 8004166:	607b      	str	r3, [r7, #4]
}
 8004168:	bf00      	nop
 800416a:	bf00      	nop
 800416c:	e7fd      	b.n	800416a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800416e:	4b0e      	ldr	r3, [pc, #56]	@ (80041a8 <vPortValidateInterruptPriority+0x78>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004176:	4b0d      	ldr	r3, [pc, #52]	@ (80041ac <vPortValidateInterruptPriority+0x7c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	429a      	cmp	r2, r3
 800417c:	d90b      	bls.n	8004196 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800417e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004182:	f383 8811 	msr	BASEPRI, r3
 8004186:	f3bf 8f6f 	isb	sy
 800418a:	f3bf 8f4f 	dsb	sy
 800418e:	603b      	str	r3, [r7, #0]
}
 8004190:	bf00      	nop
 8004192:	bf00      	nop
 8004194:	e7fd      	b.n	8004192 <vPortValidateInterruptPriority+0x62>
	}
 8004196:	bf00      	nop
 8004198:	3714      	adds	r7, #20
 800419a:	46bd      	mov	sp, r7
 800419c:	bc80      	pop	{r7}
 800419e:	4770      	bx	lr
 80041a0:	e000e3f0 	.word	0xe000e3f0
 80041a4:	20000dec 	.word	0x20000dec
 80041a8:	e000ed0c 	.word	0xe000ed0c
 80041ac:	20000df0 	.word	0x20000df0

080041b0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b08a      	sub	sp, #40	@ 0x28
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80041b8:	2300      	movs	r3, #0
 80041ba:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80041bc:	f7fe fdea 	bl	8002d94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80041c0:	4b5c      	ldr	r3, [pc, #368]	@ (8004334 <pvPortMalloc+0x184>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d101      	bne.n	80041cc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80041c8:	f000 f924 	bl	8004414 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80041cc:	4b5a      	ldr	r3, [pc, #360]	@ (8004338 <pvPortMalloc+0x188>)
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4013      	ands	r3, r2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f040 8095 	bne.w	8004304 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d01e      	beq.n	800421e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80041e0:	2208      	movs	r2, #8
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4413      	add	r3, r2
 80041e6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	f003 0307 	and.w	r3, r3, #7
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d015      	beq.n	800421e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	f023 0307 	bic.w	r3, r3, #7
 80041f8:	3308      	adds	r3, #8
 80041fa:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f003 0307 	and.w	r3, r3, #7
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00b      	beq.n	800421e <pvPortMalloc+0x6e>
	__asm volatile
 8004206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800420a:	f383 8811 	msr	BASEPRI, r3
 800420e:	f3bf 8f6f 	isb	sy
 8004212:	f3bf 8f4f 	dsb	sy
 8004216:	617b      	str	r3, [r7, #20]
}
 8004218:	bf00      	nop
 800421a:	bf00      	nop
 800421c:	e7fd      	b.n	800421a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d06f      	beq.n	8004304 <pvPortMalloc+0x154>
 8004224:	4b45      	ldr	r3, [pc, #276]	@ (800433c <pvPortMalloc+0x18c>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	687a      	ldr	r2, [r7, #4]
 800422a:	429a      	cmp	r2, r3
 800422c:	d86a      	bhi.n	8004304 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800422e:	4b44      	ldr	r3, [pc, #272]	@ (8004340 <pvPortMalloc+0x190>)
 8004230:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004232:	4b43      	ldr	r3, [pc, #268]	@ (8004340 <pvPortMalloc+0x190>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004238:	e004      	b.n	8004244 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800423a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800423e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	687a      	ldr	r2, [r7, #4]
 800424a:	429a      	cmp	r2, r3
 800424c:	d903      	bls.n	8004256 <pvPortMalloc+0xa6>
 800424e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1f1      	bne.n	800423a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004256:	4b37      	ldr	r3, [pc, #220]	@ (8004334 <pvPortMalloc+0x184>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800425c:	429a      	cmp	r2, r3
 800425e:	d051      	beq.n	8004304 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004260:	6a3b      	ldr	r3, [r7, #32]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2208      	movs	r2, #8
 8004266:	4413      	add	r3, r2
 8004268:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800426a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	6a3b      	ldr	r3, [r7, #32]
 8004270:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	1ad2      	subs	r2, r2, r3
 800427a:	2308      	movs	r3, #8
 800427c:	005b      	lsls	r3, r3, #1
 800427e:	429a      	cmp	r2, r3
 8004280:	d920      	bls.n	80042c4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004282:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4413      	add	r3, r2
 8004288:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800428a:	69bb      	ldr	r3, [r7, #24]
 800428c:	f003 0307 	and.w	r3, r3, #7
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00b      	beq.n	80042ac <pvPortMalloc+0xfc>
	__asm volatile
 8004294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004298:	f383 8811 	msr	BASEPRI, r3
 800429c:	f3bf 8f6f 	isb	sy
 80042a0:	f3bf 8f4f 	dsb	sy
 80042a4:	613b      	str	r3, [r7, #16]
}
 80042a6:	bf00      	nop
 80042a8:	bf00      	nop
 80042aa:	e7fd      	b.n	80042a8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80042ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ae:	685a      	ldr	r2, [r3, #4]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	1ad2      	subs	r2, r2, r3
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80042b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80042be:	69b8      	ldr	r0, [r7, #24]
 80042c0:	f000 f90a 	bl	80044d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80042c4:	4b1d      	ldr	r3, [pc, #116]	@ (800433c <pvPortMalloc+0x18c>)
 80042c6:	681a      	ldr	r2, [r3, #0]
 80042c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	1ad3      	subs	r3, r2, r3
 80042ce:	4a1b      	ldr	r2, [pc, #108]	@ (800433c <pvPortMalloc+0x18c>)
 80042d0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80042d2:	4b1a      	ldr	r3, [pc, #104]	@ (800433c <pvPortMalloc+0x18c>)
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	4b1b      	ldr	r3, [pc, #108]	@ (8004344 <pvPortMalloc+0x194>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	429a      	cmp	r2, r3
 80042dc:	d203      	bcs.n	80042e6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80042de:	4b17      	ldr	r3, [pc, #92]	@ (800433c <pvPortMalloc+0x18c>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a18      	ldr	r2, [pc, #96]	@ (8004344 <pvPortMalloc+0x194>)
 80042e4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80042e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e8:	685a      	ldr	r2, [r3, #4]
 80042ea:	4b13      	ldr	r3, [pc, #76]	@ (8004338 <pvPortMalloc+0x188>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	431a      	orrs	r2, r3
 80042f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80042f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f6:	2200      	movs	r2, #0
 80042f8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80042fa:	4b13      	ldr	r3, [pc, #76]	@ (8004348 <pvPortMalloc+0x198>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	3301      	adds	r3, #1
 8004300:	4a11      	ldr	r2, [pc, #68]	@ (8004348 <pvPortMalloc+0x198>)
 8004302:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004304:	f7fe fd54 	bl	8002db0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	f003 0307 	and.w	r3, r3, #7
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00b      	beq.n	800432a <pvPortMalloc+0x17a>
	__asm volatile
 8004312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004316:	f383 8811 	msr	BASEPRI, r3
 800431a:	f3bf 8f6f 	isb	sy
 800431e:	f3bf 8f4f 	dsb	sy
 8004322:	60fb      	str	r3, [r7, #12]
}
 8004324:	bf00      	nop
 8004326:	bf00      	nop
 8004328:	e7fd      	b.n	8004326 <pvPortMalloc+0x176>
	return pvReturn;
 800432a:	69fb      	ldr	r3, [r7, #28]
}
 800432c:	4618      	mov	r0, r3
 800432e:	3728      	adds	r7, #40	@ 0x28
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}
 8004334:	200019fc 	.word	0x200019fc
 8004338:	20001a10 	.word	0x20001a10
 800433c:	20001a00 	.word	0x20001a00
 8004340:	200019f4 	.word	0x200019f4
 8004344:	20001a04 	.word	0x20001a04
 8004348:	20001a08 	.word	0x20001a08

0800434c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b086      	sub	sp, #24
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d04f      	beq.n	80043fe <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800435e:	2308      	movs	r3, #8
 8004360:	425b      	negs	r3, r3
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	4413      	add	r3, r2
 8004366:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	685a      	ldr	r2, [r3, #4]
 8004370:	4b25      	ldr	r3, [pc, #148]	@ (8004408 <vPortFree+0xbc>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4013      	ands	r3, r2
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10b      	bne.n	8004392 <vPortFree+0x46>
	__asm volatile
 800437a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800437e:	f383 8811 	msr	BASEPRI, r3
 8004382:	f3bf 8f6f 	isb	sy
 8004386:	f3bf 8f4f 	dsb	sy
 800438a:	60fb      	str	r3, [r7, #12]
}
 800438c:	bf00      	nop
 800438e:	bf00      	nop
 8004390:	e7fd      	b.n	800438e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d00b      	beq.n	80043b2 <vPortFree+0x66>
	__asm volatile
 800439a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800439e:	f383 8811 	msr	BASEPRI, r3
 80043a2:	f3bf 8f6f 	isb	sy
 80043a6:	f3bf 8f4f 	dsb	sy
 80043aa:	60bb      	str	r3, [r7, #8]
}
 80043ac:	bf00      	nop
 80043ae:	bf00      	nop
 80043b0:	e7fd      	b.n	80043ae <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	685a      	ldr	r2, [r3, #4]
 80043b6:	4b14      	ldr	r3, [pc, #80]	@ (8004408 <vPortFree+0xbc>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4013      	ands	r3, r2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d01e      	beq.n	80043fe <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d11a      	bne.n	80043fe <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	4b0e      	ldr	r3, [pc, #56]	@ (8004408 <vPortFree+0xbc>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	43db      	mvns	r3, r3
 80043d2:	401a      	ands	r2, r3
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80043d8:	f7fe fcdc 	bl	8002d94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	4b0a      	ldr	r3, [pc, #40]	@ (800440c <vPortFree+0xc0>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4413      	add	r3, r2
 80043e6:	4a09      	ldr	r2, [pc, #36]	@ (800440c <vPortFree+0xc0>)
 80043e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80043ea:	6938      	ldr	r0, [r7, #16]
 80043ec:	f000 f874 	bl	80044d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80043f0:	4b07      	ldr	r3, [pc, #28]	@ (8004410 <vPortFree+0xc4>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	3301      	adds	r3, #1
 80043f6:	4a06      	ldr	r2, [pc, #24]	@ (8004410 <vPortFree+0xc4>)
 80043f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80043fa:	f7fe fcd9 	bl	8002db0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80043fe:	bf00      	nop
 8004400:	3718      	adds	r7, #24
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	20001a10 	.word	0x20001a10
 800440c:	20001a00 	.word	0x20001a00
 8004410:	20001a0c 	.word	0x20001a0c

08004414 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800441a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800441e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004420:	4b27      	ldr	r3, [pc, #156]	@ (80044c0 <prvHeapInit+0xac>)
 8004422:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f003 0307 	and.w	r3, r3, #7
 800442a:	2b00      	cmp	r3, #0
 800442c:	d00c      	beq.n	8004448 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	3307      	adds	r3, #7
 8004432:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f023 0307 	bic.w	r3, r3, #7
 800443a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	4a1f      	ldr	r2, [pc, #124]	@ (80044c0 <prvHeapInit+0xac>)
 8004444:	4413      	add	r3, r2
 8004446:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800444c:	4a1d      	ldr	r2, [pc, #116]	@ (80044c4 <prvHeapInit+0xb0>)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004452:	4b1c      	ldr	r3, [pc, #112]	@ (80044c4 <prvHeapInit+0xb0>)
 8004454:	2200      	movs	r2, #0
 8004456:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68ba      	ldr	r2, [r7, #8]
 800445c:	4413      	add	r3, r2
 800445e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004460:	2208      	movs	r2, #8
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	1a9b      	subs	r3, r3, r2
 8004466:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f023 0307 	bic.w	r3, r3, #7
 800446e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	4a15      	ldr	r2, [pc, #84]	@ (80044c8 <prvHeapInit+0xb4>)
 8004474:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004476:	4b14      	ldr	r3, [pc, #80]	@ (80044c8 <prvHeapInit+0xb4>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	2200      	movs	r2, #0
 800447c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800447e:	4b12      	ldr	r3, [pc, #72]	@ (80044c8 <prvHeapInit+0xb4>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2200      	movs	r2, #0
 8004484:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	1ad2      	subs	r2, r2, r3
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004494:	4b0c      	ldr	r3, [pc, #48]	@ (80044c8 <prvHeapInit+0xb4>)
 8004496:	681a      	ldr	r2, [r3, #0]
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	4a0a      	ldr	r2, [pc, #40]	@ (80044cc <prvHeapInit+0xb8>)
 80044a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	4a09      	ldr	r2, [pc, #36]	@ (80044d0 <prvHeapInit+0xbc>)
 80044aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80044ac:	4b09      	ldr	r3, [pc, #36]	@ (80044d4 <prvHeapInit+0xc0>)
 80044ae:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80044b2:	601a      	str	r2, [r3, #0]
}
 80044b4:	bf00      	nop
 80044b6:	3714      	adds	r7, #20
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bc80      	pop	{r7}
 80044bc:	4770      	bx	lr
 80044be:	bf00      	nop
 80044c0:	20000df4 	.word	0x20000df4
 80044c4:	200019f4 	.word	0x200019f4
 80044c8:	200019fc 	.word	0x200019fc
 80044cc:	20001a04 	.word	0x20001a04
 80044d0:	20001a00 	.word	0x20001a00
 80044d4:	20001a10 	.word	0x20001a10

080044d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80044e0:	4b27      	ldr	r3, [pc, #156]	@ (8004580 <prvInsertBlockIntoFreeList+0xa8>)
 80044e2:	60fb      	str	r3, [r7, #12]
 80044e4:	e002      	b.n	80044ec <prvInsertBlockIntoFreeList+0x14>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	60fb      	str	r3, [r7, #12]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d8f7      	bhi.n	80044e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	4413      	add	r3, r2
 8004502:	687a      	ldr	r2, [r7, #4]
 8004504:	429a      	cmp	r2, r3
 8004506:	d108      	bne.n	800451a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	685a      	ldr	r2, [r3, #4]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	441a      	add	r2, r3
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	441a      	add	r2, r3
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	429a      	cmp	r2, r3
 800452c:	d118      	bne.n	8004560 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	4b14      	ldr	r3, [pc, #80]	@ (8004584 <prvInsertBlockIntoFreeList+0xac>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	429a      	cmp	r2, r3
 8004538:	d00d      	beq.n	8004556 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685a      	ldr	r2, [r3, #4]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	441a      	add	r2, r3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	601a      	str	r2, [r3, #0]
 8004554:	e008      	b.n	8004568 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004556:	4b0b      	ldr	r3, [pc, #44]	@ (8004584 <prvInsertBlockIntoFreeList+0xac>)
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	601a      	str	r2, [r3, #0]
 800455e:	e003      	b.n	8004568 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681a      	ldr	r2, [r3, #0]
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	429a      	cmp	r2, r3
 800456e:	d002      	beq.n	8004576 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004576:	bf00      	nop
 8004578:	3714      	adds	r7, #20
 800457a:	46bd      	mov	sp, r7
 800457c:	bc80      	pop	{r7}
 800457e:	4770      	bx	lr
 8004580:	200019f4 	.word	0x200019f4
 8004584:	200019fc 	.word	0x200019fc

08004588 <memset>:
 8004588:	4603      	mov	r3, r0
 800458a:	4402      	add	r2, r0
 800458c:	4293      	cmp	r3, r2
 800458e:	d100      	bne.n	8004592 <memset+0xa>
 8004590:	4770      	bx	lr
 8004592:	f803 1b01 	strb.w	r1, [r3], #1
 8004596:	e7f9      	b.n	800458c <memset+0x4>

08004598 <__libc_init_array>:
 8004598:	b570      	push	{r4, r5, r6, lr}
 800459a:	2600      	movs	r6, #0
 800459c:	4d0c      	ldr	r5, [pc, #48]	@ (80045d0 <__libc_init_array+0x38>)
 800459e:	4c0d      	ldr	r4, [pc, #52]	@ (80045d4 <__libc_init_array+0x3c>)
 80045a0:	1b64      	subs	r4, r4, r5
 80045a2:	10a4      	asrs	r4, r4, #2
 80045a4:	42a6      	cmp	r6, r4
 80045a6:	d109      	bne.n	80045bc <__libc_init_array+0x24>
 80045a8:	f000 f828 	bl	80045fc <_init>
 80045ac:	2600      	movs	r6, #0
 80045ae:	4d0a      	ldr	r5, [pc, #40]	@ (80045d8 <__libc_init_array+0x40>)
 80045b0:	4c0a      	ldr	r4, [pc, #40]	@ (80045dc <__libc_init_array+0x44>)
 80045b2:	1b64      	subs	r4, r4, r5
 80045b4:	10a4      	asrs	r4, r4, #2
 80045b6:	42a6      	cmp	r6, r4
 80045b8:	d105      	bne.n	80045c6 <__libc_init_array+0x2e>
 80045ba:	bd70      	pop	{r4, r5, r6, pc}
 80045bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80045c0:	4798      	blx	r3
 80045c2:	3601      	adds	r6, #1
 80045c4:	e7ee      	b.n	80045a4 <__libc_init_array+0xc>
 80045c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ca:	4798      	blx	r3
 80045cc:	3601      	adds	r6, #1
 80045ce:	e7f2      	b.n	80045b6 <__libc_init_array+0x1e>
 80045d0:	08004688 	.word	0x08004688
 80045d4:	08004688 	.word	0x08004688
 80045d8:	08004688 	.word	0x08004688
 80045dc:	0800468c 	.word	0x0800468c

080045e0 <memcpy>:
 80045e0:	440a      	add	r2, r1
 80045e2:	4291      	cmp	r1, r2
 80045e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80045e8:	d100      	bne.n	80045ec <memcpy+0xc>
 80045ea:	4770      	bx	lr
 80045ec:	b510      	push	{r4, lr}
 80045ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045f2:	4291      	cmp	r1, r2
 80045f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045f8:	d1f9      	bne.n	80045ee <memcpy+0xe>
 80045fa:	bd10      	pop	{r4, pc}

080045fc <_init>:
 80045fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045fe:	bf00      	nop
 8004600:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004602:	bc08      	pop	{r3}
 8004604:	469e      	mov	lr, r3
 8004606:	4770      	bx	lr

08004608 <_fini>:
 8004608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800460a:	bf00      	nop
 800460c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800460e:	bc08      	pop	{r3}
 8004610:	469e      	mov	lr, r3
 8004612:	4770      	bx	lr
